
SWITCH_DRIVER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b0c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000b0c  00000b80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001284  00000000  00000000  00000b8c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000097e  00000000  00000000  00001e10  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e0       	ldi	r30, 0x0C	; 12
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 e5 00 	call	0x1ca	; 0x1ca <main>
  7a:	0c 94 84 05 	jmp	0xb08	; 0xb08 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <Switch_init>:
  82:	df 93       	push	r29
  84:	cf 93       	push	r28
  86:	00 d0       	rcall	.+0      	; 0x88 <Switch_init+0x6>
  88:	00 d0       	rcall	.+0      	; 0x8a <Switch_init+0x8>
  8a:	cd b7       	in	r28, 0x3d	; 61
  8c:	de b7       	in	r29, 0x3e	; 62
  8e:	9c 83       	std	Y+4, r25	; 0x04
  90:	8b 83       	std	Y+3, r24	; 0x03
  92:	81 e0       	ldi	r24, 0x01	; 1
  94:	8a 83       	std	Y+2, r24	; 0x02
  96:	19 82       	std	Y+1, r1	; 0x01
  98:	8b 81       	ldd	r24, Y+3	; 0x03
  9a:	9c 81       	ldd	r25, Y+4	; 0x04
  9c:	00 97       	sbiw	r24, 0x00	; 0
  9e:	09 f4       	brne	.+2      	; 0xa2 <Switch_init+0x20>
  a0:	5c c0       	rjmp	.+184    	; 0x15a <Switch_init+0xd8>
  a2:	19 82       	std	Y+1, r1	; 0x01
  a4:	55 c0       	rjmp	.+170    	; 0x150 <Switch_init+0xce>
  a6:	89 81       	ldd	r24, Y+1	; 0x01
  a8:	28 2f       	mov	r18, r24
  aa:	30 e0       	ldi	r19, 0x00	; 0
  ac:	c9 01       	movw	r24, r18
  ae:	88 0f       	add	r24, r24
  b0:	99 1f       	adc	r25, r25
  b2:	28 0f       	add	r18, r24
  b4:	39 1f       	adc	r19, r25
  b6:	8b 81       	ldd	r24, Y+3	; 0x03
  b8:	9c 81       	ldd	r25, Y+4	; 0x04
  ba:	fc 01       	movw	r30, r24
  bc:	e2 0f       	add	r30, r18
  be:	f3 1f       	adc	r31, r19
  c0:	40 81       	ld	r20, Z
  c2:	89 81       	ldd	r24, Y+1	; 0x01
  c4:	28 2f       	mov	r18, r24
  c6:	30 e0       	ldi	r19, 0x00	; 0
  c8:	c9 01       	movw	r24, r18
  ca:	88 0f       	add	r24, r24
  cc:	99 1f       	adc	r25, r25
  ce:	28 0f       	add	r18, r24
  d0:	39 1f       	adc	r19, r25
  d2:	8b 81       	ldd	r24, Y+3	; 0x03
  d4:	9c 81       	ldd	r25, Y+4	; 0x04
  d6:	fc 01       	movw	r30, r24
  d8:	e2 0f       	add	r30, r18
  da:	f3 1f       	adc	r31, r19
  dc:	91 81       	ldd	r25, Z+1	; 0x01
  de:	84 2f       	mov	r24, r20
  e0:	69 2f       	mov	r22, r25
  e2:	40 e0       	ldi	r20, 0x00	; 0
  e4:	0e 94 76 02 	call	0x4ec	; 0x4ec <Setpin_Direction>
  e8:	8a 83       	std	Y+2, r24	; 0x02
  ea:	89 81       	ldd	r24, Y+1	; 0x01
  ec:	28 2f       	mov	r18, r24
  ee:	30 e0       	ldi	r19, 0x00	; 0
  f0:	c9 01       	movw	r24, r18
  f2:	88 0f       	add	r24, r24
  f4:	99 1f       	adc	r25, r25
  f6:	28 0f       	add	r18, r24
  f8:	39 1f       	adc	r19, r25
  fa:	8b 81       	ldd	r24, Y+3	; 0x03
  fc:	9c 81       	ldd	r25, Y+4	; 0x04
  fe:	fc 01       	movw	r30, r24
 100:	e2 0f       	add	r30, r18
 102:	f3 1f       	adc	r31, r19
 104:	50 81       	ld	r21, Z
 106:	89 81       	ldd	r24, Y+1	; 0x01
 108:	28 2f       	mov	r18, r24
 10a:	30 e0       	ldi	r19, 0x00	; 0
 10c:	c9 01       	movw	r24, r18
 10e:	88 0f       	add	r24, r24
 110:	99 1f       	adc	r25, r25
 112:	28 0f       	add	r18, r24
 114:	39 1f       	adc	r19, r25
 116:	8b 81       	ldd	r24, Y+3	; 0x03
 118:	9c 81       	ldd	r25, Y+4	; 0x04
 11a:	fc 01       	movw	r30, r24
 11c:	e2 0f       	add	r30, r18
 11e:	f3 1f       	adc	r31, r19
 120:	41 81       	ldd	r20, Z+1	; 0x01
 122:	89 81       	ldd	r24, Y+1	; 0x01
 124:	28 2f       	mov	r18, r24
 126:	30 e0       	ldi	r19, 0x00	; 0
 128:	c9 01       	movw	r24, r18
 12a:	88 0f       	add	r24, r24
 12c:	99 1f       	adc	r25, r25
 12e:	28 0f       	add	r18, r24
 130:	39 1f       	adc	r19, r25
 132:	8b 81       	ldd	r24, Y+3	; 0x03
 134:	9c 81       	ldd	r25, Y+4	; 0x04
 136:	fc 01       	movw	r30, r24
 138:	e2 0f       	add	r30, r18
 13a:	f3 1f       	adc	r31, r19
 13c:	92 81       	ldd	r25, Z+2	; 0x02
 13e:	85 2f       	mov	r24, r21
 140:	64 2f       	mov	r22, r20
 142:	49 2f       	mov	r20, r25
 144:	0e 94 65 03 	call	0x6ca	; 0x6ca <Setpin_value>
 148:	8a 83       	std	Y+2, r24	; 0x02
 14a:	89 81       	ldd	r24, Y+1	; 0x01
 14c:	8f 5f       	subi	r24, 0xFF	; 255
 14e:	89 83       	std	Y+1, r24	; 0x01
 150:	89 81       	ldd	r24, Y+1	; 0x01
 152:	83 30       	cpi	r24, 0x03	; 3
 154:	08 f4       	brcc	.+2      	; 0x158 <Switch_init+0xd6>
 156:	a7 cf       	rjmp	.-178    	; 0xa6 <Switch_init+0x24>
 158:	02 c0       	rjmp	.+4      	; 0x15e <Switch_init+0xdc>
 15a:	82 e0       	ldi	r24, 0x02	; 2
 15c:	8a 83       	std	Y+2, r24	; 0x02
 15e:	8a 81       	ldd	r24, Y+2	; 0x02
 160:	0f 90       	pop	r0
 162:	0f 90       	pop	r0
 164:	0f 90       	pop	r0
 166:	0f 90       	pop	r0
 168:	cf 91       	pop	r28
 16a:	df 91       	pop	r29
 16c:	08 95       	ret

0000016e <Switch_GetState>:


}

ES_t Switch_GetState(SW_T *copy_Astrct,u8 *copy_SWState)
{
 16e:	df 93       	push	r29
 170:	cf 93       	push	r28
 172:	00 d0       	rcall	.+0      	; 0x174 <Switch_GetState+0x6>
 174:	00 d0       	rcall	.+0      	; 0x176 <Switch_GetState+0x8>
 176:	0f 92       	push	r0
 178:	cd b7       	in	r28, 0x3d	; 61
 17a:	de b7       	in	r29, 0x3e	; 62
 17c:	9b 83       	std	Y+3, r25	; 0x03
 17e:	8a 83       	std	Y+2, r24	; 0x02
 180:	7d 83       	std	Y+5, r23	; 0x05
 182:	6c 83       	std	Y+4, r22	; 0x04
	ES_t local_enumError=DIO_NOK;
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	89 83       	std	Y+1, r24	; 0x01

	if(copy_Astrct!=NULL &&copy_SWState!=NULL )
 188:	8a 81       	ldd	r24, Y+2	; 0x02
 18a:	9b 81       	ldd	r25, Y+3	; 0x03
 18c:	00 97       	sbiw	r24, 0x00	; 0
 18e:	91 f0       	breq	.+36     	; 0x1b4 <Switch_GetState+0x46>
 190:	8c 81       	ldd	r24, Y+4	; 0x04
 192:	9d 81       	ldd	r25, Y+5	; 0x05
 194:	00 97       	sbiw	r24, 0x00	; 0
 196:	71 f0       	breq	.+28     	; 0x1b4 <Switch_GetState+0x46>
	{

		local_enumError=	GetPin(copy_Astrct->PORT_ID, copy_Astrct->PIN_ID,copy_SWState);
 198:	ea 81       	ldd	r30, Y+2	; 0x02
 19a:	fb 81       	ldd	r31, Y+3	; 0x03
 19c:	80 81       	ld	r24, Z
 19e:	ea 81       	ldd	r30, Y+2	; 0x02
 1a0:	fb 81       	ldd	r31, Y+3	; 0x03
 1a2:	91 81       	ldd	r25, Z+1	; 0x01
 1a4:	2c 81       	ldd	r18, Y+4	; 0x04
 1a6:	3d 81       	ldd	r19, Y+5	; 0x05
 1a8:	69 2f       	mov	r22, r25
 1aa:	a9 01       	movw	r20, r18
 1ac:	0e 94 e6 04 	call	0x9cc	; 0x9cc <GetPin>
 1b0:	89 83       	std	Y+1, r24	; 0x01
 1b2:	02 c0       	rjmp	.+4      	; 0x1b8 <Switch_GetState+0x4a>


	}
	else
	{
		local_enumError=DIO_NULLPOINTER;
 1b4:	82 e0       	ldi	r24, 0x02	; 2
 1b6:	89 83       	std	Y+1, r24	; 0x01

	}
return local_enumError;
 1b8:	89 81       	ldd	r24, Y+1	; 0x01
}
 1ba:	0f 90       	pop	r0
 1bc:	0f 90       	pop	r0
 1be:	0f 90       	pop	r0
 1c0:	0f 90       	pop	r0
 1c2:	0f 90       	pop	r0
 1c4:	cf 91       	pop	r28
 1c6:	df 91       	pop	r29
 1c8:	08 95       	ret

000001ca <main>:
#include "Switch_int.h"



int main(void)
{
 1ca:	df 93       	push	r29
 1cc:	cf 93       	push	r28
 1ce:	cd b7       	in	r28, 0x3d	; 61
 1d0:	de b7       	in	r29, 0x3e	; 62




    return 0;
 1d2:	80 e0       	ldi	r24, 0x00	; 0
 1d4:	90 e0       	ldi	r25, 0x00	; 0
}
 1d6:	cf 91       	pop	r28
 1d8:	df 91       	pop	r29
 1da:	08 95       	ret

000001dc <DIO_init>:
#include "ERROR.h"
#include "config.h"


ES_t DIO_init(void)
 {
 1dc:	df 93       	push	r29
 1de:	cf 93       	push	r28
 1e0:	0f 92       	push	r0
 1e2:	cd b7       	in	r28, 0x3d	; 61
 1e4:	de b7       	in	r29, 0x3e	; 62
	ES_t local_enumError=DIO_NOK;
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	89 83       	std	Y+1, r24	; 0x01
//for using conc i give ddra the DIRECTION of all pins=0b 11000101 TO DETMIN INPUT OUTPUT PINS
	    DDRA= CONC(PORTA_PIN7_DIR,PORTA_PIN6_DIR,PORTA_PIN5_DIR,PORTA_PIN4_DIR,PORTA_PIN3_DIR,PORTA_PIN2_DIR,PORTA_PIN1_DIR,PORTA_PIN0_DIR);
 1ea:	ea e3       	ldi	r30, 0x3A	; 58
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	8f ef       	ldi	r24, 0xFF	; 255
 1f0:	80 83       	st	Z, r24
	    DDRB= CONC(PORTB_PIN7_DIR,PORTB_PIN6_DIR,PORTB_PIN5_DIR,PORTB_PIN4_DIR,PORTB_PIN3_DIR,PORTB_PIN2_DIR,PORTB_PIN1_DIR,PORTB_PIN0_DIR);
 1f2:	e7 e3       	ldi	r30, 0x37	; 55
 1f4:	f0 e0       	ldi	r31, 0x00	; 0
 1f6:	8f ef       	ldi	r24, 0xFF	; 255
 1f8:	80 83       	st	Z, r24
	    DDRC= CONC(PORTC_PIN7_DIR,PORTC_PIN6_DIR,PORTC_PIN5_DIR,PORTC_PIN4_DIR,PORTC_PIN3_DIR,PORTC_PIN2_DIR,PORTC_PIN1_DIR,PORTC_PIN0_DIR);
 1fa:	e4 e3       	ldi	r30, 0x34	; 52
 1fc:	f0 e0       	ldi	r31, 0x00	; 0
 1fe:	10 82       	st	Z, r1
	    DDRD= CONC(PORTD_PIN7_DIR,PORTD_PIN6_DIR,PORTD_PIN5_DIR,PORTD_PIN4_DIR,PORTD_PIN3_DIR,PORTD_PIN2_DIR,PORTD_PIN1_DIR,PORTD_PIN0_DIR);
 200:	e1 e3       	ldi	r30, 0x31	; 49
 202:	f0 e0       	ldi	r31, 0x00	; 0
 204:	8f ef       	ldi	r24, 0xFF	; 255
 206:	80 83       	st	Z, r24

//GIVE INTIALIZE VALUES FOR ALL PORTS   HIGH LOW PULL_UP FLOAT
	    PORTA= CONC(PORTA_PIN7_VAL,PORTA_PIN6_VAL,PORTA_PIN5_VAL,PORTA_PIN4_VAL,PORTA_PIN3_VAL,PORTA_PIN2_VAL,PORTA_PIN1_VAL,PORTA_PIN0_VAL);
 208:	eb e3       	ldi	r30, 0x3B	; 59
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	10 82       	st	Z, r1
		PORTB= CONC(PORTB_PIN7_VAL,PORTB_PIN6_VAL,PORTB_PIN5_VAL,PORTB_PIN4_VAL,PORTB_PIN3_VAL,PORTB_PIN2_VAL,PORTB_PIN1_VAL,PORTB_PIN0_VAL);
 20e:	e8 e3       	ldi	r30, 0x38	; 56
 210:	f0 e0       	ldi	r31, 0x00	; 0
 212:	10 82       	st	Z, r1
		PORTC= CONC(PORTC_PIN7_VAL,PORTC_PIN6_VAL,PORTC_PIN5_VAL,PORTC_PIN4_VAL,PORTC_PIN3_VAL,PORTC_PIN2_VAL,PORTC_PIN1_VAL,PORTC_PIN0_VAL);
 214:	e5 e3       	ldi	r30, 0x35	; 53
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	87 ea       	ldi	r24, 0xA7	; 167
 21a:	80 83       	st	Z, r24
		PORTD= CONC(PORTD_PIN7_VAL,PORTD_PIN6_VAL,PORTD_PIN5_VAL,PORTD_PIN4_VAL,PORTD_PIN3_VAL,PORTD_PIN2_VAL,PORTD_PIN1_VAL,PORTD_PIN0_VAL);
 21c:	e2 e3       	ldi	r30, 0x32	; 50
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	83 ed       	ldi	r24, 0xD3	; 211
 222:	80 83       	st	Z, r24
		local_enumError=DIO_OK;
 224:	19 82       	std	Y+1, r1	; 0x01


	 return local_enumError;
 226:	89 81       	ldd	r24, Y+1	; 0x01

 }
 228:	0f 90       	pop	r0
 22a:	cf 91       	pop	r28
 22c:	df 91       	pop	r29
 22e:	08 95       	ret

00000230 <Setport_Direction>:

ES_t Setport_Direction(u8 copy_u8_PortId,u8 copy_u8_value)
{
 230:	df 93       	push	r29
 232:	cf 93       	push	r28
 234:	cd b7       	in	r28, 0x3d	; 61
 236:	de b7       	in	r29, 0x3e	; 62
 238:	27 97       	sbiw	r28, 0x07	; 7
 23a:	0f b6       	in	r0, 0x3f	; 63
 23c:	f8 94       	cli
 23e:	de bf       	out	0x3e, r29	; 62
 240:	0f be       	out	0x3f, r0	; 63
 242:	cd bf       	out	0x3d, r28	; 61
 244:	8c 83       	std	Y+4, r24	; 0x04
 246:	6d 83       	std	Y+5, r22	; 0x05
		ES_t local_enumError=DIO_NOK;
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	8b 83       	std	Y+3, r24	; 0x03

     if(copy_u8_PortId<=DIO_PORTD)
 24c:	8c 81       	ldd	r24, Y+4	; 0x04
 24e:	84 30       	cpi	r24, 0x04	; 4
 250:	a0 f5       	brcc	.+104    	; 0x2ba <Setport_Direction+0x8a>
     {
    	 switch(copy_u8_PortId)
 252:	8c 81       	ldd	r24, Y+4	; 0x04
 254:	28 2f       	mov	r18, r24
 256:	30 e0       	ldi	r19, 0x00	; 0
 258:	3f 83       	std	Y+7, r19	; 0x07
 25a:	2e 83       	std	Y+6, r18	; 0x06
 25c:	8e 81       	ldd	r24, Y+6	; 0x06
 25e:	9f 81       	ldd	r25, Y+7	; 0x07
 260:	81 30       	cpi	r24, 0x01	; 1
 262:	91 05       	cpc	r25, r1
 264:	d1 f0       	breq	.+52     	; 0x29a <Setport_Direction+0x6a>
 266:	2e 81       	ldd	r18, Y+6	; 0x06
 268:	3f 81       	ldd	r19, Y+7	; 0x07
 26a:	22 30       	cpi	r18, 0x02	; 2
 26c:	31 05       	cpc	r19, r1
 26e:	2c f4       	brge	.+10     	; 0x27a <Setport_Direction+0x4a>
 270:	8e 81       	ldd	r24, Y+6	; 0x06
 272:	9f 81       	ldd	r25, Y+7	; 0x07
 274:	00 97       	sbiw	r24, 0x00	; 0
 276:	61 f0       	breq	.+24     	; 0x290 <Setport_Direction+0x60>
 278:	1e c0       	rjmp	.+60     	; 0x2b6 <Setport_Direction+0x86>
 27a:	2e 81       	ldd	r18, Y+6	; 0x06
 27c:	3f 81       	ldd	r19, Y+7	; 0x07
 27e:	22 30       	cpi	r18, 0x02	; 2
 280:	31 05       	cpc	r19, r1
 282:	81 f0       	breq	.+32     	; 0x2a4 <Setport_Direction+0x74>
 284:	8e 81       	ldd	r24, Y+6	; 0x06
 286:	9f 81       	ldd	r25, Y+7	; 0x07
 288:	83 30       	cpi	r24, 0x03	; 3
 28a:	91 05       	cpc	r25, r1
 28c:	81 f0       	breq	.+32     	; 0x2ae <Setport_Direction+0x7e>
 28e:	13 c0       	rjmp	.+38     	; 0x2b6 <Setport_Direction+0x86>
    	 {
    	 case DIO_PORTA:
    		 DDRA=copy_u8_value;
 290:	ea e3       	ldi	r30, 0x3A	; 58
 292:	f0 e0       	ldi	r31, 0x00	; 0
 294:	8d 81       	ldd	r24, Y+5	; 0x05
 296:	80 83       	st	Z, r24
 298:	0e c0       	rjmp	.+28     	; 0x2b6 <Setport_Direction+0x86>
    		 break;
    	 case DIO_PORTB:
    		 DDRB=copy_u8_value;
 29a:	e7 e3       	ldi	r30, 0x37	; 55
 29c:	f0 e0       	ldi	r31, 0x00	; 0
 29e:	8d 81       	ldd	r24, Y+5	; 0x05
 2a0:	80 83       	st	Z, r24
 2a2:	09 c0       	rjmp	.+18     	; 0x2b6 <Setport_Direction+0x86>

    	    		 break;
    	 case DIO_PORTC:
    		 DDRC=copy_u8_value;
 2a4:	e4 e3       	ldi	r30, 0x34	; 52
 2a6:	f0 e0       	ldi	r31, 0x00	; 0
 2a8:	8d 81       	ldd	r24, Y+5	; 0x05
 2aa:	80 83       	st	Z, r24
 2ac:	04 c0       	rjmp	.+8      	; 0x2b6 <Setport_Direction+0x86>

    	    		 break;
    	 case DIO_PORTD:
    		 DDRD=copy_u8_value;
 2ae:	e1 e3       	ldi	r30, 0x31	; 49
 2b0:	f0 e0       	ldi	r31, 0x00	; 0
 2b2:	8d 81       	ldd	r24, Y+5	; 0x05
 2b4:	80 83       	st	Z, r24

    	    		 break;
    	 }

 		ES_t local_enumError=DIO_OK;
 2b6:	1a 82       	std	Y+2, r1	; 0x02
 2b8:	02 c0       	rjmp	.+4      	; 0x2be <Setport_Direction+0x8e>

     }

     else
     {
    		ES_t local_enumError=OUT_OF_RANGE;
 2ba:	83 e0       	ldi	r24, 0x03	; 3
 2bc:	89 83       	std	Y+1, r24	; 0x01
     }




		 return local_enumError;
 2be:	8b 81       	ldd	r24, Y+3	; 0x03

}
 2c0:	27 96       	adiw	r28, 0x07	; 7
 2c2:	0f b6       	in	r0, 0x3f	; 63
 2c4:	f8 94       	cli
 2c6:	de bf       	out	0x3e, r29	; 62
 2c8:	0f be       	out	0x3f, r0	; 63
 2ca:	cd bf       	out	0x3d, r28	; 61
 2cc:	cf 91       	pop	r28
 2ce:	df 91       	pop	r29
 2d0:	08 95       	ret

000002d2 <Setport_value>:
ES_t Setport_value(u8 copy_u8_PortId,u8 copy_u8_value)
{
 2d2:	df 93       	push	r29
 2d4:	cf 93       	push	r28
 2d6:	cd b7       	in	r28, 0x3d	; 61
 2d8:	de b7       	in	r29, 0x3e	; 62
 2da:	27 97       	sbiw	r28, 0x07	; 7
 2dc:	0f b6       	in	r0, 0x3f	; 63
 2de:	f8 94       	cli
 2e0:	de bf       	out	0x3e, r29	; 62
 2e2:	0f be       	out	0x3f, r0	; 63
 2e4:	cd bf       	out	0x3d, r28	; 61
 2e6:	8c 83       	std	Y+4, r24	; 0x04
 2e8:	6d 83       	std	Y+5, r22	; 0x05

			ES_t local_enumError=DIO_NOK;
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	8b 83       	std	Y+3, r24	; 0x03

	     if(copy_u8_PortId<=DIO_PORTD)
 2ee:	8c 81       	ldd	r24, Y+4	; 0x04
 2f0:	84 30       	cpi	r24, 0x04	; 4
 2f2:	a0 f5       	brcc	.+104    	; 0x35c <Setport_value+0x8a>
	     {
	    	 switch(copy_u8_PortId)
 2f4:	8c 81       	ldd	r24, Y+4	; 0x04
 2f6:	28 2f       	mov	r18, r24
 2f8:	30 e0       	ldi	r19, 0x00	; 0
 2fa:	3f 83       	std	Y+7, r19	; 0x07
 2fc:	2e 83       	std	Y+6, r18	; 0x06
 2fe:	8e 81       	ldd	r24, Y+6	; 0x06
 300:	9f 81       	ldd	r25, Y+7	; 0x07
 302:	81 30       	cpi	r24, 0x01	; 1
 304:	91 05       	cpc	r25, r1
 306:	d1 f0       	breq	.+52     	; 0x33c <Setport_value+0x6a>
 308:	2e 81       	ldd	r18, Y+6	; 0x06
 30a:	3f 81       	ldd	r19, Y+7	; 0x07
 30c:	22 30       	cpi	r18, 0x02	; 2
 30e:	31 05       	cpc	r19, r1
 310:	2c f4       	brge	.+10     	; 0x31c <Setport_value+0x4a>
 312:	8e 81       	ldd	r24, Y+6	; 0x06
 314:	9f 81       	ldd	r25, Y+7	; 0x07
 316:	00 97       	sbiw	r24, 0x00	; 0
 318:	61 f0       	breq	.+24     	; 0x332 <Setport_value+0x60>
 31a:	1e c0       	rjmp	.+60     	; 0x358 <Setport_value+0x86>
 31c:	2e 81       	ldd	r18, Y+6	; 0x06
 31e:	3f 81       	ldd	r19, Y+7	; 0x07
 320:	22 30       	cpi	r18, 0x02	; 2
 322:	31 05       	cpc	r19, r1
 324:	81 f0       	breq	.+32     	; 0x346 <Setport_value+0x74>
 326:	8e 81       	ldd	r24, Y+6	; 0x06
 328:	9f 81       	ldd	r25, Y+7	; 0x07
 32a:	83 30       	cpi	r24, 0x03	; 3
 32c:	91 05       	cpc	r25, r1
 32e:	81 f0       	breq	.+32     	; 0x350 <Setport_value+0x7e>
 330:	13 c0       	rjmp	.+38     	; 0x358 <Setport_value+0x86>
	    	 {
	    	 case DIO_PORTA:
	    		 PORTA=copy_u8_value;
 332:	eb e3       	ldi	r30, 0x3B	; 59
 334:	f0 e0       	ldi	r31, 0x00	; 0
 336:	8d 81       	ldd	r24, Y+5	; 0x05
 338:	80 83       	st	Z, r24
 33a:	0e c0       	rjmp	.+28     	; 0x358 <Setport_value+0x86>
	    		 break;
	    	 case DIO_PORTB:
	    		 PORTB=copy_u8_value;
 33c:	e8 e3       	ldi	r30, 0x38	; 56
 33e:	f0 e0       	ldi	r31, 0x00	; 0
 340:	8d 81       	ldd	r24, Y+5	; 0x05
 342:	80 83       	st	Z, r24
 344:	09 c0       	rjmp	.+18     	; 0x358 <Setport_value+0x86>

	    	    		 break;
	    	 case DIO_PORTC:
	    		 PORTC=copy_u8_value;
 346:	e5 e3       	ldi	r30, 0x35	; 53
 348:	f0 e0       	ldi	r31, 0x00	; 0
 34a:	8d 81       	ldd	r24, Y+5	; 0x05
 34c:	80 83       	st	Z, r24
 34e:	04 c0       	rjmp	.+8      	; 0x358 <Setport_value+0x86>

	    	    		 break;
	    	 case DIO_PORTD:
	    		PORTD=copy_u8_value;
 350:	e2 e3       	ldi	r30, 0x32	; 50
 352:	f0 e0       	ldi	r31, 0x00	; 0
 354:	8d 81       	ldd	r24, Y+5	; 0x05
 356:	80 83       	st	Z, r24

	    	    		 break;
	    	 }

	 		ES_t local_enumError=DIO_OK;
 358:	1a 82       	std	Y+2, r1	; 0x02
 35a:	02 c0       	rjmp	.+4      	; 0x360 <Setport_value+0x8e>

	     }

	     else
	     {
	    		ES_t local_enumError=OUT_OF_RANGE;
 35c:	83 e0       	ldi	r24, 0x03	; 3
 35e:	89 83       	std	Y+1, r24	; 0x01
	     }




			 return local_enumError;
 360:	8b 81       	ldd	r24, Y+3	; 0x03


}
 362:	27 96       	adiw	r28, 0x07	; 7
 364:	0f b6       	in	r0, 0x3f	; 63
 366:	f8 94       	cli
 368:	de bf       	out	0x3e, r29	; 62
 36a:	0f be       	out	0x3f, r0	; 63
 36c:	cd bf       	out	0x3d, r28	; 61
 36e:	cf 91       	pop	r28
 370:	df 91       	pop	r29
 372:	08 95       	ret

00000374 <TogglePort>:
        ES_t TogglePort(u8 copy_u8_PortId)

		{
 374:	df 93       	push	r29
 376:	cf 93       	push	r28
 378:	00 d0       	rcall	.+0      	; 0x37a <TogglePort+0x6>
 37a:	00 d0       	rcall	.+0      	; 0x37c <TogglePort+0x8>
 37c:	00 d0       	rcall	.+0      	; 0x37e <TogglePort+0xa>
 37e:	cd b7       	in	r28, 0x3d	; 61
 380:	de b7       	in	r29, 0x3e	; 62
 382:	8c 83       	std	Y+4, r24	; 0x04
					ES_t local_enumError=DIO_NOK;
 384:	81 e0       	ldi	r24, 0x01	; 1
 386:	8b 83       	std	Y+3, r24	; 0x03

			     if(copy_u8_PortId<=DIO_PORTD)
 388:	8c 81       	ldd	r24, Y+4	; 0x04
 38a:	84 30       	cpi	r24, 0x04	; 4
 38c:	08 f0       	brcs	.+2      	; 0x390 <TogglePort+0x1c>
 38e:	40 c0       	rjmp	.+128    	; 0x410 <TogglePort+0x9c>
			     {
			    	 switch(copy_u8_PortId)
 390:	8c 81       	ldd	r24, Y+4	; 0x04
 392:	28 2f       	mov	r18, r24
 394:	30 e0       	ldi	r19, 0x00	; 0
 396:	3e 83       	std	Y+6, r19	; 0x06
 398:	2d 83       	std	Y+5, r18	; 0x05
 39a:	8d 81       	ldd	r24, Y+5	; 0x05
 39c:	9e 81       	ldd	r25, Y+6	; 0x06
 39e:	81 30       	cpi	r24, 0x01	; 1
 3a0:	91 05       	cpc	r25, r1
 3a2:	e9 f0       	breq	.+58     	; 0x3de <TogglePort+0x6a>
 3a4:	2d 81       	ldd	r18, Y+5	; 0x05
 3a6:	3e 81       	ldd	r19, Y+6	; 0x06
 3a8:	22 30       	cpi	r18, 0x02	; 2
 3aa:	31 05       	cpc	r19, r1
 3ac:	2c f4       	brge	.+10     	; 0x3b8 <TogglePort+0x44>
 3ae:	8d 81       	ldd	r24, Y+5	; 0x05
 3b0:	9e 81       	ldd	r25, Y+6	; 0x06
 3b2:	00 97       	sbiw	r24, 0x00	; 0
 3b4:	61 f0       	breq	.+24     	; 0x3ce <TogglePort+0x5a>
 3b6:	2a c0       	rjmp	.+84     	; 0x40c <TogglePort+0x98>
 3b8:	2d 81       	ldd	r18, Y+5	; 0x05
 3ba:	3e 81       	ldd	r19, Y+6	; 0x06
 3bc:	22 30       	cpi	r18, 0x02	; 2
 3be:	31 05       	cpc	r19, r1
 3c0:	b1 f0       	breq	.+44     	; 0x3ee <TogglePort+0x7a>
 3c2:	8d 81       	ldd	r24, Y+5	; 0x05
 3c4:	9e 81       	ldd	r25, Y+6	; 0x06
 3c6:	83 30       	cpi	r24, 0x03	; 3
 3c8:	91 05       	cpc	r25, r1
 3ca:	c9 f0       	breq	.+50     	; 0x3fe <TogglePort+0x8a>
 3cc:	1f c0       	rjmp	.+62     	; 0x40c <TogglePort+0x98>
			    	 {
			    	 case DIO_PORTA:
			    		 PORTA=~PORTA;
 3ce:	ab e3       	ldi	r26, 0x3B	; 59
 3d0:	b0 e0       	ldi	r27, 0x00	; 0
 3d2:	eb e3       	ldi	r30, 0x3B	; 59
 3d4:	f0 e0       	ldi	r31, 0x00	; 0
 3d6:	80 81       	ld	r24, Z
 3d8:	80 95       	com	r24
 3da:	8c 93       	st	X, r24
 3dc:	17 c0       	rjmp	.+46     	; 0x40c <TogglePort+0x98>
			    		 break;

			    	 case DIO_PORTB:
			    		 PORTB=~PORTB;
 3de:	a8 e3       	ldi	r26, 0x38	; 56
 3e0:	b0 e0       	ldi	r27, 0x00	; 0
 3e2:	e8 e3       	ldi	r30, 0x38	; 56
 3e4:	f0 e0       	ldi	r31, 0x00	; 0
 3e6:	80 81       	ld	r24, Z
 3e8:	80 95       	com	r24
 3ea:	8c 93       	st	X, r24
 3ec:	0f c0       	rjmp	.+30     	; 0x40c <TogglePort+0x98>

			    	    		 break;
			    	 case DIO_PORTC:
			    		 PORTC=~PORTC;
 3ee:	a5 e3       	ldi	r26, 0x35	; 53
 3f0:	b0 e0       	ldi	r27, 0x00	; 0
 3f2:	e5 e3       	ldi	r30, 0x35	; 53
 3f4:	f0 e0       	ldi	r31, 0x00	; 0
 3f6:	80 81       	ld	r24, Z
 3f8:	80 95       	com	r24
 3fa:	8c 93       	st	X, r24
 3fc:	07 c0       	rjmp	.+14     	; 0x40c <TogglePort+0x98>

			    	    		 break;
			    	 case DIO_PORTD:
			    		PORTD=~PORTD;
 3fe:	a2 e3       	ldi	r26, 0x32	; 50
 400:	b0 e0       	ldi	r27, 0x00	; 0
 402:	e2 e3       	ldi	r30, 0x32	; 50
 404:	f0 e0       	ldi	r31, 0x00	; 0
 406:	80 81       	ld	r24, Z
 408:	80 95       	com	r24
 40a:	8c 93       	st	X, r24

			    	    		 break;
			    	 }

			 		ES_t local_enumError=DIO_OK;
 40c:	1a 82       	std	Y+2, r1	; 0x02
 40e:	02 c0       	rjmp	.+4      	; 0x414 <TogglePort+0xa0>

			     }

			     else
			     {
			    		ES_t local_enumError=OUT_OF_RANGE;
 410:	83 e0       	ldi	r24, 0x03	; 3
 412:	89 83       	std	Y+1, r24	; 0x01

			     }
			 return local_enumError;
 414:	8b 81       	ldd	r24, Y+3	; 0x03

	}
 416:	26 96       	adiw	r28, 0x06	; 6
 418:	0f b6       	in	r0, 0x3f	; 63
 41a:	f8 94       	cli
 41c:	de bf       	out	0x3e, r29	; 62
 41e:	0f be       	out	0x3f, r0	; 63
 420:	cd bf       	out	0x3d, r28	; 61
 422:	cf 91       	pop	r28
 424:	df 91       	pop	r29
 426:	08 95       	ret

00000428 <GetPort>:

	ES_t GetPort(u8 copy_u8_PortId,u8 *copy_pu8_value)
{
 428:	df 93       	push	r29
 42a:	cf 93       	push	r28
 42c:	cd b7       	in	r28, 0x3d	; 61
 42e:	de b7       	in	r29, 0x3e	; 62
 430:	29 97       	sbiw	r28, 0x09	; 9
 432:	0f b6       	in	r0, 0x3f	; 63
 434:	f8 94       	cli
 436:	de bf       	out	0x3e, r29	; 62
 438:	0f be       	out	0x3f, r0	; 63
 43a:	cd bf       	out	0x3d, r28	; 61
 43c:	8d 83       	std	Y+5, r24	; 0x05
 43e:	7f 83       	std	Y+7, r23	; 0x07
 440:	6e 83       	std	Y+6, r22	; 0x06
		ES_t local_enumError=DIO_NOK;
 442:	81 e0       	ldi	r24, 0x01	; 1
 444:	8c 83       	std	Y+4, r24	; 0x04
if(copy_pu8_value!=NULL)
 446:	8e 81       	ldd	r24, Y+6	; 0x06
 448:	9f 81       	ldd	r25, Y+7	; 0x07
 44a:	00 97       	sbiw	r24, 0x00	; 0
 44c:	09 f4       	brne	.+2      	; 0x450 <GetPort+0x28>
 44e:	42 c0       	rjmp	.+132    	; 0x4d4 <GetPort+0xac>
{
	   if(copy_u8_PortId<=DIO_PORTD)
 450:	8d 81       	ldd	r24, Y+5	; 0x05
 452:	84 30       	cpi	r24, 0x04	; 4
 454:	e0 f5       	brcc	.+120    	; 0x4ce <GetPort+0xa6>
	   {
		   switch(copy_u8_PortId)
 456:	8d 81       	ldd	r24, Y+5	; 0x05
 458:	28 2f       	mov	r18, r24
 45a:	30 e0       	ldi	r19, 0x00	; 0
 45c:	39 87       	std	Y+9, r19	; 0x09
 45e:	28 87       	std	Y+8, r18	; 0x08
 460:	88 85       	ldd	r24, Y+8	; 0x08
 462:	99 85       	ldd	r25, Y+9	; 0x09
 464:	81 30       	cpi	r24, 0x01	; 1
 466:	91 05       	cpc	r25, r1
 468:	e1 f0       	breq	.+56     	; 0x4a2 <GetPort+0x7a>
 46a:	28 85       	ldd	r18, Y+8	; 0x08
 46c:	39 85       	ldd	r19, Y+9	; 0x09
 46e:	22 30       	cpi	r18, 0x02	; 2
 470:	31 05       	cpc	r19, r1
 472:	2c f4       	brge	.+10     	; 0x47e <GetPort+0x56>
 474:	88 85       	ldd	r24, Y+8	; 0x08
 476:	99 85       	ldd	r25, Y+9	; 0x09
 478:	00 97       	sbiw	r24, 0x00	; 0
 47a:	61 f0       	breq	.+24     	; 0x494 <GetPort+0x6c>
 47c:	26 c0       	rjmp	.+76     	; 0x4ca <GetPort+0xa2>
 47e:	28 85       	ldd	r18, Y+8	; 0x08
 480:	39 85       	ldd	r19, Y+9	; 0x09
 482:	22 30       	cpi	r18, 0x02	; 2
 484:	31 05       	cpc	r19, r1
 486:	a1 f0       	breq	.+40     	; 0x4b0 <GetPort+0x88>
 488:	88 85       	ldd	r24, Y+8	; 0x08
 48a:	99 85       	ldd	r25, Y+9	; 0x09
 48c:	83 30       	cpi	r24, 0x03	; 3
 48e:	91 05       	cpc	r25, r1
 490:	b1 f0       	breq	.+44     	; 0x4be <GetPort+0x96>
 492:	1b c0       	rjmp	.+54     	; 0x4ca <GetPort+0xa2>
		   {
		   case DIO_PORTA:
			   *copy_pu8_value=PINA;
 494:	e9 e3       	ldi	r30, 0x39	; 57
 496:	f0 e0       	ldi	r31, 0x00	; 0
 498:	80 81       	ld	r24, Z
 49a:	ee 81       	ldd	r30, Y+6	; 0x06
 49c:	ff 81       	ldd	r31, Y+7	; 0x07
 49e:	80 83       	st	Z, r24
 4a0:	14 c0       	rjmp	.+40     	; 0x4ca <GetPort+0xa2>
			   break;

		       case DIO_PORTB:
		  			   *copy_pu8_value=PINB;
 4a2:	e6 e3       	ldi	r30, 0x36	; 54
 4a4:	f0 e0       	ldi	r31, 0x00	; 0
 4a6:	80 81       	ld	r24, Z
 4a8:	ee 81       	ldd	r30, Y+6	; 0x06
 4aa:	ff 81       	ldd	r31, Y+7	; 0x07
 4ac:	80 83       	st	Z, r24
 4ae:	0d c0       	rjmp	.+26     	; 0x4ca <GetPort+0xa2>
		  			  break;

		  			   case DIO_PORTC:
		  				   *copy_pu8_value=PINC;
 4b0:	e3 e3       	ldi	r30, 0x33	; 51
 4b2:	f0 e0       	ldi	r31, 0x00	; 0
 4b4:	80 81       	ld	r24, Z
 4b6:	ee 81       	ldd	r30, Y+6	; 0x06
 4b8:	ff 81       	ldd	r31, Y+7	; 0x07
 4ba:	80 83       	st	Z, r24
 4bc:	06 c0       	rjmp	.+12     	; 0x4ca <GetPort+0xa2>
		  				   break;

		  				   case DIO_PORTD:
		  					   *copy_pu8_value=PIND;
 4be:	e0 e3       	ldi	r30, 0x30	; 48
 4c0:	f0 e0       	ldi	r31, 0x00	; 0
 4c2:	80 81       	ld	r24, Z
 4c4:	ee 81       	ldd	r30, Y+6	; 0x06
 4c6:	ff 81       	ldd	r31, Y+7	; 0x07
 4c8:	80 83       	st	Z, r24
		  					   break;

		   }

			ES_t local_enumError=DIO_OK;
 4ca:	1b 82       	std	Y+3, r1	; 0x03
 4cc:	05 c0       	rjmp	.+10     	; 0x4d8 <GetPort+0xb0>

	   }
	   else
	   {
			ES_t local_enumError=OUT_OF_RANGE;
 4ce:	83 e0       	ldi	r24, 0x03	; 3
 4d0:	8a 83       	std	Y+2, r24	; 0x02
 4d2:	02 c0       	rjmp	.+4      	; 0x4d8 <GetPort+0xb0>
	   }

}
else
{
	ES_t local_enumError=DIO_NULLPOINTER;
 4d4:	82 e0       	ldi	r24, 0x02	; 2
 4d6:	89 83       	std	Y+1, r24	; 0x01
}

			 return local_enumError;
 4d8:	8c 81       	ldd	r24, Y+4	; 0x04

}
 4da:	29 96       	adiw	r28, 0x09	; 9
 4dc:	0f b6       	in	r0, 0x3f	; 63
 4de:	f8 94       	cli
 4e0:	de bf       	out	0x3e, r29	; 62
 4e2:	0f be       	out	0x3f, r0	; 63
 4e4:	cd bf       	out	0x3d, r28	; 61
 4e6:	cf 91       	pop	r28
 4e8:	df 91       	pop	r29
 4ea:	08 95       	ret

000004ec <Setpin_Direction>:

	ES_t Setpin_Direction(u8 copy_u8_PortId,u8 copy_u8_PIN_Id,u8 copy_u8_value)
{
 4ec:	df 93       	push	r29
 4ee:	cf 93       	push	r28
 4f0:	cd b7       	in	r28, 0x3d	; 61
 4f2:	de b7       	in	r29, 0x3e	; 62
 4f4:	28 97       	sbiw	r28, 0x08	; 8
 4f6:	0f b6       	in	r0, 0x3f	; 63
 4f8:	f8 94       	cli
 4fa:	de bf       	out	0x3e, r29	; 62
 4fc:	0f be       	out	0x3f, r0	; 63
 4fe:	cd bf       	out	0x3d, r28	; 61
 500:	8c 83       	std	Y+4, r24	; 0x04
 502:	6d 83       	std	Y+5, r22	; 0x05
 504:	4e 83       	std	Y+6, r20	; 0x06
		ES_t local_enumError=DIO_NOK;
 506:	81 e0       	ldi	r24, 0x01	; 1
 508:	8b 83       	std	Y+3, r24	; 0x03
		if(copy_u8_PortId<=DIO_PORTD &&copy_u8_PIN_Id<=DIO_PIN7&&copy_u8_value<=OUTPUT)
 50a:	8c 81       	ldd	r24, Y+4	; 0x04
 50c:	84 30       	cpi	r24, 0x04	; 4
 50e:	08 f0       	brcs	.+2      	; 0x512 <Setpin_Direction+0x26>
 510:	d0 c0       	rjmp	.+416    	; 0x6b2 <Setpin_Direction+0x1c6>
 512:	8d 81       	ldd	r24, Y+5	; 0x05
 514:	88 30       	cpi	r24, 0x08	; 8
 516:	08 f0       	brcs	.+2      	; 0x51a <Setpin_Direction+0x2e>
 518:	cc c0       	rjmp	.+408    	; 0x6b2 <Setpin_Direction+0x1c6>
 51a:	8e 81       	ldd	r24, Y+6	; 0x06
 51c:	82 30       	cpi	r24, 0x02	; 2
 51e:	08 f0       	brcs	.+2      	; 0x522 <Setpin_Direction+0x36>
 520:	c8 c0       	rjmp	.+400    	; 0x6b2 <Setpin_Direction+0x1c6>
		{
			switch(copy_u8_PortId)
 522:	8c 81       	ldd	r24, Y+4	; 0x04
 524:	28 2f       	mov	r18, r24
 526:	30 e0       	ldi	r19, 0x00	; 0
 528:	38 87       	std	Y+8, r19	; 0x08
 52a:	2f 83       	std	Y+7, r18	; 0x07
 52c:	6f 81       	ldd	r22, Y+7	; 0x07
 52e:	78 85       	ldd	r23, Y+8	; 0x08
 530:	61 30       	cpi	r22, 0x01	; 1
 532:	71 05       	cpc	r23, r1
 534:	09 f4       	brne	.+2      	; 0x538 <Setpin_Direction+0x4c>
 536:	41 c0       	rjmp	.+130    	; 0x5ba <Setpin_Direction+0xce>
 538:	8f 81       	ldd	r24, Y+7	; 0x07
 53a:	98 85       	ldd	r25, Y+8	; 0x08
 53c:	82 30       	cpi	r24, 0x02	; 2
 53e:	91 05       	cpc	r25, r1
 540:	34 f4       	brge	.+12     	; 0x54e <Setpin_Direction+0x62>
 542:	2f 81       	ldd	r18, Y+7	; 0x07
 544:	38 85       	ldd	r19, Y+8	; 0x08
 546:	21 15       	cp	r18, r1
 548:	31 05       	cpc	r19, r1
 54a:	71 f0       	breq	.+28     	; 0x568 <Setpin_Direction+0x7c>
 54c:	b0 c0       	rjmp	.+352    	; 0x6ae <Setpin_Direction+0x1c2>
 54e:	6f 81       	ldd	r22, Y+7	; 0x07
 550:	78 85       	ldd	r23, Y+8	; 0x08
 552:	62 30       	cpi	r22, 0x02	; 2
 554:	71 05       	cpc	r23, r1
 556:	09 f4       	brne	.+2      	; 0x55a <Setpin_Direction+0x6e>
 558:	59 c0       	rjmp	.+178    	; 0x60c <Setpin_Direction+0x120>
 55a:	8f 81       	ldd	r24, Y+7	; 0x07
 55c:	98 85       	ldd	r25, Y+8	; 0x08
 55e:	83 30       	cpi	r24, 0x03	; 3
 560:	91 05       	cpc	r25, r1
 562:	09 f4       	brne	.+2      	; 0x566 <Setpin_Direction+0x7a>
 564:	7c c0       	rjmp	.+248    	; 0x65e <Setpin_Direction+0x172>
 566:	a3 c0       	rjmp	.+326    	; 0x6ae <Setpin_Direction+0x1c2>
					   {
		 case DIO_PORTA:
			 DDRA &=~(1<<copy_u8_PIN_Id);
 568:	aa e3       	ldi	r26, 0x3A	; 58
 56a:	b0 e0       	ldi	r27, 0x00	; 0
 56c:	ea e3       	ldi	r30, 0x3A	; 58
 56e:	f0 e0       	ldi	r31, 0x00	; 0
 570:	80 81       	ld	r24, Z
 572:	48 2f       	mov	r20, r24
 574:	8d 81       	ldd	r24, Y+5	; 0x05
 576:	28 2f       	mov	r18, r24
 578:	30 e0       	ldi	r19, 0x00	; 0
 57a:	81 e0       	ldi	r24, 0x01	; 1
 57c:	90 e0       	ldi	r25, 0x00	; 0
 57e:	02 c0       	rjmp	.+4      	; 0x584 <Setpin_Direction+0x98>
 580:	88 0f       	add	r24, r24
 582:	99 1f       	adc	r25, r25
 584:	2a 95       	dec	r18
 586:	e2 f7       	brpl	.-8      	; 0x580 <Setpin_Direction+0x94>
 588:	80 95       	com	r24
 58a:	84 23       	and	r24, r20
 58c:	8c 93       	st	X, r24
			 DDRA |=(copy_u8_value<<copy_u8_PIN_Id);
 58e:	aa e3       	ldi	r26, 0x3A	; 58
 590:	b0 e0       	ldi	r27, 0x00	; 0
 592:	ea e3       	ldi	r30, 0x3A	; 58
 594:	f0 e0       	ldi	r31, 0x00	; 0
 596:	80 81       	ld	r24, Z
 598:	48 2f       	mov	r20, r24
 59a:	8e 81       	ldd	r24, Y+6	; 0x06
 59c:	28 2f       	mov	r18, r24
 59e:	30 e0       	ldi	r19, 0x00	; 0
 5a0:	8d 81       	ldd	r24, Y+5	; 0x05
 5a2:	88 2f       	mov	r24, r24
 5a4:	90 e0       	ldi	r25, 0x00	; 0
 5a6:	b9 01       	movw	r22, r18
 5a8:	02 c0       	rjmp	.+4      	; 0x5ae <Setpin_Direction+0xc2>
 5aa:	66 0f       	add	r22, r22
 5ac:	77 1f       	adc	r23, r23
 5ae:	8a 95       	dec	r24
 5b0:	e2 f7       	brpl	.-8      	; 0x5aa <Setpin_Direction+0xbe>
 5b2:	cb 01       	movw	r24, r22
 5b4:	84 2b       	or	r24, r20
 5b6:	8c 93       	st	X, r24
 5b8:	7a c0       	rjmp	.+244    	; 0x6ae <Setpin_Direction+0x1c2>
	 	                break;
	     case DIO_PORTB:
	    	  DDRB &=~(1<<copy_u8_PIN_Id);                         //CLEAR THE BIT YOU WANT TO SET FIRIST(MASK)
 5ba:	a7 e3       	ldi	r26, 0x37	; 55
 5bc:	b0 e0       	ldi	r27, 0x00	; 0
 5be:	e7 e3       	ldi	r30, 0x37	; 55
 5c0:	f0 e0       	ldi	r31, 0x00	; 0
 5c2:	80 81       	ld	r24, Z
 5c4:	48 2f       	mov	r20, r24
 5c6:	8d 81       	ldd	r24, Y+5	; 0x05
 5c8:	28 2f       	mov	r18, r24
 5ca:	30 e0       	ldi	r19, 0x00	; 0
 5cc:	81 e0       	ldi	r24, 0x01	; 1
 5ce:	90 e0       	ldi	r25, 0x00	; 0
 5d0:	02 c0       	rjmp	.+4      	; 0x5d6 <Setpin_Direction+0xea>
 5d2:	88 0f       	add	r24, r24
 5d4:	99 1f       	adc	r25, r25
 5d6:	2a 95       	dec	r18
 5d8:	e2 f7       	brpl	.-8      	; 0x5d2 <Setpin_Direction+0xe6>
 5da:	80 95       	com	r24
 5dc:	84 23       	and	r24, r20
 5de:	8c 93       	st	X, r24
	    				 DDRB |=(copy_u8_value<<copy_u8_PIN_Id);  //SET THE VALUE YOU WANT IN THE DIRECTON TO DETMINE THE BIT INPUT OR OUTPUT
 5e0:	a7 e3       	ldi	r26, 0x37	; 55
 5e2:	b0 e0       	ldi	r27, 0x00	; 0
 5e4:	e7 e3       	ldi	r30, 0x37	; 55
 5e6:	f0 e0       	ldi	r31, 0x00	; 0
 5e8:	80 81       	ld	r24, Z
 5ea:	48 2f       	mov	r20, r24
 5ec:	8e 81       	ldd	r24, Y+6	; 0x06
 5ee:	28 2f       	mov	r18, r24
 5f0:	30 e0       	ldi	r19, 0x00	; 0
 5f2:	8d 81       	ldd	r24, Y+5	; 0x05
 5f4:	88 2f       	mov	r24, r24
 5f6:	90 e0       	ldi	r25, 0x00	; 0
 5f8:	b9 01       	movw	r22, r18
 5fa:	02 c0       	rjmp	.+4      	; 0x600 <Setpin_Direction+0x114>
 5fc:	66 0f       	add	r22, r22
 5fe:	77 1f       	adc	r23, r23
 600:	8a 95       	dec	r24
 602:	e2 f7       	brpl	.-8      	; 0x5fc <Setpin_Direction+0x110>
 604:	cb 01       	movw	r24, r22
 606:	84 2b       	or	r24, r20
 608:	8c 93       	st	X, r24
 60a:	51 c0       	rjmp	.+162    	; 0x6ae <Setpin_Direction+0x1c2>
	  	            break;
	     case DIO_PORTC:
	    	 DDRC &=~(1<<copy_u8_PIN_Id);
 60c:	a4 e3       	ldi	r26, 0x34	; 52
 60e:	b0 e0       	ldi	r27, 0x00	; 0
 610:	e4 e3       	ldi	r30, 0x34	; 52
 612:	f0 e0       	ldi	r31, 0x00	; 0
 614:	80 81       	ld	r24, Z
 616:	48 2f       	mov	r20, r24
 618:	8d 81       	ldd	r24, Y+5	; 0x05
 61a:	28 2f       	mov	r18, r24
 61c:	30 e0       	ldi	r19, 0x00	; 0
 61e:	81 e0       	ldi	r24, 0x01	; 1
 620:	90 e0       	ldi	r25, 0x00	; 0
 622:	02 c0       	rjmp	.+4      	; 0x628 <Setpin_Direction+0x13c>
 624:	88 0f       	add	r24, r24
 626:	99 1f       	adc	r25, r25
 628:	2a 95       	dec	r18
 62a:	e2 f7       	brpl	.-8      	; 0x624 <Setpin_Direction+0x138>
 62c:	80 95       	com	r24
 62e:	84 23       	and	r24, r20
 630:	8c 93       	st	X, r24
	    				 DDRC |=(copy_u8_value<<copy_u8_PIN_Id);
 632:	a4 e3       	ldi	r26, 0x34	; 52
 634:	b0 e0       	ldi	r27, 0x00	; 0
 636:	e4 e3       	ldi	r30, 0x34	; 52
 638:	f0 e0       	ldi	r31, 0x00	; 0
 63a:	80 81       	ld	r24, Z
 63c:	48 2f       	mov	r20, r24
 63e:	8e 81       	ldd	r24, Y+6	; 0x06
 640:	28 2f       	mov	r18, r24
 642:	30 e0       	ldi	r19, 0x00	; 0
 644:	8d 81       	ldd	r24, Y+5	; 0x05
 646:	88 2f       	mov	r24, r24
 648:	90 e0       	ldi	r25, 0x00	; 0
 64a:	b9 01       	movw	r22, r18
 64c:	02 c0       	rjmp	.+4      	; 0x652 <Setpin_Direction+0x166>
 64e:	66 0f       	add	r22, r22
 650:	77 1f       	adc	r23, r23
 652:	8a 95       	dec	r24
 654:	e2 f7       	brpl	.-8      	; 0x64e <Setpin_Direction+0x162>
 656:	cb 01       	movw	r24, r22
 658:	84 2b       	or	r24, r20
 65a:	8c 93       	st	X, r24
 65c:	28 c0       	rjmp	.+80     	; 0x6ae <Setpin_Direction+0x1c2>
	 	 			   break;

	    case DIO_PORTD:
	    	 DDRD &=~(1<<copy_u8_PIN_Id);
 65e:	a1 e3       	ldi	r26, 0x31	; 49
 660:	b0 e0       	ldi	r27, 0x00	; 0
 662:	e1 e3       	ldi	r30, 0x31	; 49
 664:	f0 e0       	ldi	r31, 0x00	; 0
 666:	80 81       	ld	r24, Z
 668:	48 2f       	mov	r20, r24
 66a:	8d 81       	ldd	r24, Y+5	; 0x05
 66c:	28 2f       	mov	r18, r24
 66e:	30 e0       	ldi	r19, 0x00	; 0
 670:	81 e0       	ldi	r24, 0x01	; 1
 672:	90 e0       	ldi	r25, 0x00	; 0
 674:	02 c0       	rjmp	.+4      	; 0x67a <Setpin_Direction+0x18e>
 676:	88 0f       	add	r24, r24
 678:	99 1f       	adc	r25, r25
 67a:	2a 95       	dec	r18
 67c:	e2 f7       	brpl	.-8      	; 0x676 <Setpin_Direction+0x18a>
 67e:	80 95       	com	r24
 680:	84 23       	and	r24, r20
 682:	8c 93       	st	X, r24
	    				 DDRD |=(copy_u8_value<<copy_u8_PIN_Id);
 684:	a1 e3       	ldi	r26, 0x31	; 49
 686:	b0 e0       	ldi	r27, 0x00	; 0
 688:	e1 e3       	ldi	r30, 0x31	; 49
 68a:	f0 e0       	ldi	r31, 0x00	; 0
 68c:	80 81       	ld	r24, Z
 68e:	48 2f       	mov	r20, r24
 690:	8e 81       	ldd	r24, Y+6	; 0x06
 692:	28 2f       	mov	r18, r24
 694:	30 e0       	ldi	r19, 0x00	; 0
 696:	8d 81       	ldd	r24, Y+5	; 0x05
 698:	88 2f       	mov	r24, r24
 69a:	90 e0       	ldi	r25, 0x00	; 0
 69c:	b9 01       	movw	r22, r18
 69e:	02 c0       	rjmp	.+4      	; 0x6a4 <Setpin_Direction+0x1b8>
 6a0:	66 0f       	add	r22, r22
 6a2:	77 1f       	adc	r23, r23
 6a4:	8a 95       	dec	r24
 6a6:	e2 f7       	brpl	.-8      	; 0x6a0 <Setpin_Direction+0x1b4>
 6a8:	cb 01       	movw	r24, r22
 6aa:	84 2b       	or	r24, r20
 6ac:	8c 93       	st	X, r24
					   break;

					   }

			ES_t local_enumError=DIO_OK;
 6ae:	1a 82       	std	Y+2, r1	; 0x02
 6b0:	02 c0       	rjmp	.+4      	; 0x6b6 <Setpin_Direction+0x1ca>

		}
		else
		{
			ES_t local_enumError=OUT_OF_RANGE;
 6b2:	83 e0       	ldi	r24, 0x03	; 3
 6b4:	89 83       	std	Y+1, r24	; 0x01

		}


			 return local_enumError;
 6b6:	8b 81       	ldd	r24, Y+3	; 0x03

}
 6b8:	28 96       	adiw	r28, 0x08	; 8
 6ba:	0f b6       	in	r0, 0x3f	; 63
 6bc:	f8 94       	cli
 6be:	de bf       	out	0x3e, r29	; 62
 6c0:	0f be       	out	0x3f, r0	; 63
 6c2:	cd bf       	out	0x3d, r28	; 61
 6c4:	cf 91       	pop	r28
 6c6:	df 91       	pop	r29
 6c8:	08 95       	ret

000006ca <Setpin_value>:
	ES_t Setpin_value(u8 copy_u8_PortId,u8 copy_u8_PIN_Id,u8 copy_u8_value)
{
 6ca:	df 93       	push	r29
 6cc:	cf 93       	push	r28
 6ce:	cd b7       	in	r28, 0x3d	; 61
 6d0:	de b7       	in	r29, 0x3e	; 62
 6d2:	28 97       	sbiw	r28, 0x08	; 8
 6d4:	0f b6       	in	r0, 0x3f	; 63
 6d6:	f8 94       	cli
 6d8:	de bf       	out	0x3e, r29	; 62
 6da:	0f be       	out	0x3f, r0	; 63
 6dc:	cd bf       	out	0x3d, r28	; 61
 6de:	8c 83       	std	Y+4, r24	; 0x04
 6e0:	6d 83       	std	Y+5, r22	; 0x05
 6e2:	4e 83       	std	Y+6, r20	; 0x06
		ES_t local_enumError=DIO_NOK;
 6e4:	81 e0       	ldi	r24, 0x01	; 1
 6e6:	8b 83       	std	Y+3, r24	; 0x03
					if(copy_u8_PortId<=DIO_PORTD &&copy_u8_PIN_Id<=DIO_PIN7&&copy_u8_value<=OUTPUT)
 6e8:	8c 81       	ldd	r24, Y+4	; 0x04
 6ea:	84 30       	cpi	r24, 0x04	; 4
 6ec:	08 f0       	brcs	.+2      	; 0x6f0 <Setpin_value+0x26>
 6ee:	d0 c0       	rjmp	.+416    	; 0x890 <__stack+0x31>
 6f0:	8d 81       	ldd	r24, Y+5	; 0x05
 6f2:	88 30       	cpi	r24, 0x08	; 8
 6f4:	08 f0       	brcs	.+2      	; 0x6f8 <Setpin_value+0x2e>
 6f6:	cc c0       	rjmp	.+408    	; 0x890 <__stack+0x31>
 6f8:	8e 81       	ldd	r24, Y+6	; 0x06
 6fa:	82 30       	cpi	r24, 0x02	; 2
 6fc:	08 f0       	brcs	.+2      	; 0x700 <Setpin_value+0x36>
 6fe:	c8 c0       	rjmp	.+400    	; 0x890 <__stack+0x31>
					{
						switch(copy_u8_PortId)
 700:	8c 81       	ldd	r24, Y+4	; 0x04
 702:	28 2f       	mov	r18, r24
 704:	30 e0       	ldi	r19, 0x00	; 0
 706:	38 87       	std	Y+8, r19	; 0x08
 708:	2f 83       	std	Y+7, r18	; 0x07
 70a:	6f 81       	ldd	r22, Y+7	; 0x07
 70c:	78 85       	ldd	r23, Y+8	; 0x08
 70e:	61 30       	cpi	r22, 0x01	; 1
 710:	71 05       	cpc	r23, r1
 712:	09 f4       	brne	.+2      	; 0x716 <Setpin_value+0x4c>
 714:	41 c0       	rjmp	.+130    	; 0x798 <Setpin_value+0xce>
 716:	8f 81       	ldd	r24, Y+7	; 0x07
 718:	98 85       	ldd	r25, Y+8	; 0x08
 71a:	82 30       	cpi	r24, 0x02	; 2
 71c:	91 05       	cpc	r25, r1
 71e:	34 f4       	brge	.+12     	; 0x72c <Setpin_value+0x62>
 720:	2f 81       	ldd	r18, Y+7	; 0x07
 722:	38 85       	ldd	r19, Y+8	; 0x08
 724:	21 15       	cp	r18, r1
 726:	31 05       	cpc	r19, r1
 728:	71 f0       	breq	.+28     	; 0x746 <Setpin_value+0x7c>
 72a:	b0 c0       	rjmp	.+352    	; 0x88c <__stack+0x2d>
 72c:	6f 81       	ldd	r22, Y+7	; 0x07
 72e:	78 85       	ldd	r23, Y+8	; 0x08
 730:	62 30       	cpi	r22, 0x02	; 2
 732:	71 05       	cpc	r23, r1
 734:	09 f4       	brne	.+2      	; 0x738 <Setpin_value+0x6e>
 736:	59 c0       	rjmp	.+178    	; 0x7ea <Setpin_value+0x120>
 738:	8f 81       	ldd	r24, Y+7	; 0x07
 73a:	98 85       	ldd	r25, Y+8	; 0x08
 73c:	83 30       	cpi	r24, 0x03	; 3
 73e:	91 05       	cpc	r25, r1
 740:	09 f4       	brne	.+2      	; 0x744 <Setpin_value+0x7a>
 742:	7c c0       	rjmp	.+248    	; 0x83c <Setpin_value+0x172>
 744:	a3 c0       	rjmp	.+326    	; 0x88c <__stack+0x2d>
								   {
					 case DIO_PORTA:
						 PORTA &=~(1<<copy_u8_PIN_Id);
 746:	ab e3       	ldi	r26, 0x3B	; 59
 748:	b0 e0       	ldi	r27, 0x00	; 0
 74a:	eb e3       	ldi	r30, 0x3B	; 59
 74c:	f0 e0       	ldi	r31, 0x00	; 0
 74e:	80 81       	ld	r24, Z
 750:	48 2f       	mov	r20, r24
 752:	8d 81       	ldd	r24, Y+5	; 0x05
 754:	28 2f       	mov	r18, r24
 756:	30 e0       	ldi	r19, 0x00	; 0
 758:	81 e0       	ldi	r24, 0x01	; 1
 75a:	90 e0       	ldi	r25, 0x00	; 0
 75c:	02 c0       	rjmp	.+4      	; 0x762 <Setpin_value+0x98>
 75e:	88 0f       	add	r24, r24
 760:	99 1f       	adc	r25, r25
 762:	2a 95       	dec	r18
 764:	e2 f7       	brpl	.-8      	; 0x75e <Setpin_value+0x94>
 766:	80 95       	com	r24
 768:	84 23       	and	r24, r20
 76a:	8c 93       	st	X, r24
						 PORTA |=(copy_u8_value<<copy_u8_PIN_Id);
 76c:	ab e3       	ldi	r26, 0x3B	; 59
 76e:	b0 e0       	ldi	r27, 0x00	; 0
 770:	eb e3       	ldi	r30, 0x3B	; 59
 772:	f0 e0       	ldi	r31, 0x00	; 0
 774:	80 81       	ld	r24, Z
 776:	48 2f       	mov	r20, r24
 778:	8e 81       	ldd	r24, Y+6	; 0x06
 77a:	28 2f       	mov	r18, r24
 77c:	30 e0       	ldi	r19, 0x00	; 0
 77e:	8d 81       	ldd	r24, Y+5	; 0x05
 780:	88 2f       	mov	r24, r24
 782:	90 e0       	ldi	r25, 0x00	; 0
 784:	b9 01       	movw	r22, r18
 786:	02 c0       	rjmp	.+4      	; 0x78c <Setpin_value+0xc2>
 788:	66 0f       	add	r22, r22
 78a:	77 1f       	adc	r23, r23
 78c:	8a 95       	dec	r24
 78e:	e2 f7       	brpl	.-8      	; 0x788 <Setpin_value+0xbe>
 790:	cb 01       	movw	r24, r22
 792:	84 2b       	or	r24, r20
 794:	8c 93       	st	X, r24
 796:	7a c0       	rjmp	.+244    	; 0x88c <__stack+0x2d>
				 	                break;
				     case DIO_PORTB:
				    	 PORTB &=~(1<<copy_u8_PIN_Id);                         //CLEAR THE BIT YOU WANT TO SET FIRIST(MASK)
 798:	a8 e3       	ldi	r26, 0x38	; 56
 79a:	b0 e0       	ldi	r27, 0x00	; 0
 79c:	e8 e3       	ldi	r30, 0x38	; 56
 79e:	f0 e0       	ldi	r31, 0x00	; 0
 7a0:	80 81       	ld	r24, Z
 7a2:	48 2f       	mov	r20, r24
 7a4:	8d 81       	ldd	r24, Y+5	; 0x05
 7a6:	28 2f       	mov	r18, r24
 7a8:	30 e0       	ldi	r19, 0x00	; 0
 7aa:	81 e0       	ldi	r24, 0x01	; 1
 7ac:	90 e0       	ldi	r25, 0x00	; 0
 7ae:	02 c0       	rjmp	.+4      	; 0x7b4 <Setpin_value+0xea>
 7b0:	88 0f       	add	r24, r24
 7b2:	99 1f       	adc	r25, r25
 7b4:	2a 95       	dec	r18
 7b6:	e2 f7       	brpl	.-8      	; 0x7b0 <Setpin_value+0xe6>
 7b8:	80 95       	com	r24
 7ba:	84 23       	and	r24, r20
 7bc:	8c 93       	st	X, r24
				    	 PORTB |=(copy_u8_value<<copy_u8_PIN_Id);  //SET THE VALUE YOU WANT IN THE DIRECTON TO DETMINE THE BIT HIGH LOW PULL_UP FLOAT
 7be:	a8 e3       	ldi	r26, 0x38	; 56
 7c0:	b0 e0       	ldi	r27, 0x00	; 0
 7c2:	e8 e3       	ldi	r30, 0x38	; 56
 7c4:	f0 e0       	ldi	r31, 0x00	; 0
 7c6:	80 81       	ld	r24, Z
 7c8:	48 2f       	mov	r20, r24
 7ca:	8e 81       	ldd	r24, Y+6	; 0x06
 7cc:	28 2f       	mov	r18, r24
 7ce:	30 e0       	ldi	r19, 0x00	; 0
 7d0:	8d 81       	ldd	r24, Y+5	; 0x05
 7d2:	88 2f       	mov	r24, r24
 7d4:	90 e0       	ldi	r25, 0x00	; 0
 7d6:	b9 01       	movw	r22, r18
 7d8:	02 c0       	rjmp	.+4      	; 0x7de <Setpin_value+0x114>
 7da:	66 0f       	add	r22, r22
 7dc:	77 1f       	adc	r23, r23
 7de:	8a 95       	dec	r24
 7e0:	e2 f7       	brpl	.-8      	; 0x7da <Setpin_value+0x110>
 7e2:	cb 01       	movw	r24, r22
 7e4:	84 2b       	or	r24, r20
 7e6:	8c 93       	st	X, r24
 7e8:	51 c0       	rjmp	.+162    	; 0x88c <__stack+0x2d>
				  	            break;
				     case DIO_PORTC:
				    	 PORTC &=~(1<<copy_u8_PIN_Id);
 7ea:	a5 e3       	ldi	r26, 0x35	; 53
 7ec:	b0 e0       	ldi	r27, 0x00	; 0
 7ee:	e5 e3       	ldi	r30, 0x35	; 53
 7f0:	f0 e0       	ldi	r31, 0x00	; 0
 7f2:	80 81       	ld	r24, Z
 7f4:	48 2f       	mov	r20, r24
 7f6:	8d 81       	ldd	r24, Y+5	; 0x05
 7f8:	28 2f       	mov	r18, r24
 7fa:	30 e0       	ldi	r19, 0x00	; 0
 7fc:	81 e0       	ldi	r24, 0x01	; 1
 7fe:	90 e0       	ldi	r25, 0x00	; 0
 800:	02 c0       	rjmp	.+4      	; 0x806 <Setpin_value+0x13c>
 802:	88 0f       	add	r24, r24
 804:	99 1f       	adc	r25, r25
 806:	2a 95       	dec	r18
 808:	e2 f7       	brpl	.-8      	; 0x802 <Setpin_value+0x138>
 80a:	80 95       	com	r24
 80c:	84 23       	and	r24, r20
 80e:	8c 93       	st	X, r24
				    	 PORTC |=(copy_u8_value<<copy_u8_PIN_Id);
 810:	a5 e3       	ldi	r26, 0x35	; 53
 812:	b0 e0       	ldi	r27, 0x00	; 0
 814:	e5 e3       	ldi	r30, 0x35	; 53
 816:	f0 e0       	ldi	r31, 0x00	; 0
 818:	80 81       	ld	r24, Z
 81a:	48 2f       	mov	r20, r24
 81c:	8e 81       	ldd	r24, Y+6	; 0x06
 81e:	28 2f       	mov	r18, r24
 820:	30 e0       	ldi	r19, 0x00	; 0
 822:	8d 81       	ldd	r24, Y+5	; 0x05
 824:	88 2f       	mov	r24, r24
 826:	90 e0       	ldi	r25, 0x00	; 0
 828:	b9 01       	movw	r22, r18
 82a:	02 c0       	rjmp	.+4      	; 0x830 <Setpin_value+0x166>
 82c:	66 0f       	add	r22, r22
 82e:	77 1f       	adc	r23, r23
 830:	8a 95       	dec	r24
 832:	e2 f7       	brpl	.-8      	; 0x82c <Setpin_value+0x162>
 834:	cb 01       	movw	r24, r22
 836:	84 2b       	or	r24, r20
 838:	8c 93       	st	X, r24
 83a:	28 c0       	rjmp	.+80     	; 0x88c <__stack+0x2d>
				 	 			   break;

				    case DIO_PORTD:
				    	PORTD &=~(1<<copy_u8_PIN_Id);
 83c:	a2 e3       	ldi	r26, 0x32	; 50
 83e:	b0 e0       	ldi	r27, 0x00	; 0
 840:	e2 e3       	ldi	r30, 0x32	; 50
 842:	f0 e0       	ldi	r31, 0x00	; 0
 844:	80 81       	ld	r24, Z
 846:	48 2f       	mov	r20, r24
 848:	8d 81       	ldd	r24, Y+5	; 0x05
 84a:	28 2f       	mov	r18, r24
 84c:	30 e0       	ldi	r19, 0x00	; 0
 84e:	81 e0       	ldi	r24, 0x01	; 1
 850:	90 e0       	ldi	r25, 0x00	; 0
 852:	02 c0       	rjmp	.+4      	; 0x858 <Setpin_value+0x18e>
 854:	88 0f       	add	r24, r24
 856:	99 1f       	adc	r25, r25
 858:	2a 95       	dec	r18
 85a:	e2 f7       	brpl	.-8      	; 0x854 <Setpin_value+0x18a>
 85c:	80 95       	com	r24
 85e:	84 23       	and	r24, r20
 860:	8c 93       	st	X, r24
				    	PORTD |=(copy_u8_value<<copy_u8_PIN_Id);
 862:	a2 e3       	ldi	r26, 0x32	; 50
 864:	b0 e0       	ldi	r27, 0x00	; 0
 866:	e2 e3       	ldi	r30, 0x32	; 50
 868:	f0 e0       	ldi	r31, 0x00	; 0
 86a:	80 81       	ld	r24, Z
 86c:	48 2f       	mov	r20, r24
 86e:	8e 81       	ldd	r24, Y+6	; 0x06
 870:	28 2f       	mov	r18, r24
 872:	30 e0       	ldi	r19, 0x00	; 0
 874:	8d 81       	ldd	r24, Y+5	; 0x05
 876:	88 2f       	mov	r24, r24
 878:	90 e0       	ldi	r25, 0x00	; 0
 87a:	b9 01       	movw	r22, r18
 87c:	02 c0       	rjmp	.+4      	; 0x882 <__stack+0x23>
 87e:	66 0f       	add	r22, r22
 880:	77 1f       	adc	r23, r23
 882:	8a 95       	dec	r24
 884:	e2 f7       	brpl	.-8      	; 0x87e <__stack+0x1f>
 886:	cb 01       	movw	r24, r22
 888:	84 2b       	or	r24, r20
 88a:	8c 93       	st	X, r24
								   break;

								   }

						ES_t local_enumError=DIO_OK;
 88c:	1a 82       	std	Y+2, r1	; 0x02
 88e:	02 c0       	rjmp	.+4      	; 0x894 <__stack+0x35>

					}
					else
					{
						ES_t local_enumError=OUT_OF_RANGE;
 890:	83 e0       	ldi	r24, 0x03	; 3
 892:	89 83       	std	Y+1, r24	; 0x01

					}


						 return local_enumError;
 894:	8b 81       	ldd	r24, Y+3	; 0x03

			}
 896:	28 96       	adiw	r28, 0x08	; 8
 898:	0f b6       	in	r0, 0x3f	; 63
 89a:	f8 94       	cli
 89c:	de bf       	out	0x3e, r29	; 62
 89e:	0f be       	out	0x3f, r0	; 63
 8a0:	cd bf       	out	0x3d, r28	; 61
 8a2:	cf 91       	pop	r28
 8a4:	df 91       	pop	r29
 8a6:	08 95       	ret

000008a8 <TogglePIN>:

	ES_t TogglePIN(u8 copy_u8_PortId,u8  copy_u8_PIN_Id)
				{
 8a8:	df 93       	push	r29
 8aa:	cf 93       	push	r28
 8ac:	cd b7       	in	r28, 0x3d	; 61
 8ae:	de b7       	in	r29, 0x3e	; 62
 8b0:	27 97       	sbiw	r28, 0x07	; 7
 8b2:	0f b6       	in	r0, 0x3f	; 63
 8b4:	f8 94       	cli
 8b6:	de bf       	out	0x3e, r29	; 62
 8b8:	0f be       	out	0x3f, r0	; 63
 8ba:	cd bf       	out	0x3d, r28	; 61
 8bc:	8c 83       	std	Y+4, r24	; 0x04
 8be:	6d 83       	std	Y+5, r22	; 0x05
					ES_t local_enumError=DIO_NOK;
 8c0:	81 e0       	ldi	r24, 0x01	; 1
 8c2:	8b 83       	std	Y+3, r24	; 0x03

					if(copy_u8_PortId<=DIO_PORTD &&copy_u8_PIN_Id<=DIO_PIN7)
 8c4:	8c 81       	ldd	r24, Y+4	; 0x04
 8c6:	84 30       	cpi	r24, 0x04	; 4
 8c8:	08 f0       	brcs	.+2      	; 0x8cc <TogglePIN+0x24>
 8ca:	74 c0       	rjmp	.+232    	; 0x9b4 <TogglePIN+0x10c>
 8cc:	8d 81       	ldd	r24, Y+5	; 0x05
 8ce:	88 30       	cpi	r24, 0x08	; 8
 8d0:	08 f0       	brcs	.+2      	; 0x8d4 <TogglePIN+0x2c>
 8d2:	70 c0       	rjmp	.+224    	; 0x9b4 <TogglePIN+0x10c>
					{

						 switch(copy_u8_PortId)
 8d4:	8c 81       	ldd	r24, Y+4	; 0x04
 8d6:	28 2f       	mov	r18, r24
 8d8:	30 e0       	ldi	r19, 0x00	; 0
 8da:	3f 83       	std	Y+7, r19	; 0x07
 8dc:	2e 83       	std	Y+6, r18	; 0x06
 8de:	8e 81       	ldd	r24, Y+6	; 0x06
 8e0:	9f 81       	ldd	r25, Y+7	; 0x07
 8e2:	81 30       	cpi	r24, 0x01	; 1
 8e4:	91 05       	cpc	r25, r1
 8e6:	49 f1       	breq	.+82     	; 0x93a <TogglePIN+0x92>
 8e8:	2e 81       	ldd	r18, Y+6	; 0x06
 8ea:	3f 81       	ldd	r19, Y+7	; 0x07
 8ec:	22 30       	cpi	r18, 0x02	; 2
 8ee:	31 05       	cpc	r19, r1
 8f0:	2c f4       	brge	.+10     	; 0x8fc <TogglePIN+0x54>
 8f2:	8e 81       	ldd	r24, Y+6	; 0x06
 8f4:	9f 81       	ldd	r25, Y+7	; 0x07
 8f6:	00 97       	sbiw	r24, 0x00	; 0
 8f8:	61 f0       	breq	.+24     	; 0x912 <TogglePIN+0x6a>
 8fa:	5a c0       	rjmp	.+180    	; 0x9b0 <TogglePIN+0x108>
 8fc:	2e 81       	ldd	r18, Y+6	; 0x06
 8fe:	3f 81       	ldd	r19, Y+7	; 0x07
 900:	22 30       	cpi	r18, 0x02	; 2
 902:	31 05       	cpc	r19, r1
 904:	71 f1       	breq	.+92     	; 0x962 <TogglePIN+0xba>
 906:	8e 81       	ldd	r24, Y+6	; 0x06
 908:	9f 81       	ldd	r25, Y+7	; 0x07
 90a:	83 30       	cpi	r24, 0x03	; 3
 90c:	91 05       	cpc	r25, r1
 90e:	e9 f1       	breq	.+122    	; 0x98a <TogglePIN+0xe2>
 910:	4f c0       	rjmp	.+158    	; 0x9b0 <TogglePIN+0x108>
		   	 {
					  case DIO_PORTA:
					 	 PORTA ^=(1<<copy_u8_PIN_Id);
 912:	ab e3       	ldi	r26, 0x3B	; 59
 914:	b0 e0       	ldi	r27, 0x00	; 0
 916:	eb e3       	ldi	r30, 0x3B	; 59
 918:	f0 e0       	ldi	r31, 0x00	; 0
 91a:	80 81       	ld	r24, Z
 91c:	48 2f       	mov	r20, r24
 91e:	8d 81       	ldd	r24, Y+5	; 0x05
 920:	28 2f       	mov	r18, r24
 922:	30 e0       	ldi	r19, 0x00	; 0
 924:	81 e0       	ldi	r24, 0x01	; 1
 926:	90 e0       	ldi	r25, 0x00	; 0
 928:	02 2e       	mov	r0, r18
 92a:	02 c0       	rjmp	.+4      	; 0x930 <TogglePIN+0x88>
 92c:	88 0f       	add	r24, r24
 92e:	99 1f       	adc	r25, r25
 930:	0a 94       	dec	r0
 932:	e2 f7       	brpl	.-8      	; 0x92c <TogglePIN+0x84>
 934:	84 27       	eor	r24, r20
 936:	8c 93       	st	X, r24
 938:	3b c0       	rjmp	.+118    	; 0x9b0 <TogglePIN+0x108>
					 	 break;

					  case DIO_PORTB:
					 	 PORTB ^=(1<<copy_u8_PIN_Id);
 93a:	a8 e3       	ldi	r26, 0x38	; 56
 93c:	b0 e0       	ldi	r27, 0x00	; 0
 93e:	e8 e3       	ldi	r30, 0x38	; 56
 940:	f0 e0       	ldi	r31, 0x00	; 0
 942:	80 81       	ld	r24, Z
 944:	48 2f       	mov	r20, r24
 946:	8d 81       	ldd	r24, Y+5	; 0x05
 948:	28 2f       	mov	r18, r24
 94a:	30 e0       	ldi	r19, 0x00	; 0
 94c:	81 e0       	ldi	r24, 0x01	; 1
 94e:	90 e0       	ldi	r25, 0x00	; 0
 950:	02 2e       	mov	r0, r18
 952:	02 c0       	rjmp	.+4      	; 0x958 <TogglePIN+0xb0>
 954:	88 0f       	add	r24, r24
 956:	99 1f       	adc	r25, r25
 958:	0a 94       	dec	r0
 95a:	e2 f7       	brpl	.-8      	; 0x954 <TogglePIN+0xac>
 95c:	84 27       	eor	r24, r20
 95e:	8c 93       	st	X, r24
 960:	27 c0       	rjmp	.+78     	; 0x9b0 <TogglePIN+0x108>

					     		 break;
					  case DIO_PORTC:
					 	 PORTC ^=(1<<copy_u8_PIN_Id);
 962:	a5 e3       	ldi	r26, 0x35	; 53
 964:	b0 e0       	ldi	r27, 0x00	; 0
 966:	e5 e3       	ldi	r30, 0x35	; 53
 968:	f0 e0       	ldi	r31, 0x00	; 0
 96a:	80 81       	ld	r24, Z
 96c:	48 2f       	mov	r20, r24
 96e:	8d 81       	ldd	r24, Y+5	; 0x05
 970:	28 2f       	mov	r18, r24
 972:	30 e0       	ldi	r19, 0x00	; 0
 974:	81 e0       	ldi	r24, 0x01	; 1
 976:	90 e0       	ldi	r25, 0x00	; 0
 978:	02 2e       	mov	r0, r18
 97a:	02 c0       	rjmp	.+4      	; 0x980 <TogglePIN+0xd8>
 97c:	88 0f       	add	r24, r24
 97e:	99 1f       	adc	r25, r25
 980:	0a 94       	dec	r0
 982:	e2 f7       	brpl	.-8      	; 0x97c <TogglePIN+0xd4>
 984:	84 27       	eor	r24, r20
 986:	8c 93       	st	X, r24
 988:	13 c0       	rjmp	.+38     	; 0x9b0 <TogglePIN+0x108>

					     		 break;
					  case DIO_PORTD:
					 	PORTD ^=(1<<copy_u8_PIN_Id);
 98a:	a2 e3       	ldi	r26, 0x32	; 50
 98c:	b0 e0       	ldi	r27, 0x00	; 0
 98e:	e2 e3       	ldi	r30, 0x32	; 50
 990:	f0 e0       	ldi	r31, 0x00	; 0
 992:	80 81       	ld	r24, Z
 994:	48 2f       	mov	r20, r24
 996:	8d 81       	ldd	r24, Y+5	; 0x05
 998:	28 2f       	mov	r18, r24
 99a:	30 e0       	ldi	r19, 0x00	; 0
 99c:	81 e0       	ldi	r24, 0x01	; 1
 99e:	90 e0       	ldi	r25, 0x00	; 0
 9a0:	02 2e       	mov	r0, r18
 9a2:	02 c0       	rjmp	.+4      	; 0x9a8 <TogglePIN+0x100>
 9a4:	88 0f       	add	r24, r24
 9a6:	99 1f       	adc	r25, r25
 9a8:	0a 94       	dec	r0
 9aa:	e2 f7       	brpl	.-8      	; 0x9a4 <TogglePIN+0xfc>
 9ac:	84 27       	eor	r24, r20
 9ae:	8c 93       	st	X, r24

					     		 break;
	     }

						ES_t local_enumError=DIO_OK;
 9b0:	1a 82       	std	Y+2, r1	; 0x02
 9b2:	02 c0       	rjmp	.+4      	; 0x9b8 <TogglePIN+0x110>
					}
					else
					{
				ES_t local_enumError=OUT_OF_RANGE;
 9b4:	83 e0       	ldi	r24, 0x03	; 3
 9b6:	89 83       	std	Y+1, r24	; 0x01

				}

					return local_enumError;
 9b8:	8b 81       	ldd	r24, Y+3	; 0x03

}
 9ba:	27 96       	adiw	r28, 0x07	; 7
 9bc:	0f b6       	in	r0, 0x3f	; 63
 9be:	f8 94       	cli
 9c0:	de bf       	out	0x3e, r29	; 62
 9c2:	0f be       	out	0x3f, r0	; 63
 9c4:	cd bf       	out	0x3d, r28	; 61
 9c6:	cf 91       	pop	r28
 9c8:	df 91       	pop	r29
 9ca:	08 95       	ret

000009cc <GetPin>:
	ES_t GetPin(u8 copy_u8_PortId,u8 copy_u8_PIN_Id,u8 *copy_pu8_value)
{
 9cc:	df 93       	push	r29
 9ce:	cf 93       	push	r28
 9d0:	cd b7       	in	r28, 0x3d	; 61
 9d2:	de b7       	in	r29, 0x3e	; 62
 9d4:	2a 97       	sbiw	r28, 0x0a	; 10
 9d6:	0f b6       	in	r0, 0x3f	; 63
 9d8:	f8 94       	cli
 9da:	de bf       	out	0x3e, r29	; 62
 9dc:	0f be       	out	0x3f, r0	; 63
 9de:	cd bf       	out	0x3d, r28	; 61
 9e0:	8d 83       	std	Y+5, r24	; 0x05
 9e2:	6e 83       	std	Y+6, r22	; 0x06
 9e4:	58 87       	std	Y+8, r21	; 0x08
 9e6:	4f 83       	std	Y+7, r20	; 0x07
		ES_t local_enumError=DIO_NOK;
 9e8:	81 e0       	ldi	r24, 0x01	; 1
 9ea:	8c 83       	std	Y+4, r24	; 0x04
          if(copy_pu8_value!=NULL)
 9ec:	8f 81       	ldd	r24, Y+7	; 0x07
 9ee:	98 85       	ldd	r25, Y+8	; 0x08
 9f0:	00 97       	sbiw	r24, 0x00	; 0
 9f2:	09 f4       	brne	.+2      	; 0x9f6 <GetPin+0x2a>
 9f4:	7d c0       	rjmp	.+250    	; 0xaf0 <GetPin+0x124>
 {
        	  if(copy_u8_PortId<=DIO_PORTD&&copy_u8_PIN_Id<=DIO_PIN7)
 9f6:	8d 81       	ldd	r24, Y+5	; 0x05
 9f8:	84 30       	cpi	r24, 0x04	; 4
 9fa:	08 f0       	brcs	.+2      	; 0x9fe <GetPin+0x32>
 9fc:	76 c0       	rjmp	.+236    	; 0xaea <GetPin+0x11e>
 9fe:	8e 81       	ldd	r24, Y+6	; 0x06
 a00:	88 30       	cpi	r24, 0x08	; 8
 a02:	08 f0       	brcs	.+2      	; 0xa06 <GetPin+0x3a>
 a04:	72 c0       	rjmp	.+228    	; 0xaea <GetPin+0x11e>
        	  {
        			 switch(copy_u8_PortId)
 a06:	8d 81       	ldd	r24, Y+5	; 0x05
 a08:	28 2f       	mov	r18, r24
 a0a:	30 e0       	ldi	r19, 0x00	; 0
 a0c:	3a 87       	std	Y+10, r19	; 0x0a
 a0e:	29 87       	std	Y+9, r18	; 0x09
 a10:	49 85       	ldd	r20, Y+9	; 0x09
 a12:	5a 85       	ldd	r21, Y+10	; 0x0a
 a14:	41 30       	cpi	r20, 0x01	; 1
 a16:	51 05       	cpc	r21, r1
 a18:	59 f1       	breq	.+86     	; 0xa70 <GetPin+0xa4>
 a1a:	89 85       	ldd	r24, Y+9	; 0x09
 a1c:	9a 85       	ldd	r25, Y+10	; 0x0a
 a1e:	82 30       	cpi	r24, 0x02	; 2
 a20:	91 05       	cpc	r25, r1
 a22:	34 f4       	brge	.+12     	; 0xa30 <GetPin+0x64>
 a24:	29 85       	ldd	r18, Y+9	; 0x09
 a26:	3a 85       	ldd	r19, Y+10	; 0x0a
 a28:	21 15       	cp	r18, r1
 a2a:	31 05       	cpc	r19, r1
 a2c:	69 f0       	breq	.+26     	; 0xa48 <GetPin+0x7c>
 a2e:	5b c0       	rjmp	.+182    	; 0xae6 <GetPin+0x11a>
 a30:	49 85       	ldd	r20, Y+9	; 0x09
 a32:	5a 85       	ldd	r21, Y+10	; 0x0a
 a34:	42 30       	cpi	r20, 0x02	; 2
 a36:	51 05       	cpc	r21, r1
 a38:	79 f1       	breq	.+94     	; 0xa98 <GetPin+0xcc>
 a3a:	89 85       	ldd	r24, Y+9	; 0x09
 a3c:	9a 85       	ldd	r25, Y+10	; 0x0a
 a3e:	83 30       	cpi	r24, 0x03	; 3
 a40:	91 05       	cpc	r25, r1
 a42:	09 f4       	brne	.+2      	; 0xa46 <GetPin+0x7a>
 a44:	3d c0       	rjmp	.+122    	; 0xac0 <GetPin+0xf4>
 a46:	4f c0       	rjmp	.+158    	; 0xae6 <GetPin+0x11a>
        			   	 {
        						  case DIO_PORTA:
        							  *copy_pu8_value=((PINA>>copy_u8_PIN_Id)&1);
 a48:	e9 e3       	ldi	r30, 0x39	; 57
 a4a:	f0 e0       	ldi	r31, 0x00	; 0
 a4c:	80 81       	ld	r24, Z
 a4e:	28 2f       	mov	r18, r24
 a50:	30 e0       	ldi	r19, 0x00	; 0
 a52:	8e 81       	ldd	r24, Y+6	; 0x06
 a54:	88 2f       	mov	r24, r24
 a56:	90 e0       	ldi	r25, 0x00	; 0
 a58:	a9 01       	movw	r20, r18
 a5a:	02 c0       	rjmp	.+4      	; 0xa60 <GetPin+0x94>
 a5c:	55 95       	asr	r21
 a5e:	47 95       	ror	r20
 a60:	8a 95       	dec	r24
 a62:	e2 f7       	brpl	.-8      	; 0xa5c <GetPin+0x90>
 a64:	ca 01       	movw	r24, r20
 a66:	81 70       	andi	r24, 0x01	; 1
 a68:	ef 81       	ldd	r30, Y+7	; 0x07
 a6a:	f8 85       	ldd	r31, Y+8	; 0x08
 a6c:	80 83       	st	Z, r24
 a6e:	3b c0       	rjmp	.+118    	; 0xae6 <GetPin+0x11a>
        						 	 break;

        						  case DIO_PORTB:
        							  *copy_pu8_value=((PINB>>copy_u8_PIN_Id)&1);
 a70:	e6 e3       	ldi	r30, 0x36	; 54
 a72:	f0 e0       	ldi	r31, 0x00	; 0
 a74:	80 81       	ld	r24, Z
 a76:	28 2f       	mov	r18, r24
 a78:	30 e0       	ldi	r19, 0x00	; 0
 a7a:	8e 81       	ldd	r24, Y+6	; 0x06
 a7c:	88 2f       	mov	r24, r24
 a7e:	90 e0       	ldi	r25, 0x00	; 0
 a80:	a9 01       	movw	r20, r18
 a82:	02 c0       	rjmp	.+4      	; 0xa88 <GetPin+0xbc>
 a84:	55 95       	asr	r21
 a86:	47 95       	ror	r20
 a88:	8a 95       	dec	r24
 a8a:	e2 f7       	brpl	.-8      	; 0xa84 <GetPin+0xb8>
 a8c:	ca 01       	movw	r24, r20
 a8e:	81 70       	andi	r24, 0x01	; 1
 a90:	ef 81       	ldd	r30, Y+7	; 0x07
 a92:	f8 85       	ldd	r31, Y+8	; 0x08
 a94:	80 83       	st	Z, r24
 a96:	27 c0       	rjmp	.+78     	; 0xae6 <GetPin+0x11a>

        						     		 break;
        						  case DIO_PORTC:
        							  *copy_pu8_value=((PINC>>copy_u8_PIN_Id)&1);
 a98:	e3 e3       	ldi	r30, 0x33	; 51
 a9a:	f0 e0       	ldi	r31, 0x00	; 0
 a9c:	80 81       	ld	r24, Z
 a9e:	28 2f       	mov	r18, r24
 aa0:	30 e0       	ldi	r19, 0x00	; 0
 aa2:	8e 81       	ldd	r24, Y+6	; 0x06
 aa4:	88 2f       	mov	r24, r24
 aa6:	90 e0       	ldi	r25, 0x00	; 0
 aa8:	a9 01       	movw	r20, r18
 aaa:	02 c0       	rjmp	.+4      	; 0xab0 <GetPin+0xe4>
 aac:	55 95       	asr	r21
 aae:	47 95       	ror	r20
 ab0:	8a 95       	dec	r24
 ab2:	e2 f7       	brpl	.-8      	; 0xaac <GetPin+0xe0>
 ab4:	ca 01       	movw	r24, r20
 ab6:	81 70       	andi	r24, 0x01	; 1
 ab8:	ef 81       	ldd	r30, Y+7	; 0x07
 aba:	f8 85       	ldd	r31, Y+8	; 0x08
 abc:	80 83       	st	Z, r24
 abe:	13 c0       	rjmp	.+38     	; 0xae6 <GetPin+0x11a>

        						     		 break;
        						  case DIO_PORTD:
        							  *copy_pu8_value=((PIND>>copy_u8_PIN_Id)&1);
 ac0:	e0 e3       	ldi	r30, 0x30	; 48
 ac2:	f0 e0       	ldi	r31, 0x00	; 0
 ac4:	80 81       	ld	r24, Z
 ac6:	28 2f       	mov	r18, r24
 ac8:	30 e0       	ldi	r19, 0x00	; 0
 aca:	8e 81       	ldd	r24, Y+6	; 0x06
 acc:	88 2f       	mov	r24, r24
 ace:	90 e0       	ldi	r25, 0x00	; 0
 ad0:	a9 01       	movw	r20, r18
 ad2:	02 c0       	rjmp	.+4      	; 0xad8 <GetPin+0x10c>
 ad4:	55 95       	asr	r21
 ad6:	47 95       	ror	r20
 ad8:	8a 95       	dec	r24
 ada:	e2 f7       	brpl	.-8      	; 0xad4 <GetPin+0x108>
 adc:	ca 01       	movw	r24, r20
 ade:	81 70       	andi	r24, 0x01	; 1
 ae0:	ef 81       	ldd	r30, Y+7	; 0x07
 ae2:	f8 85       	ldd	r31, Y+8	; 0x08
 ae4:	80 83       	st	Z, r24

        						     		 break;
        		     }


					ES_t local_enumError=DIO_OK;
 ae6:	1b 82       	std	Y+3, r1	; 0x03
 ae8:	05 c0       	rjmp	.+10     	; 0xaf4 <GetPin+0x128>
        	  }
 else
        	  {
    	ES_t local_enumError=OUT_OF_RANGE;
 aea:	83 e0       	ldi	r24, 0x03	; 3
 aec:	8a 83       	std	Y+2, r24	; 0x02
 aee:	02 c0       	rjmp	.+4      	; 0xaf4 <GetPin+0x128>

}

else
					{
				ES_t local_enumError=DIO_NULLPOINTER;
 af0:	82 e0       	ldi	r24, 0x02	; 2
 af2:	89 83       	std	Y+1, r24	; 0x01

				}


					 return local_enumError;
 af4:	8c 81       	ldd	r24, Y+4	; 0x04

}
 af6:	2a 96       	adiw	r28, 0x0a	; 10
 af8:	0f b6       	in	r0, 0x3f	; 63
 afa:	f8 94       	cli
 afc:	de bf       	out	0x3e, r29	; 62
 afe:	0f be       	out	0x3f, r0	; 63
 b00:	cd bf       	out	0x3d, r28	; 61
 b02:	cf 91       	pop	r28
 b04:	df 91       	pop	r29
 b06:	08 95       	ret

00000b08 <_exit>:
 b08:	f8 94       	cli

00000b0a <__stop_program>:
 b0a:	ff cf       	rjmp	.-2      	; 0xb0a <__stop_program>
