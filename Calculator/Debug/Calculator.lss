
Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000314e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000006a  00800060  0000314e  000031e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  008000ca  008000ca  0000324c  2**0
                  ALLOC
  3 .stab         0000279c  00000000  00000000  0000324c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000fb0  00000000  00000000  000059e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006998  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006c48  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008891  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000977c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a52c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a68c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a919  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b0e7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e4       	ldi	r30, 0x4E	; 78
      68:	f1 e3       	ldi	r31, 0x31	; 49
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3c       	cpi	r26, 0xCA	; 202
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa ec       	ldi	r26, 0xCA	; 202
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 3d       	cpi	r26, 0xD0	; 208
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 4c 14 	call	0x2898	; 0x2898 <main>
      8a:	0c 94 a5 18 	jmp	0x314a	; 0x314a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 a7 15 	jmp	0x2b4e	; 0x2b4e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a9 ea       	ldi	r26, 0xA9	; 169
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 c3 15 	jmp	0x2b86	; 0x2b86 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 b3 15 	jmp	0x2b66	; 0x2b66 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 cf 15 	jmp	0x2b9e	; 0x2b9e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 b3 15 	jmp	0x2b66	; 0x2b66 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 cf 15 	jmp	0x2b9e	; 0x2b9e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 a7 15 	jmp	0x2b4e	; 0x2b4e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	89 ea       	ldi	r24, 0xA9	; 169
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 c3 15 	jmp	0x2b86	; 0x2b86 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 b3 15 	jmp	0x2b66	; 0x2b66 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 cf 15 	jmp	0x2b9e	; 0x2b9e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 b3 15 	jmp	0x2b66	; 0x2b66 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 cf 15 	jmp	0x2b9e	; 0x2b9e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 b3 15 	jmp	0x2b66	; 0x2b66 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 cf 15 	jmp	0x2b9e	; 0x2b9e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 b7 15 	jmp	0x2b6e	; 0x2b6e <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 d3 15 	jmp	0x2ba6	; 0x2ba6 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Calc_Start>:
#include "KEY_PAD_int.h"
#include "stack.h"
#include "util/delay.h"
#include "DIO_Int.h"

ES_t Calc_Start() {
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2e 97       	sbiw	r28, 0x0e	; 14
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
    DIO_init();
     b5a:	0e 94 0c 0a 	call	0x1418	; 0x1418 <DIO_init>
    LCD_enuInit();
     b5e:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <LCD_enuInit>

    LCD_enuSendData('W');
     b62:	87 e5       	ldi	r24, 0x57	; 87
     b64:	0e 94 3c 11 	call	0x2278	; 0x2278 <LCD_enuSendData>
    LCD_enuSendData('E');
     b68:	85 e4       	ldi	r24, 0x45	; 69
     b6a:	0e 94 3c 11 	call	0x2278	; 0x2278 <LCD_enuSendData>
    LCD_enuSendData('L');
     b6e:	8c e4       	ldi	r24, 0x4C	; 76
     b70:	0e 94 3c 11 	call	0x2278	; 0x2278 <LCD_enuSendData>
    LCD_enuSendData('C');
     b74:	83 e4       	ldi	r24, 0x43	; 67
     b76:	0e 94 3c 11 	call	0x2278	; 0x2278 <LCD_enuSendData>
    LCD_enuSendData('O');
     b7a:	8f e4       	ldi	r24, 0x4F	; 79
     b7c:	0e 94 3c 11 	call	0x2278	; 0x2278 <LCD_enuSendData>
    LCD_enuSendData('M');
     b80:	8d e4       	ldi	r24, 0x4D	; 77
     b82:	0e 94 3c 11 	call	0x2278	; 0x2278 <LCD_enuSendData>
    LCD_enuSendData('E');
     b86:	85 e4       	ldi	r24, 0x45	; 69
     b88:	0e 94 3c 11 	call	0x2278	; 0x2278 <LCD_enuSendData>
    LCD_enuSendData('!');
     b8c:	81 e2       	ldi	r24, 0x21	; 33
     b8e:	0e 94 3c 11 	call	0x2278	; 0x2278 <LCD_enuSendData>
     b92:	80 e0       	ldi	r24, 0x00	; 0
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	a1 e6       	ldi	r26, 0x61	; 97
     b98:	b4 e4       	ldi	r27, 0x44	; 68
     b9a:	8b 87       	std	Y+11, r24	; 0x0b
     b9c:	9c 87       	std	Y+12, r25	; 0x0c
     b9e:	ad 87       	std	Y+13, r26	; 0x0d
     ba0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ba2:	6b 85       	ldd	r22, Y+11	; 0x0b
     ba4:	7c 85       	ldd	r23, Y+12	; 0x0c
     ba6:	8d 85       	ldd	r24, Y+13	; 0x0d
     ba8:	9e 85       	ldd	r25, Y+14	; 0x0e
     baa:	20 e0       	ldi	r18, 0x00	; 0
     bac:	30 e0       	ldi	r19, 0x00	; 0
     bae:	4a e7       	ldi	r20, 0x7A	; 122
     bb0:	53 e4       	ldi	r21, 0x43	; 67
     bb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bb6:	dc 01       	movw	r26, r24
     bb8:	cb 01       	movw	r24, r22
     bba:	8f 83       	std	Y+7, r24	; 0x07
     bbc:	98 87       	std	Y+8, r25	; 0x08
     bbe:	a9 87       	std	Y+9, r26	; 0x09
     bc0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     bc2:	6f 81       	ldd	r22, Y+7	; 0x07
     bc4:	78 85       	ldd	r23, Y+8	; 0x08
     bc6:	89 85       	ldd	r24, Y+9	; 0x09
     bc8:	9a 85       	ldd	r25, Y+10	; 0x0a
     bca:	20 e0       	ldi	r18, 0x00	; 0
     bcc:	30 e0       	ldi	r19, 0x00	; 0
     bce:	40 e8       	ldi	r20, 0x80	; 128
     bd0:	5f e3       	ldi	r21, 0x3F	; 63
     bd2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bd6:	88 23       	and	r24, r24
     bd8:	2c f4       	brge	.+10     	; 0xbe4 <Calc_Start+0x9e>
		__ticks = 1;
     bda:	81 e0       	ldi	r24, 0x01	; 1
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	9e 83       	std	Y+6, r25	; 0x06
     be0:	8d 83       	std	Y+5, r24	; 0x05
     be2:	3f c0       	rjmp	.+126    	; 0xc62 <Calc_Start+0x11c>
	else if (__tmp > 65535)
     be4:	6f 81       	ldd	r22, Y+7	; 0x07
     be6:	78 85       	ldd	r23, Y+8	; 0x08
     be8:	89 85       	ldd	r24, Y+9	; 0x09
     bea:	9a 85       	ldd	r25, Y+10	; 0x0a
     bec:	20 e0       	ldi	r18, 0x00	; 0
     bee:	3f ef       	ldi	r19, 0xFF	; 255
     bf0:	4f e7       	ldi	r20, 0x7F	; 127
     bf2:	57 e4       	ldi	r21, 0x47	; 71
     bf4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     bf8:	18 16       	cp	r1, r24
     bfa:	4c f5       	brge	.+82     	; 0xc4e <Calc_Start+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bfc:	6b 85       	ldd	r22, Y+11	; 0x0b
     bfe:	7c 85       	ldd	r23, Y+12	; 0x0c
     c00:	8d 85       	ldd	r24, Y+13	; 0x0d
     c02:	9e 85       	ldd	r25, Y+14	; 0x0e
     c04:	20 e0       	ldi	r18, 0x00	; 0
     c06:	30 e0       	ldi	r19, 0x00	; 0
     c08:	40 e2       	ldi	r20, 0x20	; 32
     c0a:	51 e4       	ldi	r21, 0x41	; 65
     c0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c10:	dc 01       	movw	r26, r24
     c12:	cb 01       	movw	r24, r22
     c14:	bc 01       	movw	r22, r24
     c16:	cd 01       	movw	r24, r26
     c18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c1c:	dc 01       	movw	r26, r24
     c1e:	cb 01       	movw	r24, r22
     c20:	9e 83       	std	Y+6, r25	; 0x06
     c22:	8d 83       	std	Y+5, r24	; 0x05
     c24:	0f c0       	rjmp	.+30     	; 0xc44 <Calc_Start+0xfe>
     c26:	89 e1       	ldi	r24, 0x19	; 25
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	9c 83       	std	Y+4, r25	; 0x04
     c2c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c2e:	8b 81       	ldd	r24, Y+3	; 0x03
     c30:	9c 81       	ldd	r25, Y+4	; 0x04
     c32:	01 97       	sbiw	r24, 0x01	; 1
     c34:	f1 f7       	brne	.-4      	; 0xc32 <Calc_Start+0xec>
     c36:	9c 83       	std	Y+4, r25	; 0x04
     c38:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c3a:	8d 81       	ldd	r24, Y+5	; 0x05
     c3c:	9e 81       	ldd	r25, Y+6	; 0x06
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	9e 83       	std	Y+6, r25	; 0x06
     c42:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c44:	8d 81       	ldd	r24, Y+5	; 0x05
     c46:	9e 81       	ldd	r25, Y+6	; 0x06
     c48:	00 97       	sbiw	r24, 0x00	; 0
     c4a:	69 f7       	brne	.-38     	; 0xc26 <Calc_Start+0xe0>
     c4c:	14 c0       	rjmp	.+40     	; 0xc76 <Calc_Start+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c4e:	6f 81       	ldd	r22, Y+7	; 0x07
     c50:	78 85       	ldd	r23, Y+8	; 0x08
     c52:	89 85       	ldd	r24, Y+9	; 0x09
     c54:	9a 85       	ldd	r25, Y+10	; 0x0a
     c56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c5a:	dc 01       	movw	r26, r24
     c5c:	cb 01       	movw	r24, r22
     c5e:	9e 83       	std	Y+6, r25	; 0x06
     c60:	8d 83       	std	Y+5, r24	; 0x05
     c62:	8d 81       	ldd	r24, Y+5	; 0x05
     c64:	9e 81       	ldd	r25, Y+6	; 0x06
     c66:	9a 83       	std	Y+2, r25	; 0x02
     c68:	89 83       	std	Y+1, r24	; 0x01
     c6a:	89 81       	ldd	r24, Y+1	; 0x01
     c6c:	9a 81       	ldd	r25, Y+2	; 0x02
     c6e:	01 97       	sbiw	r24, 0x01	; 1
     c70:	f1 f7       	brne	.-4      	; 0xc6e <Calc_Start+0x128>
     c72:	9a 83       	std	Y+2, r25	; 0x02
     c74:	89 83       	std	Y+1, r24	; 0x01

    _delay_ms(900);
    LCD_enuSendCommand(0x01);
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	0e 94 52 11 	call	0x22a4	; 0x22a4 <LCD_enuSendCommand>
    return DIO_OK;
     c7c:	80 e0       	ldi	r24, 0x00	; 0
}
     c7e:	2e 96       	adiw	r28, 0x0e	; 14
     c80:	0f b6       	in	r0, 0x3f	; 63
     c82:	f8 94       	cli
     c84:	de bf       	out	0x3e, r29	; 62
     c86:	0f be       	out	0x3f, r0	; 63
     c88:	cd bf       	out	0x3d, r28	; 61
     c8a:	cf 91       	pop	r28
     c8c:	df 91       	pop	r29
     c8e:	08 95       	ret

00000c90 <Calc_Error>:

ES_t Calc_Error() {
     c90:	df 93       	push	r29
     c92:	cf 93       	push	r28
     c94:	cd b7       	in	r28, 0x3d	; 61
     c96:	de b7       	in	r29, 0x3e	; 62
    LCD_enuSendData('E');
     c98:	85 e4       	ldi	r24, 0x45	; 69
     c9a:	0e 94 3c 11 	call	0x2278	; 0x2278 <LCD_enuSendData>
    LCD_enuSendData('R');
     c9e:	82 e5       	ldi	r24, 0x52	; 82
     ca0:	0e 94 3c 11 	call	0x2278	; 0x2278 <LCD_enuSendData>
    LCD_enuSendData('R');
     ca4:	82 e5       	ldi	r24, 0x52	; 82
     ca6:	0e 94 3c 11 	call	0x2278	; 0x2278 <LCD_enuSendData>
    LCD_enuSendData('O');
     caa:	8f e4       	ldi	r24, 0x4F	; 79
     cac:	0e 94 3c 11 	call	0x2278	; 0x2278 <LCD_enuSendData>
    LCD_enuSendData('R');
     cb0:	82 e5       	ldi	r24, 0x52	; 82
     cb2:	0e 94 3c 11 	call	0x2278	; 0x2278 <LCD_enuSendData>
    return DIO_OK;
     cb6:	80 e0       	ldi	r24, 0x00	; 0
}
     cb8:	cf 91       	pop	r28
     cba:	df 91       	pop	r29
     cbc:	08 95       	ret

00000cbe <Calc_ErrorDivision>:

ES_t Calc_ErrorDivision() {
     cbe:	df 93       	push	r29
     cc0:	cf 93       	push	r28
     cc2:	cd b7       	in	r28, 0x3d	; 61
     cc4:	de b7       	in	r29, 0x3e	; 62
    LCD_enuSendData('D');
     cc6:	84 e4       	ldi	r24, 0x44	; 68
     cc8:	0e 94 3c 11 	call	0x2278	; 0x2278 <LCD_enuSendData>
    LCD_enuSendData('I');
     ccc:	89 e4       	ldi	r24, 0x49	; 73
     cce:	0e 94 3c 11 	call	0x2278	; 0x2278 <LCD_enuSendData>
    LCD_enuSendData('V');
     cd2:	86 e5       	ldi	r24, 0x56	; 86
     cd4:	0e 94 3c 11 	call	0x2278	; 0x2278 <LCD_enuSendData>
    LCD_enuSendData('I');
     cd8:	89 e4       	ldi	r24, 0x49	; 73
     cda:	0e 94 3c 11 	call	0x2278	; 0x2278 <LCD_enuSendData>
    LCD_enuSendData('S');
     cde:	83 e5       	ldi	r24, 0x53	; 83
     ce0:	0e 94 3c 11 	call	0x2278	; 0x2278 <LCD_enuSendData>
    LCD_enuSendData('I');
     ce4:	89 e4       	ldi	r24, 0x49	; 73
     ce6:	0e 94 3c 11 	call	0x2278	; 0x2278 <LCD_enuSendData>
    LCD_enuSendData('O');
     cea:	8f e4       	ldi	r24, 0x4F	; 79
     cec:	0e 94 3c 11 	call	0x2278	; 0x2278 <LCD_enuSendData>
    LCD_enuSendData('N');
     cf0:	8e e4       	ldi	r24, 0x4E	; 78
     cf2:	0e 94 3c 11 	call	0x2278	; 0x2278 <LCD_enuSendData>
    LCD_enuSendData('E');
     cf6:	85 e4       	ldi	r24, 0x45	; 69
     cf8:	0e 94 3c 11 	call	0x2278	; 0x2278 <LCD_enuSendData>
    LCD_enuSendData('R');
     cfc:	82 e5       	ldi	r24, 0x52	; 82
     cfe:	0e 94 3c 11 	call	0x2278	; 0x2278 <LCD_enuSendData>
    LCD_enuSendData('R');
     d02:	82 e5       	ldi	r24, 0x52	; 82
     d04:	0e 94 3c 11 	call	0x2278	; 0x2278 <LCD_enuSendData>
    LCD_enuSendData('O');
     d08:	8f e4       	ldi	r24, 0x4F	; 79
     d0a:	0e 94 3c 11 	call	0x2278	; 0x2278 <LCD_enuSendData>
    LCD_enuSendData('R');
     d0e:	82 e5       	ldi	r24, 0x52	; 82
     d10:	0e 94 3c 11 	call	0x2278	; 0x2278 <LCD_enuSendData>
    return DIO_OK;
     d14:	80 e0       	ldi	r24, 0x00	; 0
}
     d16:	cf 91       	pop	r28
     d18:	df 91       	pop	r29
     d1a:	08 95       	ret

00000d1c <precedence>:

int precedence(char op) {
     d1c:	df 93       	push	r29
     d1e:	cf 93       	push	r28
     d20:	00 d0       	rcall	.+0      	; 0xd22 <precedence+0x6>
     d22:	0f 92       	push	r0
     d24:	cd b7       	in	r28, 0x3d	; 61
     d26:	de b7       	in	r29, 0x3e	; 62
     d28:	89 83       	std	Y+1, r24	; 0x01
    if (op == '+' || op == '-') return 1;
     d2a:	89 81       	ldd	r24, Y+1	; 0x01
     d2c:	8b 32       	cpi	r24, 0x2B	; 43
     d2e:	19 f0       	breq	.+6      	; 0xd36 <precedence+0x1a>
     d30:	89 81       	ldd	r24, Y+1	; 0x01
     d32:	8d 32       	cpi	r24, 0x2D	; 45
     d34:	29 f4       	brne	.+10     	; 0xd40 <precedence+0x24>
     d36:	81 e0       	ldi	r24, 0x01	; 1
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	9b 83       	std	Y+3, r25	; 0x03
     d3c:	8a 83       	std	Y+2, r24	; 0x02
     d3e:	0d c0       	rjmp	.+26     	; 0xd5a <precedence+0x3e>
    if (op == '*' || op == '/') return 2;
     d40:	89 81       	ldd	r24, Y+1	; 0x01
     d42:	8a 32       	cpi	r24, 0x2A	; 42
     d44:	19 f0       	breq	.+6      	; 0xd4c <precedence+0x30>
     d46:	89 81       	ldd	r24, Y+1	; 0x01
     d48:	8f 32       	cpi	r24, 0x2F	; 47
     d4a:	29 f4       	brne	.+10     	; 0xd56 <precedence+0x3a>
     d4c:	82 e0       	ldi	r24, 0x02	; 2
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	9b 83       	std	Y+3, r25	; 0x03
     d52:	8a 83       	std	Y+2, r24	; 0x02
     d54:	02 c0       	rjmp	.+4      	; 0xd5a <precedence+0x3e>
    return 0;
     d56:	1b 82       	std	Y+3, r1	; 0x03
     d58:	1a 82       	std	Y+2, r1	; 0x02
     d5a:	8a 81       	ldd	r24, Y+2	; 0x02
     d5c:	9b 81       	ldd	r25, Y+3	; 0x03
}
     d5e:	0f 90       	pop	r0
     d60:	0f 90       	pop	r0
     d62:	0f 90       	pop	r0
     d64:	cf 91       	pop	r28
     d66:	df 91       	pop	r29
     d68:	08 95       	ret

00000d6a <Calc_InfixToPostfix>:

ES_t Calc_InfixToPostfix(char *infix, char *postfix) {
     d6a:	0f 93       	push	r16
     d6c:	1f 93       	push	r17
     d6e:	df 93       	push	r29
     d70:	cf 93       	push	r28
     d72:	cd b7       	in	r28, 0x3d	; 61
     d74:	de b7       	in	r29, 0x3e	; 62
     d76:	c3 5d       	subi	r28, 0xD3	; 211
     d78:	d0 40       	sbci	r29, 0x00	; 0
     d7a:	0f b6       	in	r0, 0x3f	; 63
     d7c:	f8 94       	cli
     d7e:	de bf       	out	0x3e, r29	; 62
     d80:	0f be       	out	0x3f, r0	; 63
     d82:	cd bf       	out	0x3d, r28	; 61
     d84:	fe 01       	movw	r30, r28
     d86:	e0 53       	subi	r30, 0x30	; 48
     d88:	ff 4f       	sbci	r31, 0xFF	; 255
     d8a:	91 83       	std	Z+1, r25	; 0x01
     d8c:	80 83       	st	Z, r24
     d8e:	fe 01       	movw	r30, r28
     d90:	ee 52       	subi	r30, 0x2E	; 46
     d92:	ff 4f       	sbci	r31, 0xFF	; 255
     d94:	71 83       	std	Z+1, r23	; 0x01
     d96:	60 83       	st	Z, r22
    Stack stack;
    initialize(&stack);
     d98:	ce 01       	movw	r24, r28
     d9a:	05 96       	adiw	r24, 0x05	; 5
     d9c:	0e 94 43 13 	call	0x2686	; 0x2686 <initialize>

    int i = 0, j = 0;
     da0:	1c 82       	std	Y+4, r1	; 0x04
     da2:	1b 82       	std	Y+3, r1	; 0x03
     da4:	1a 82       	std	Y+2, r1	; 0x02
     da6:	19 82       	std	Y+1, r1	; 0x01
     da8:	40 c1       	rjmp	.+640    	; 0x102a <Calc_InfixToPostfix+0x2c0>
    char ch;

    while (infix[i] != '\0') {
        ch = infix[i];
     daa:	2b 81       	ldd	r18, Y+3	; 0x03
     dac:	3c 81       	ldd	r19, Y+4	; 0x04
     dae:	fe 01       	movw	r30, r28
     db0:	e0 53       	subi	r30, 0x30	; 48
     db2:	ff 4f       	sbci	r31, 0xFF	; 255
     db4:	80 81       	ld	r24, Z
     db6:	91 81       	ldd	r25, Z+1	; 0x01
     db8:	fc 01       	movw	r30, r24
     dba:	e2 0f       	add	r30, r18
     dbc:	f3 1f       	adc	r31, r19
     dbe:	80 81       	ld	r24, Z
     dc0:	fe 01       	movw	r30, r28
     dc2:	e1 53       	subi	r30, 0x31	; 49
     dc4:	ff 4f       	sbci	r31, 0xFF	; 255
     dc6:	80 83       	st	Z, r24

        if (ch >= '0' && ch <= '9') {
     dc8:	fe 01       	movw	r30, r28
     dca:	e1 53       	subi	r30, 0x31	; 49
     dcc:	ff 4f       	sbci	r31, 0xFF	; 255
     dce:	80 81       	ld	r24, Z
     dd0:	80 33       	cpi	r24, 0x30	; 48
     dd2:	08 f4       	brcc	.+2      	; 0xdd6 <Calc_InfixToPostfix+0x6c>
     dd4:	54 c0       	rjmp	.+168    	; 0xe7e <Calc_InfixToPostfix+0x114>
     dd6:	fe 01       	movw	r30, r28
     dd8:	e1 53       	subi	r30, 0x31	; 49
     dda:	ff 4f       	sbci	r31, 0xFF	; 255
     ddc:	80 81       	ld	r24, Z
     dde:	8a 33       	cpi	r24, 0x3A	; 58
     de0:	08 f0       	brcs	.+2      	; 0xde4 <Calc_InfixToPostfix+0x7a>
     de2:	4d c0       	rjmp	.+154    	; 0xe7e <Calc_InfixToPostfix+0x114>
     de4:	20 c0       	rjmp	.+64     	; 0xe26 <Calc_InfixToPostfix+0xbc>
            while (infix[i] >= '0' && infix[i] <= '9') {
                postfix[j++] = infix[i++];
     de6:	29 81       	ldd	r18, Y+1	; 0x01
     de8:	3a 81       	ldd	r19, Y+2	; 0x02
     dea:	fe 01       	movw	r30, r28
     dec:	ee 52       	subi	r30, 0x2E	; 46
     dee:	ff 4f       	sbci	r31, 0xFF	; 255
     df0:	80 81       	ld	r24, Z
     df2:	91 81       	ldd	r25, Z+1	; 0x01
     df4:	dc 01       	movw	r26, r24
     df6:	a2 0f       	add	r26, r18
     df8:	b3 1f       	adc	r27, r19
     dfa:	2b 81       	ldd	r18, Y+3	; 0x03
     dfc:	3c 81       	ldd	r19, Y+4	; 0x04
     dfe:	fe 01       	movw	r30, r28
     e00:	e0 53       	subi	r30, 0x30	; 48
     e02:	ff 4f       	sbci	r31, 0xFF	; 255
     e04:	80 81       	ld	r24, Z
     e06:	91 81       	ldd	r25, Z+1	; 0x01
     e08:	fc 01       	movw	r30, r24
     e0a:	e2 0f       	add	r30, r18
     e0c:	f3 1f       	adc	r31, r19
     e0e:	80 81       	ld	r24, Z
     e10:	8c 93       	st	X, r24
     e12:	89 81       	ldd	r24, Y+1	; 0x01
     e14:	9a 81       	ldd	r25, Y+2	; 0x02
     e16:	01 96       	adiw	r24, 0x01	; 1
     e18:	9a 83       	std	Y+2, r25	; 0x02
     e1a:	89 83       	std	Y+1, r24	; 0x01
     e1c:	8b 81       	ldd	r24, Y+3	; 0x03
     e1e:	9c 81       	ldd	r25, Y+4	; 0x04
     e20:	01 96       	adiw	r24, 0x01	; 1
     e22:	9c 83       	std	Y+4, r25	; 0x04
     e24:	8b 83       	std	Y+3, r24	; 0x03

    while (infix[i] != '\0') {
        ch = infix[i];

        if (ch >= '0' && ch <= '9') {
            while (infix[i] >= '0' && infix[i] <= '9') {
     e26:	2b 81       	ldd	r18, Y+3	; 0x03
     e28:	3c 81       	ldd	r19, Y+4	; 0x04
     e2a:	fe 01       	movw	r30, r28
     e2c:	e0 53       	subi	r30, 0x30	; 48
     e2e:	ff 4f       	sbci	r31, 0xFF	; 255
     e30:	80 81       	ld	r24, Z
     e32:	91 81       	ldd	r25, Z+1	; 0x01
     e34:	fc 01       	movw	r30, r24
     e36:	e2 0f       	add	r30, r18
     e38:	f3 1f       	adc	r31, r19
     e3a:	80 81       	ld	r24, Z
     e3c:	80 33       	cpi	r24, 0x30	; 48
     e3e:	68 f0       	brcs	.+26     	; 0xe5a <Calc_InfixToPostfix+0xf0>
     e40:	2b 81       	ldd	r18, Y+3	; 0x03
     e42:	3c 81       	ldd	r19, Y+4	; 0x04
     e44:	fe 01       	movw	r30, r28
     e46:	e0 53       	subi	r30, 0x30	; 48
     e48:	ff 4f       	sbci	r31, 0xFF	; 255
     e4a:	80 81       	ld	r24, Z
     e4c:	91 81       	ldd	r25, Z+1	; 0x01
     e4e:	fc 01       	movw	r30, r24
     e50:	e2 0f       	add	r30, r18
     e52:	f3 1f       	adc	r31, r19
     e54:	80 81       	ld	r24, Z
     e56:	8a 33       	cpi	r24, 0x3A	; 58
     e58:	30 f2       	brcs	.-116    	; 0xde6 <Calc_InfixToPostfix+0x7c>
                postfix[j++] = infix[i++];
            }
            postfix[j++] = ' ';
     e5a:	29 81       	ldd	r18, Y+1	; 0x01
     e5c:	3a 81       	ldd	r19, Y+2	; 0x02
     e5e:	fe 01       	movw	r30, r28
     e60:	ee 52       	subi	r30, 0x2E	; 46
     e62:	ff 4f       	sbci	r31, 0xFF	; 255
     e64:	80 81       	ld	r24, Z
     e66:	91 81       	ldd	r25, Z+1	; 0x01
     e68:	fc 01       	movw	r30, r24
     e6a:	e2 0f       	add	r30, r18
     e6c:	f3 1f       	adc	r31, r19
     e6e:	80 e2       	ldi	r24, 0x20	; 32
     e70:	80 83       	st	Z, r24
     e72:	89 81       	ldd	r24, Y+1	; 0x01
     e74:	9a 81       	ldd	r25, Y+2	; 0x02
     e76:	01 96       	adiw	r24, 0x01	; 1
     e78:	9a 83       	std	Y+2, r25	; 0x02
     e7a:	89 83       	std	Y+1, r24	; 0x01
     e7c:	d6 c0       	rjmp	.+428    	; 0x102a <Calc_InfixToPostfix+0x2c0>
        } else if (ch == '(') {
     e7e:	fe 01       	movw	r30, r28
     e80:	e1 53       	subi	r30, 0x31	; 49
     e82:	ff 4f       	sbci	r31, 0xFF	; 255
     e84:	80 81       	ld	r24, Z
     e86:	88 32       	cpi	r24, 0x28	; 40
     e88:	89 f4       	brne	.+34     	; 0xeac <Calc_InfixToPostfix+0x142>
            push(&stack, ch);
     e8a:	fe 01       	movw	r30, r28
     e8c:	e1 53       	subi	r30, 0x31	; 49
     e8e:	ff 4f       	sbci	r31, 0xFF	; 255
     e90:	80 81       	ld	r24, Z
     e92:	28 2f       	mov	r18, r24
     e94:	30 e0       	ldi	r19, 0x00	; 0
     e96:	ce 01       	movw	r24, r28
     e98:	05 96       	adiw	r24, 0x05	; 5
     e9a:	b9 01       	movw	r22, r18
     e9c:	0e 94 97 13 	call	0x272e	; 0x272e <push>
            i++;
     ea0:	8b 81       	ldd	r24, Y+3	; 0x03
     ea2:	9c 81       	ldd	r25, Y+4	; 0x04
     ea4:	01 96       	adiw	r24, 0x01	; 1
     ea6:	9c 83       	std	Y+4, r25	; 0x04
     ea8:	8b 83       	std	Y+3, r24	; 0x03
     eaa:	bf c0       	rjmp	.+382    	; 0x102a <Calc_InfixToPostfix+0x2c0>
        } else if (ch == ')') {
     eac:	fe 01       	movw	r30, r28
     eae:	e1 53       	subi	r30, 0x31	; 49
     eb0:	ff 4f       	sbci	r31, 0xFF	; 255
     eb2:	80 81       	ld	r24, Z
     eb4:	89 32       	cpi	r24, 0x29	; 41
     eb6:	09 f0       	breq	.+2      	; 0xeba <Calc_InfixToPostfix+0x150>
     eb8:	84 c0       	rjmp	.+264    	; 0xfc2 <Calc_InfixToPostfix+0x258>
     eba:	2d c0       	rjmp	.+90     	; 0xf16 <Calc_InfixToPostfix+0x1ac>
            while (!isEmpty(&stack) && stack.arr[stack.top - 1] != '(') {
                pop(&stack, &ch);
     ebc:	9e 01       	movw	r18, r28
     ebe:	21 53       	subi	r18, 0x31	; 49
     ec0:	3f 4f       	sbci	r19, 0xFF	; 255
     ec2:	ce 01       	movw	r24, r28
     ec4:	05 96       	adiw	r24, 0x05	; 5
     ec6:	b9 01       	movw	r22, r18
     ec8:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <pop>
                postfix[j++] = ch;
     ecc:	29 81       	ldd	r18, Y+1	; 0x01
     ece:	3a 81       	ldd	r19, Y+2	; 0x02
     ed0:	fe 01       	movw	r30, r28
     ed2:	ee 52       	subi	r30, 0x2E	; 46
     ed4:	ff 4f       	sbci	r31, 0xFF	; 255
     ed6:	80 81       	ld	r24, Z
     ed8:	91 81       	ldd	r25, Z+1	; 0x01
     eda:	dc 01       	movw	r26, r24
     edc:	a2 0f       	add	r26, r18
     ede:	b3 1f       	adc	r27, r19
     ee0:	fe 01       	movw	r30, r28
     ee2:	e1 53       	subi	r30, 0x31	; 49
     ee4:	ff 4f       	sbci	r31, 0xFF	; 255
     ee6:	80 81       	ld	r24, Z
     ee8:	8c 93       	st	X, r24
     eea:	89 81       	ldd	r24, Y+1	; 0x01
     eec:	9a 81       	ldd	r25, Y+2	; 0x02
     eee:	01 96       	adiw	r24, 0x01	; 1
     ef0:	9a 83       	std	Y+2, r25	; 0x02
     ef2:	89 83       	std	Y+1, r24	; 0x01
                postfix[j++] = ' ';
     ef4:	29 81       	ldd	r18, Y+1	; 0x01
     ef6:	3a 81       	ldd	r19, Y+2	; 0x02
     ef8:	fe 01       	movw	r30, r28
     efa:	ee 52       	subi	r30, 0x2E	; 46
     efc:	ff 4f       	sbci	r31, 0xFF	; 255
     efe:	80 81       	ld	r24, Z
     f00:	91 81       	ldd	r25, Z+1	; 0x01
     f02:	fc 01       	movw	r30, r24
     f04:	e2 0f       	add	r30, r18
     f06:	f3 1f       	adc	r31, r19
     f08:	80 e2       	ldi	r24, 0x20	; 32
     f0a:	80 83       	st	Z, r24
     f0c:	89 81       	ldd	r24, Y+1	; 0x01
     f0e:	9a 81       	ldd	r25, Y+2	; 0x02
     f10:	01 96       	adiw	r24, 0x01	; 1
     f12:	9a 83       	std	Y+2, r25	; 0x02
     f14:	89 83       	std	Y+1, r24	; 0x01
            postfix[j++] = ' ';
        } else if (ch == '(') {
            push(&stack, ch);
            i++;
        } else if (ch == ')') {
            while (!isEmpty(&stack) && stack.arr[stack.top - 1] != '(') {
     f16:	ce 01       	movw	r24, r28
     f18:	05 96       	adiw	r24, 0x05	; 5
     f1a:	0e 94 77 13 	call	0x26ee	; 0x26ee <isEmpty>
     f1e:	00 97       	sbiw	r24, 0x00	; 0
     f20:	a9 f4       	brne	.+42     	; 0xf4c <Calc_InfixToPostfix+0x1e2>
     f22:	fe 01       	movw	r30, r28
     f24:	e3 53       	subi	r30, 0x33	; 51
     f26:	ff 4f       	sbci	r31, 0xFF	; 255
     f28:	80 81       	ld	r24, Z
     f2a:	91 81       	ldd	r25, Z+1	; 0x01
     f2c:	01 97       	sbiw	r24, 0x01	; 1
     f2e:	9c 01       	movw	r18, r24
     f30:	22 0f       	add	r18, r18
     f32:	33 1f       	adc	r19, r19
     f34:	ce 01       	movw	r24, r28
     f36:	01 96       	adiw	r24, 0x01	; 1
     f38:	82 0f       	add	r24, r18
     f3a:	93 1f       	adc	r25, r19
     f3c:	fc 01       	movw	r30, r24
     f3e:	34 96       	adiw	r30, 0x04	; 4
     f40:	80 81       	ld	r24, Z
     f42:	91 81       	ldd	r25, Z+1	; 0x01
     f44:	88 32       	cpi	r24, 0x28	; 40
     f46:	91 05       	cpc	r25, r1
     f48:	09 f0       	breq	.+2      	; 0xf4c <Calc_InfixToPostfix+0x1e2>
     f4a:	b8 cf       	rjmp	.-144    	; 0xebc <Calc_InfixToPostfix+0x152>
                pop(&stack, &ch);
                postfix[j++] = ch;
                postfix[j++] = ' ';
            }
            pop(&stack, &ch);
     f4c:	9e 01       	movw	r18, r28
     f4e:	21 53       	subi	r18, 0x31	; 49
     f50:	3f 4f       	sbci	r19, 0xFF	; 255
     f52:	ce 01       	movw	r24, r28
     f54:	05 96       	adiw	r24, 0x05	; 5
     f56:	b9 01       	movw	r22, r18
     f58:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <pop>
            i++;
     f5c:	8b 81       	ldd	r24, Y+3	; 0x03
     f5e:	9c 81       	ldd	r25, Y+4	; 0x04
     f60:	01 96       	adiw	r24, 0x01	; 1
     f62:	9c 83       	std	Y+4, r25	; 0x04
     f64:	8b 83       	std	Y+3, r24	; 0x03
     f66:	61 c0       	rjmp	.+194    	; 0x102a <Calc_InfixToPostfix+0x2c0>
        } else {
            while (!isEmpty(&stack) && precedence(stack.arr[stack.top - 1]) >= precedence(ch)) {
                pop(&stack, &ch);
     f68:	9e 01       	movw	r18, r28
     f6a:	21 53       	subi	r18, 0x31	; 49
     f6c:	3f 4f       	sbci	r19, 0xFF	; 255
     f6e:	ce 01       	movw	r24, r28
     f70:	05 96       	adiw	r24, 0x05	; 5
     f72:	b9 01       	movw	r22, r18
     f74:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <pop>
                postfix[j++] = ch;
     f78:	29 81       	ldd	r18, Y+1	; 0x01
     f7a:	3a 81       	ldd	r19, Y+2	; 0x02
     f7c:	fe 01       	movw	r30, r28
     f7e:	ee 52       	subi	r30, 0x2E	; 46
     f80:	ff 4f       	sbci	r31, 0xFF	; 255
     f82:	80 81       	ld	r24, Z
     f84:	91 81       	ldd	r25, Z+1	; 0x01
     f86:	dc 01       	movw	r26, r24
     f88:	a2 0f       	add	r26, r18
     f8a:	b3 1f       	adc	r27, r19
     f8c:	fe 01       	movw	r30, r28
     f8e:	e1 53       	subi	r30, 0x31	; 49
     f90:	ff 4f       	sbci	r31, 0xFF	; 255
     f92:	80 81       	ld	r24, Z
     f94:	8c 93       	st	X, r24
     f96:	89 81       	ldd	r24, Y+1	; 0x01
     f98:	9a 81       	ldd	r25, Y+2	; 0x02
     f9a:	01 96       	adiw	r24, 0x01	; 1
     f9c:	9a 83       	std	Y+2, r25	; 0x02
     f9e:	89 83       	std	Y+1, r24	; 0x01
                postfix[j++] = ' ';
     fa0:	29 81       	ldd	r18, Y+1	; 0x01
     fa2:	3a 81       	ldd	r19, Y+2	; 0x02
     fa4:	fe 01       	movw	r30, r28
     fa6:	ee 52       	subi	r30, 0x2E	; 46
     fa8:	ff 4f       	sbci	r31, 0xFF	; 255
     faa:	80 81       	ld	r24, Z
     fac:	91 81       	ldd	r25, Z+1	; 0x01
     fae:	fc 01       	movw	r30, r24
     fb0:	e2 0f       	add	r30, r18
     fb2:	f3 1f       	adc	r31, r19
     fb4:	80 e2       	ldi	r24, 0x20	; 32
     fb6:	80 83       	st	Z, r24
     fb8:	89 81       	ldd	r24, Y+1	; 0x01
     fba:	9a 81       	ldd	r25, Y+2	; 0x02
     fbc:	01 96       	adiw	r24, 0x01	; 1
     fbe:	9a 83       	std	Y+2, r25	; 0x02
     fc0:	89 83       	std	Y+1, r24	; 0x01
                postfix[j++] = ' ';
            }
            pop(&stack, &ch);
            i++;
        } else {
            while (!isEmpty(&stack) && precedence(stack.arr[stack.top - 1]) >= precedence(ch)) {
     fc2:	ce 01       	movw	r24, r28
     fc4:	05 96       	adiw	r24, 0x05	; 5
     fc6:	0e 94 77 13 	call	0x26ee	; 0x26ee <isEmpty>
     fca:	00 97       	sbiw	r24, 0x00	; 0
     fcc:	f1 f4       	brne	.+60     	; 0x100a <Calc_InfixToPostfix+0x2a0>
     fce:	fe 01       	movw	r30, r28
     fd0:	e3 53       	subi	r30, 0x33	; 51
     fd2:	ff 4f       	sbci	r31, 0xFF	; 255
     fd4:	80 81       	ld	r24, Z
     fd6:	91 81       	ldd	r25, Z+1	; 0x01
     fd8:	01 97       	sbiw	r24, 0x01	; 1
     fda:	9c 01       	movw	r18, r24
     fdc:	22 0f       	add	r18, r18
     fde:	33 1f       	adc	r19, r19
     fe0:	ce 01       	movw	r24, r28
     fe2:	01 96       	adiw	r24, 0x01	; 1
     fe4:	82 0f       	add	r24, r18
     fe6:	93 1f       	adc	r25, r19
     fe8:	fc 01       	movw	r30, r24
     fea:	34 96       	adiw	r30, 0x04	; 4
     fec:	80 81       	ld	r24, Z
     fee:	91 81       	ldd	r25, Z+1	; 0x01
     ff0:	0e 94 8e 06 	call	0xd1c	; 0xd1c <precedence>
     ff4:	8c 01       	movw	r16, r24
     ff6:	fe 01       	movw	r30, r28
     ff8:	e1 53       	subi	r30, 0x31	; 49
     ffa:	ff 4f       	sbci	r31, 0xFF	; 255
     ffc:	80 81       	ld	r24, Z
     ffe:	0e 94 8e 06 	call	0xd1c	; 0xd1c <precedence>
    1002:	08 17       	cp	r16, r24
    1004:	19 07       	cpc	r17, r25
    1006:	0c f0       	brlt	.+2      	; 0x100a <Calc_InfixToPostfix+0x2a0>
    1008:	af cf       	rjmp	.-162    	; 0xf68 <Calc_InfixToPostfix+0x1fe>
                pop(&stack, &ch);
                postfix[j++] = ch;
                postfix[j++] = ' ';
            }
            push(&stack, ch);
    100a:	fe 01       	movw	r30, r28
    100c:	e1 53       	subi	r30, 0x31	; 49
    100e:	ff 4f       	sbci	r31, 0xFF	; 255
    1010:	80 81       	ld	r24, Z
    1012:	28 2f       	mov	r18, r24
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	ce 01       	movw	r24, r28
    1018:	05 96       	adiw	r24, 0x05	; 5
    101a:	b9 01       	movw	r22, r18
    101c:	0e 94 97 13 	call	0x272e	; 0x272e <push>
            i++;
    1020:	8b 81       	ldd	r24, Y+3	; 0x03
    1022:	9c 81       	ldd	r25, Y+4	; 0x04
    1024:	01 96       	adiw	r24, 0x01	; 1
    1026:	9c 83       	std	Y+4, r25	; 0x04
    1028:	8b 83       	std	Y+3, r24	; 0x03
    initialize(&stack);

    int i = 0, j = 0;
    char ch;

    while (infix[i] != '\0') {
    102a:	2b 81       	ldd	r18, Y+3	; 0x03
    102c:	3c 81       	ldd	r19, Y+4	; 0x04
    102e:	fe 01       	movw	r30, r28
    1030:	e0 53       	subi	r30, 0x30	; 48
    1032:	ff 4f       	sbci	r31, 0xFF	; 255
    1034:	80 81       	ld	r24, Z
    1036:	91 81       	ldd	r25, Z+1	; 0x01
    1038:	fc 01       	movw	r30, r24
    103a:	e2 0f       	add	r30, r18
    103c:	f3 1f       	adc	r31, r19
    103e:	80 81       	ld	r24, Z
    1040:	88 23       	and	r24, r24
    1042:	09 f0       	breq	.+2      	; 0x1046 <Calc_InfixToPostfix+0x2dc>
    1044:	b2 ce       	rjmp	.-668    	; 0xdaa <Calc_InfixToPostfix+0x40>
    1046:	2d c0       	rjmp	.+90     	; 0x10a2 <Calc_InfixToPostfix+0x338>
            i++;
        }
    }

    while (!isEmpty(&stack)) {
        pop(&stack, &ch);
    1048:	9e 01       	movw	r18, r28
    104a:	21 53       	subi	r18, 0x31	; 49
    104c:	3f 4f       	sbci	r19, 0xFF	; 255
    104e:	ce 01       	movw	r24, r28
    1050:	05 96       	adiw	r24, 0x05	; 5
    1052:	b9 01       	movw	r22, r18
    1054:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <pop>
        postfix[j++] = ch;
    1058:	29 81       	ldd	r18, Y+1	; 0x01
    105a:	3a 81       	ldd	r19, Y+2	; 0x02
    105c:	fe 01       	movw	r30, r28
    105e:	ee 52       	subi	r30, 0x2E	; 46
    1060:	ff 4f       	sbci	r31, 0xFF	; 255
    1062:	80 81       	ld	r24, Z
    1064:	91 81       	ldd	r25, Z+1	; 0x01
    1066:	dc 01       	movw	r26, r24
    1068:	a2 0f       	add	r26, r18
    106a:	b3 1f       	adc	r27, r19
    106c:	fe 01       	movw	r30, r28
    106e:	e1 53       	subi	r30, 0x31	; 49
    1070:	ff 4f       	sbci	r31, 0xFF	; 255
    1072:	80 81       	ld	r24, Z
    1074:	8c 93       	st	X, r24
    1076:	89 81       	ldd	r24, Y+1	; 0x01
    1078:	9a 81       	ldd	r25, Y+2	; 0x02
    107a:	01 96       	adiw	r24, 0x01	; 1
    107c:	9a 83       	std	Y+2, r25	; 0x02
    107e:	89 83       	std	Y+1, r24	; 0x01
        postfix[j++] = ' ';
    1080:	29 81       	ldd	r18, Y+1	; 0x01
    1082:	3a 81       	ldd	r19, Y+2	; 0x02
    1084:	fe 01       	movw	r30, r28
    1086:	ee 52       	subi	r30, 0x2E	; 46
    1088:	ff 4f       	sbci	r31, 0xFF	; 255
    108a:	80 81       	ld	r24, Z
    108c:	91 81       	ldd	r25, Z+1	; 0x01
    108e:	fc 01       	movw	r30, r24
    1090:	e2 0f       	add	r30, r18
    1092:	f3 1f       	adc	r31, r19
    1094:	80 e2       	ldi	r24, 0x20	; 32
    1096:	80 83       	st	Z, r24
    1098:	89 81       	ldd	r24, Y+1	; 0x01
    109a:	9a 81       	ldd	r25, Y+2	; 0x02
    109c:	01 96       	adiw	r24, 0x01	; 1
    109e:	9a 83       	std	Y+2, r25	; 0x02
    10a0:	89 83       	std	Y+1, r24	; 0x01
            push(&stack, ch);
            i++;
        }
    }

    while (!isEmpty(&stack)) {
    10a2:	ce 01       	movw	r24, r28
    10a4:	05 96       	adiw	r24, 0x05	; 5
    10a6:	0e 94 77 13 	call	0x26ee	; 0x26ee <isEmpty>
    10aa:	00 97       	sbiw	r24, 0x00	; 0
    10ac:	69 f2       	breq	.-102    	; 0x1048 <Calc_InfixToPostfix+0x2de>
        pop(&stack, &ch);
        postfix[j++] = ch;
        postfix[j++] = ' ';
    }

    postfix[j] = '\0';
    10ae:	29 81       	ldd	r18, Y+1	; 0x01
    10b0:	3a 81       	ldd	r19, Y+2	; 0x02
    10b2:	fe 01       	movw	r30, r28
    10b4:	ee 52       	subi	r30, 0x2E	; 46
    10b6:	ff 4f       	sbci	r31, 0xFF	; 255
    10b8:	80 81       	ld	r24, Z
    10ba:	91 81       	ldd	r25, Z+1	; 0x01
    10bc:	fc 01       	movw	r30, r24
    10be:	e2 0f       	add	r30, r18
    10c0:	f3 1f       	adc	r31, r19
    10c2:	10 82       	st	Z, r1
    return DIO_OK;
    10c4:	80 e0       	ldi	r24, 0x00	; 0
}
    10c6:	cd 52       	subi	r28, 0x2D	; 45
    10c8:	df 4f       	sbci	r29, 0xFF	; 255
    10ca:	0f b6       	in	r0, 0x3f	; 63
    10cc:	f8 94       	cli
    10ce:	de bf       	out	0x3e, r29	; 62
    10d0:	0f be       	out	0x3f, r0	; 63
    10d2:	cd bf       	out	0x3d, r28	; 61
    10d4:	cf 91       	pop	r28
    10d6:	df 91       	pop	r29
    10d8:	1f 91       	pop	r17
    10da:	0f 91       	pop	r16
    10dc:	08 95       	ret

000010de <Calc_EvaluatePostfix>:

ES_t Calc_EvaluatePostfix(char *postfix, s32 *result) {
    10de:	df 93       	push	r29
    10e0:	cf 93       	push	r28
    10e2:	cd b7       	in	r28, 0x3d	; 61
    10e4:	de b7       	in	r29, 0x3e	; 62
    10e6:	c0 5e       	subi	r28, 0xE0	; 224
    10e8:	d0 40       	sbci	r29, 0x00	; 0
    10ea:	0f b6       	in	r0, 0x3f	; 63
    10ec:	f8 94       	cli
    10ee:	de bf       	out	0x3e, r29	; 62
    10f0:	0f be       	out	0x3f, r0	; 63
    10f2:	cd bf       	out	0x3d, r28	; 61
    10f4:	fe 01       	movw	r30, r28
    10f6:	e6 52       	subi	r30, 0x26	; 38
    10f8:	ff 4f       	sbci	r31, 0xFF	; 255
    10fa:	91 83       	std	Z+1, r25	; 0x01
    10fc:	80 83       	st	Z, r24
    10fe:	fe 01       	movw	r30, r28
    1100:	e4 52       	subi	r30, 0x24	; 36
    1102:	ff 4f       	sbci	r31, 0xFF	; 255
    1104:	71 83       	std	Z+1, r23	; 0x01
    1106:	60 83       	st	Z, r22
    Stack stack;
    initialize(&stack);
    1108:	ce 01       	movw	r24, r28
    110a:	08 96       	adiw	r24, 0x08	; 8
    110c:	0e 94 43 13 	call	0x2686	; 0x2686 <initialize>

    int i = 0;
    1110:	1f 82       	std	Y+7, r1	; 0x07
    1112:	1e 82       	std	Y+6, r1	; 0x06
    1114:	42 c1       	rjmp	.+644    	; 0x139a <Calc_EvaluatePostfix+0x2bc>
    char ch;
    s32 op1, op2, num;

    while (postfix[i] != '\0') {
        ch = postfix[i];
    1116:	2e 81       	ldd	r18, Y+6	; 0x06
    1118:	3f 81       	ldd	r19, Y+7	; 0x07
    111a:	fe 01       	movw	r30, r28
    111c:	e6 52       	subi	r30, 0x26	; 38
    111e:	ff 4f       	sbci	r31, 0xFF	; 255
    1120:	80 81       	ld	r24, Z
    1122:	91 81       	ldd	r25, Z+1	; 0x01
    1124:	fc 01       	movw	r30, r24
    1126:	e2 0f       	add	r30, r18
    1128:	f3 1f       	adc	r31, r19
    112a:	80 81       	ld	r24, Z
    112c:	8d 83       	std	Y+5, r24	; 0x05

        if (ch >= '0' && ch <= '9') {
    112e:	8d 81       	ldd	r24, Y+5	; 0x05
    1130:	80 33       	cpi	r24, 0x30	; 48
    1132:	08 f4       	brcc	.+2      	; 0x1136 <Calc_EvaluatePostfix+0x58>
    1134:	59 c0       	rjmp	.+178    	; 0x11e8 <Calc_EvaluatePostfix+0x10a>
    1136:	8d 81       	ldd	r24, Y+5	; 0x05
    1138:	8a 33       	cpi	r24, 0x3A	; 58
    113a:	08 f0       	brcs	.+2      	; 0x113e <Calc_EvaluatePostfix+0x60>
    113c:	55 c0       	rjmp	.+170    	; 0x11e8 <Calc_EvaluatePostfix+0x10a>
            num = 0;
    113e:	19 82       	std	Y+1, r1	; 0x01
    1140:	1a 82       	std	Y+2, r1	; 0x02
    1142:	1b 82       	std	Y+3, r1	; 0x03
    1144:	1c 82       	std	Y+4, r1	; 0x04
    1146:	2d c0       	rjmp	.+90     	; 0x11a2 <Calc_EvaluatePostfix+0xc4>
            while (postfix[i] >= '0' && postfix[i] <= '9') {
                num = num * 10 + (postfix[i++] - '0');
    1148:	89 81       	ldd	r24, Y+1	; 0x01
    114a:	9a 81       	ldd	r25, Y+2	; 0x02
    114c:	ab 81       	ldd	r26, Y+3	; 0x03
    114e:	bc 81       	ldd	r27, Y+4	; 0x04
    1150:	2a e0       	ldi	r18, 0x0A	; 10
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	40 e0       	ldi	r20, 0x00	; 0
    1156:	50 e0       	ldi	r21, 0x00	; 0
    1158:	bc 01       	movw	r22, r24
    115a:	cd 01       	movw	r24, r26
    115c:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <__mulsi3>
    1160:	ab 01       	movw	r20, r22
    1162:	bc 01       	movw	r22, r24
    1164:	2e 81       	ldd	r18, Y+6	; 0x06
    1166:	3f 81       	ldd	r19, Y+7	; 0x07
    1168:	fe 01       	movw	r30, r28
    116a:	e6 52       	subi	r30, 0x26	; 38
    116c:	ff 4f       	sbci	r31, 0xFF	; 255
    116e:	80 81       	ld	r24, Z
    1170:	91 81       	ldd	r25, Z+1	; 0x01
    1172:	fc 01       	movw	r30, r24
    1174:	e2 0f       	add	r30, r18
    1176:	f3 1f       	adc	r31, r19
    1178:	80 81       	ld	r24, Z
    117a:	88 2f       	mov	r24, r24
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	c0 97       	sbiw	r24, 0x30	; 48
    1180:	aa 27       	eor	r26, r26
    1182:	97 fd       	sbrc	r25, 7
    1184:	a0 95       	com	r26
    1186:	ba 2f       	mov	r27, r26
    1188:	84 0f       	add	r24, r20
    118a:	95 1f       	adc	r25, r21
    118c:	a6 1f       	adc	r26, r22
    118e:	b7 1f       	adc	r27, r23
    1190:	89 83       	std	Y+1, r24	; 0x01
    1192:	9a 83       	std	Y+2, r25	; 0x02
    1194:	ab 83       	std	Y+3, r26	; 0x03
    1196:	bc 83       	std	Y+4, r27	; 0x04
    1198:	8e 81       	ldd	r24, Y+6	; 0x06
    119a:	9f 81       	ldd	r25, Y+7	; 0x07
    119c:	01 96       	adiw	r24, 0x01	; 1
    119e:	9f 83       	std	Y+7, r25	; 0x07
    11a0:	8e 83       	std	Y+6, r24	; 0x06
    while (postfix[i] != '\0') {
        ch = postfix[i];

        if (ch >= '0' && ch <= '9') {
            num = 0;
            while (postfix[i] >= '0' && postfix[i] <= '9') {
    11a2:	2e 81       	ldd	r18, Y+6	; 0x06
    11a4:	3f 81       	ldd	r19, Y+7	; 0x07
    11a6:	fe 01       	movw	r30, r28
    11a8:	e6 52       	subi	r30, 0x26	; 38
    11aa:	ff 4f       	sbci	r31, 0xFF	; 255
    11ac:	80 81       	ld	r24, Z
    11ae:	91 81       	ldd	r25, Z+1	; 0x01
    11b0:	fc 01       	movw	r30, r24
    11b2:	e2 0f       	add	r30, r18
    11b4:	f3 1f       	adc	r31, r19
    11b6:	80 81       	ld	r24, Z
    11b8:	80 33       	cpi	r24, 0x30	; 48
    11ba:	70 f0       	brcs	.+28     	; 0x11d8 <Calc_EvaluatePostfix+0xfa>
    11bc:	2e 81       	ldd	r18, Y+6	; 0x06
    11be:	3f 81       	ldd	r19, Y+7	; 0x07
    11c0:	fe 01       	movw	r30, r28
    11c2:	e6 52       	subi	r30, 0x26	; 38
    11c4:	ff 4f       	sbci	r31, 0xFF	; 255
    11c6:	80 81       	ld	r24, Z
    11c8:	91 81       	ldd	r25, Z+1	; 0x01
    11ca:	fc 01       	movw	r30, r24
    11cc:	e2 0f       	add	r30, r18
    11ce:	f3 1f       	adc	r31, r19
    11d0:	80 81       	ld	r24, Z
    11d2:	8a 33       	cpi	r24, 0x3A	; 58
    11d4:	08 f4       	brcc	.+2      	; 0x11d8 <Calc_EvaluatePostfix+0xfa>
    11d6:	b8 cf       	rjmp	.-144    	; 0x1148 <Calc_EvaluatePostfix+0x6a>
                num = num * 10 + (postfix[i++] - '0');
            }
            push(&stack, num);
    11d8:	29 81       	ldd	r18, Y+1	; 0x01
    11da:	3a 81       	ldd	r19, Y+2	; 0x02
    11dc:	ce 01       	movw	r24, r28
    11de:	08 96       	adiw	r24, 0x08	; 8
    11e0:	b9 01       	movw	r22, r18
    11e2:	0e 94 97 13 	call	0x272e	; 0x272e <push>
    11e6:	d9 c0       	rjmp	.+434    	; 0x139a <Calc_EvaluatePostfix+0x2bc>
        } else if (ch == ' ') {
    11e8:	8d 81       	ldd	r24, Y+5	; 0x05
    11ea:	80 32       	cpi	r24, 0x20	; 32
    11ec:	31 f4       	brne	.+12     	; 0x11fa <Calc_EvaluatePostfix+0x11c>
            i++;
    11ee:	8e 81       	ldd	r24, Y+6	; 0x06
    11f0:	9f 81       	ldd	r25, Y+7	; 0x07
    11f2:	01 96       	adiw	r24, 0x01	; 1
    11f4:	9f 83       	std	Y+7, r25	; 0x07
    11f6:	8e 83       	std	Y+6, r24	; 0x06
    11f8:	d0 c0       	rjmp	.+416    	; 0x139a <Calc_EvaluatePostfix+0x2bc>
        } else {
            pop(&stack, &op2);
    11fa:	9e 01       	movw	r18, r28
    11fc:	2a 52       	subi	r18, 0x2A	; 42
    11fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1200:	ce 01       	movw	r24, r28
    1202:	08 96       	adiw	r24, 0x08	; 8
    1204:	b9 01       	movw	r22, r18
    1206:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <pop>
            pop(&stack, &op1);
    120a:	9e 01       	movw	r18, r28
    120c:	2e 52       	subi	r18, 0x2E	; 46
    120e:	3f 4f       	sbci	r19, 0xFF	; 255
    1210:	ce 01       	movw	r24, r28
    1212:	08 96       	adiw	r24, 0x08	; 8
    1214:	b9 01       	movw	r22, r18
    1216:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <pop>

            switch (ch) {
    121a:	8d 81       	ldd	r24, Y+5	; 0x05
    121c:	28 2f       	mov	r18, r24
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	c1 52       	subi	r28, 0x21	; 33
    1222:	df 4f       	sbci	r29, 0xFF	; 255
    1224:	39 83       	std	Y+1, r19	; 0x01
    1226:	28 83       	st	Y, r18
    1228:	cf 5d       	subi	r28, 0xDF	; 223
    122a:	d0 40       	sbci	r29, 0x00	; 0
    122c:	c1 52       	subi	r28, 0x21	; 33
    122e:	df 4f       	sbci	r29, 0xFF	; 255
    1230:	48 81       	ld	r20, Y
    1232:	59 81       	ldd	r21, Y+1	; 0x01
    1234:	cf 5d       	subi	r28, 0xDF	; 223
    1236:	d0 40       	sbci	r29, 0x00	; 0
    1238:	4b 32       	cpi	r20, 0x2B	; 43
    123a:	51 05       	cpc	r21, r1
    123c:	41 f1       	breq	.+80     	; 0x128e <Calc_EvaluatePostfix+0x1b0>
    123e:	c1 52       	subi	r28, 0x21	; 33
    1240:	df 4f       	sbci	r29, 0xFF	; 255
    1242:	88 81       	ld	r24, Y
    1244:	99 81       	ldd	r25, Y+1	; 0x01
    1246:	cf 5d       	subi	r28, 0xDF	; 223
    1248:	d0 40       	sbci	r29, 0x00	; 0
    124a:	8c 32       	cpi	r24, 0x2C	; 44
    124c:	91 05       	cpc	r25, r1
    124e:	5c f4       	brge	.+22     	; 0x1266 <Calc_EvaluatePostfix+0x188>
    1250:	c1 52       	subi	r28, 0x21	; 33
    1252:	df 4f       	sbci	r29, 0xFF	; 255
    1254:	28 81       	ld	r18, Y
    1256:	39 81       	ldd	r19, Y+1	; 0x01
    1258:	cf 5d       	subi	r28, 0xDF	; 223
    125a:	d0 40       	sbci	r29, 0x00	; 0
    125c:	2a 32       	cpi	r18, 0x2A	; 42
    125e:	31 05       	cpc	r19, r1
    1260:	09 f4       	brne	.+2      	; 0x1264 <Calc_EvaluatePostfix+0x186>
    1262:	47 c0       	rjmp	.+142    	; 0x12f2 <Calc_EvaluatePostfix+0x214>
    1264:	8e c0       	rjmp	.+284    	; 0x1382 <Calc_EvaluatePostfix+0x2a4>
    1266:	c1 52       	subi	r28, 0x21	; 33
    1268:	df 4f       	sbci	r29, 0xFF	; 255
    126a:	48 81       	ld	r20, Y
    126c:	59 81       	ldd	r21, Y+1	; 0x01
    126e:	cf 5d       	subi	r28, 0xDF	; 223
    1270:	d0 40       	sbci	r29, 0x00	; 0
    1272:	4d 32       	cpi	r20, 0x2D	; 45
    1274:	51 05       	cpc	r21, r1
    1276:	19 f1       	breq	.+70     	; 0x12be <Calc_EvaluatePostfix+0x1e0>
    1278:	c1 52       	subi	r28, 0x21	; 33
    127a:	df 4f       	sbci	r29, 0xFF	; 255
    127c:	88 81       	ld	r24, Y
    127e:	99 81       	ldd	r25, Y+1	; 0x01
    1280:	cf 5d       	subi	r28, 0xDF	; 223
    1282:	d0 40       	sbci	r29, 0x00	; 0
    1284:	8f 32       	cpi	r24, 0x2F	; 47
    1286:	91 05       	cpc	r25, r1
    1288:	09 f4       	brne	.+2      	; 0x128c <Calc_EvaluatePostfix+0x1ae>
    128a:	4e c0       	rjmp	.+156    	; 0x1328 <Calc_EvaluatePostfix+0x24a>
    128c:	7a c0       	rjmp	.+244    	; 0x1382 <Calc_EvaluatePostfix+0x2a4>
                case '+':
                    push(&stack, op1 + op2);
    128e:	fe 01       	movw	r30, r28
    1290:	ee 52       	subi	r30, 0x2E	; 46
    1292:	ff 4f       	sbci	r31, 0xFF	; 255
    1294:	80 81       	ld	r24, Z
    1296:	91 81       	ldd	r25, Z+1	; 0x01
    1298:	a2 81       	ldd	r26, Z+2	; 0x02
    129a:	b3 81       	ldd	r27, Z+3	; 0x03
    129c:	9c 01       	movw	r18, r24
    129e:	fe 01       	movw	r30, r28
    12a0:	ea 52       	subi	r30, 0x2A	; 42
    12a2:	ff 4f       	sbci	r31, 0xFF	; 255
    12a4:	80 81       	ld	r24, Z
    12a6:	91 81       	ldd	r25, Z+1	; 0x01
    12a8:	a2 81       	ldd	r26, Z+2	; 0x02
    12aa:	b3 81       	ldd	r27, Z+3	; 0x03
    12ac:	82 0f       	add	r24, r18
    12ae:	93 1f       	adc	r25, r19
    12b0:	9c 01       	movw	r18, r24
    12b2:	ce 01       	movw	r24, r28
    12b4:	08 96       	adiw	r24, 0x08	; 8
    12b6:	b9 01       	movw	r22, r18
    12b8:	0e 94 97 13 	call	0x272e	; 0x272e <push>
    12bc:	69 c0       	rjmp	.+210    	; 0x1390 <Calc_EvaluatePostfix+0x2b2>
                    break;
                case '-':
                    push(&stack, op1 - op2);
    12be:	fe 01       	movw	r30, r28
    12c0:	ee 52       	subi	r30, 0x2E	; 46
    12c2:	ff 4f       	sbci	r31, 0xFF	; 255
    12c4:	80 81       	ld	r24, Z
    12c6:	91 81       	ldd	r25, Z+1	; 0x01
    12c8:	a2 81       	ldd	r26, Z+2	; 0x02
    12ca:	b3 81       	ldd	r27, Z+3	; 0x03
    12cc:	9c 01       	movw	r18, r24
    12ce:	fe 01       	movw	r30, r28
    12d0:	ea 52       	subi	r30, 0x2A	; 42
    12d2:	ff 4f       	sbci	r31, 0xFF	; 255
    12d4:	80 81       	ld	r24, Z
    12d6:	91 81       	ldd	r25, Z+1	; 0x01
    12d8:	a2 81       	ldd	r26, Z+2	; 0x02
    12da:	b3 81       	ldd	r27, Z+3	; 0x03
    12dc:	a9 01       	movw	r20, r18
    12de:	48 1b       	sub	r20, r24
    12e0:	59 0b       	sbc	r21, r25
    12e2:	ca 01       	movw	r24, r20
    12e4:	9c 01       	movw	r18, r24
    12e6:	ce 01       	movw	r24, r28
    12e8:	08 96       	adiw	r24, 0x08	; 8
    12ea:	b9 01       	movw	r22, r18
    12ec:	0e 94 97 13 	call	0x272e	; 0x272e <push>
    12f0:	4f c0       	rjmp	.+158    	; 0x1390 <Calc_EvaluatePostfix+0x2b2>
                    break;
                case '*':
                    push(&stack, op1 * op2);
    12f2:	fe 01       	movw	r30, r28
    12f4:	ee 52       	subi	r30, 0x2E	; 46
    12f6:	ff 4f       	sbci	r31, 0xFF	; 255
    12f8:	80 81       	ld	r24, Z
    12fa:	91 81       	ldd	r25, Z+1	; 0x01
    12fc:	a2 81       	ldd	r26, Z+2	; 0x02
    12fe:	b3 81       	ldd	r27, Z+3	; 0x03
    1300:	fe 01       	movw	r30, r28
    1302:	ea 52       	subi	r30, 0x2A	; 42
    1304:	ff 4f       	sbci	r31, 0xFF	; 255
    1306:	20 81       	ld	r18, Z
    1308:	31 81       	ldd	r19, Z+1	; 0x01
    130a:	42 81       	ldd	r20, Z+2	; 0x02
    130c:	53 81       	ldd	r21, Z+3	; 0x03
    130e:	bc 01       	movw	r22, r24
    1310:	cd 01       	movw	r24, r26
    1312:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <__mulsi3>
    1316:	dc 01       	movw	r26, r24
    1318:	cb 01       	movw	r24, r22
    131a:	9c 01       	movw	r18, r24
    131c:	ce 01       	movw	r24, r28
    131e:	08 96       	adiw	r24, 0x08	; 8
    1320:	b9 01       	movw	r22, r18
    1322:	0e 94 97 13 	call	0x272e	; 0x272e <push>
    1326:	34 c0       	rjmp	.+104    	; 0x1390 <Calc_EvaluatePostfix+0x2b2>
                    break;
                case '/':
                    if (op2 != 0) {
    1328:	fe 01       	movw	r30, r28
    132a:	ea 52       	subi	r30, 0x2A	; 42
    132c:	ff 4f       	sbci	r31, 0xFF	; 255
    132e:	80 81       	ld	r24, Z
    1330:	91 81       	ldd	r25, Z+1	; 0x01
    1332:	a2 81       	ldd	r26, Z+2	; 0x02
    1334:	b3 81       	ldd	r27, Z+3	; 0x03
    1336:	00 97       	sbiw	r24, 0x00	; 0
    1338:	a1 05       	cpc	r26, r1
    133a:	b1 05       	cpc	r27, r1
    133c:	d9 f0       	breq	.+54     	; 0x1374 <Calc_EvaluatePostfix+0x296>
                        push(&stack, op1 / op2);
    133e:	fe 01       	movw	r30, r28
    1340:	ee 52       	subi	r30, 0x2E	; 46
    1342:	ff 4f       	sbci	r31, 0xFF	; 255
    1344:	80 81       	ld	r24, Z
    1346:	91 81       	ldd	r25, Z+1	; 0x01
    1348:	a2 81       	ldd	r26, Z+2	; 0x02
    134a:	b3 81       	ldd	r27, Z+3	; 0x03
    134c:	fe 01       	movw	r30, r28
    134e:	ea 52       	subi	r30, 0x2A	; 42
    1350:	ff 4f       	sbci	r31, 0xFF	; 255
    1352:	20 81       	ld	r18, Z
    1354:	31 81       	ldd	r19, Z+1	; 0x01
    1356:	42 81       	ldd	r20, Z+2	; 0x02
    1358:	53 81       	ldd	r21, Z+3	; 0x03
    135a:	bc 01       	movw	r22, r24
    135c:	cd 01       	movw	r24, r26
    135e:	0e 94 6a 15 	call	0x2ad4	; 0x2ad4 <__divmodsi4>
    1362:	da 01       	movw	r26, r20
    1364:	c9 01       	movw	r24, r18
    1366:	9c 01       	movw	r18, r24
    1368:	ce 01       	movw	r24, r28
    136a:	08 96       	adiw	r24, 0x08	; 8
    136c:	b9 01       	movw	r22, r18
    136e:	0e 94 97 13 	call	0x272e	; 0x272e <push>
    1372:	0e c0       	rjmp	.+28     	; 0x1390 <Calc_EvaluatePostfix+0x2b2>
                    } else {
                        return DIO_NOK;
    1374:	51 e0       	ldi	r21, 0x01	; 1
    1376:	c2 52       	subi	r28, 0x22	; 34
    1378:	df 4f       	sbci	r29, 0xFF	; 255
    137a:	58 83       	st	Y, r21
    137c:	ce 5d       	subi	r28, 0xDE	; 222
    137e:	d0 40       	sbci	r29, 0x00	; 0
    1380:	3c c0       	rjmp	.+120    	; 0x13fa <Calc_EvaluatePostfix+0x31c>
                    }
                    break;
                default:
                    return DIO_NOK;
    1382:	81 e0       	ldi	r24, 0x01	; 1
    1384:	c2 52       	subi	r28, 0x22	; 34
    1386:	df 4f       	sbci	r29, 0xFF	; 255
    1388:	88 83       	st	Y, r24
    138a:	ce 5d       	subi	r28, 0xDE	; 222
    138c:	d0 40       	sbci	r29, 0x00	; 0
    138e:	35 c0       	rjmp	.+106    	; 0x13fa <Calc_EvaluatePostfix+0x31c>
            }
            i++;
    1390:	8e 81       	ldd	r24, Y+6	; 0x06
    1392:	9f 81       	ldd	r25, Y+7	; 0x07
    1394:	01 96       	adiw	r24, 0x01	; 1
    1396:	9f 83       	std	Y+7, r25	; 0x07
    1398:	8e 83       	std	Y+6, r24	; 0x06

    int i = 0;
    char ch;
    s32 op1, op2, num;

    while (postfix[i] != '\0') {
    139a:	2e 81       	ldd	r18, Y+6	; 0x06
    139c:	3f 81       	ldd	r19, Y+7	; 0x07
    139e:	fe 01       	movw	r30, r28
    13a0:	e6 52       	subi	r30, 0x26	; 38
    13a2:	ff 4f       	sbci	r31, 0xFF	; 255
    13a4:	80 81       	ld	r24, Z
    13a6:	91 81       	ldd	r25, Z+1	; 0x01
    13a8:	fc 01       	movw	r30, r24
    13aa:	e2 0f       	add	r30, r18
    13ac:	f3 1f       	adc	r31, r19
    13ae:	80 81       	ld	r24, Z
    13b0:	88 23       	and	r24, r24
    13b2:	09 f0       	breq	.+2      	; 0x13b6 <Calc_EvaluatePostfix+0x2d8>
    13b4:	b0 ce       	rjmp	.-672    	; 0x1116 <Calc_EvaluatePostfix+0x38>
            }
            i++;
        }
    }

    if (!isEmpty(&stack)) {
    13b6:	ce 01       	movw	r24, r28
    13b8:	08 96       	adiw	r24, 0x08	; 8
    13ba:	0e 94 77 13 	call	0x26ee	; 0x26ee <isEmpty>
    13be:	00 97       	sbiw	r24, 0x00	; 0
    13c0:	b1 f4       	brne	.+44     	; 0x13ee <Calc_EvaluatePostfix+0x310>
        pop(&stack, result);
    13c2:	fe 01       	movw	r30, r28
    13c4:	e4 52       	subi	r30, 0x24	; 36
    13c6:	ff 4f       	sbci	r31, 0xFF	; 255
    13c8:	20 81       	ld	r18, Z
    13ca:	31 81       	ldd	r19, Z+1	; 0x01
    13cc:	ce 01       	movw	r24, r28
    13ce:	08 96       	adiw	r24, 0x08	; 8
    13d0:	b9 01       	movw	r22, r18
    13d2:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <pop>
        if (isEmpty(&stack)) {
    13d6:	ce 01       	movw	r24, r28
    13d8:	08 96       	adiw	r24, 0x08	; 8
    13da:	0e 94 77 13 	call	0x26ee	; 0x26ee <isEmpty>
    13de:	00 97       	sbiw	r24, 0x00	; 0
    13e0:	31 f0       	breq	.+12     	; 0x13ee <Calc_EvaluatePostfix+0x310>
            return DIO_OK;
    13e2:	c2 52       	subi	r28, 0x22	; 34
    13e4:	df 4f       	sbci	r29, 0xFF	; 255
    13e6:	18 82       	st	Y, r1
    13e8:	ce 5d       	subi	r28, 0xDE	; 222
    13ea:	d0 40       	sbci	r29, 0x00	; 0
    13ec:	06 c0       	rjmp	.+12     	; 0x13fa <Calc_EvaluatePostfix+0x31c>
        }
    }

    return DIO_NOK;
    13ee:	91 e0       	ldi	r25, 0x01	; 1
    13f0:	c2 52       	subi	r28, 0x22	; 34
    13f2:	df 4f       	sbci	r29, 0xFF	; 255
    13f4:	98 83       	st	Y, r25
    13f6:	ce 5d       	subi	r28, 0xDE	; 222
    13f8:	d0 40       	sbci	r29, 0x00	; 0
    13fa:	c2 52       	subi	r28, 0x22	; 34
    13fc:	df 4f       	sbci	r29, 0xFF	; 255
    13fe:	88 81       	ld	r24, Y
    1400:	ce 5d       	subi	r28, 0xDE	; 222
    1402:	d0 40       	sbci	r29, 0x00	; 0
}
    1404:	c0 52       	subi	r28, 0x20	; 32
    1406:	df 4f       	sbci	r29, 0xFF	; 255
    1408:	0f b6       	in	r0, 0x3f	; 63
    140a:	f8 94       	cli
    140c:	de bf       	out	0x3e, r29	; 62
    140e:	0f be       	out	0x3f, r0	; 63
    1410:	cd bf       	out	0x3d, r28	; 61
    1412:	cf 91       	pop	r28
    1414:	df 91       	pop	r29
    1416:	08 95       	ret

00001418 <DIO_init>:
#include "ERROR.h"
#include "DIO_Private.h"


ES_t DIO_init(void)
 {
    1418:	df 93       	push	r29
    141a:	cf 93       	push	r28
    141c:	0f 92       	push	r0
    141e:	cd b7       	in	r28, 0x3d	; 61
    1420:	de b7       	in	r29, 0x3e	; 62
	ES_t local_enumError=DIO_NOK;
    1422:	81 e0       	ldi	r24, 0x01	; 1
    1424:	89 83       	std	Y+1, r24	; 0x01
	    DDRA= CONC(PORTA_PIN7_DIR,PORTA_PIN6_DIR,PORTA_PIN5_DIR,PORTA_PIN4_DIR,PORTA_PIN3_DIR,PORTA_PIN2_DIR,PORTA_PIN1_DIR,PORTA_PIN0_DIR);
    1426:	ea e3       	ldi	r30, 0x3A	; 58
    1428:	f0 e0       	ldi	r31, 0x00	; 0
    142a:	8f ef       	ldi	r24, 0xFF	; 255
    142c:	80 83       	st	Z, r24
	    DDRB= CONC(PORTB_PIN7_DIR,PORTB_PIN6_DIR,PORTB_PIN5_DIR,PORTB_PIN4_DIR,PORTB_PIN3_DIR,PORTB_PIN2_DIR,PORTB_PIN1_DIR,PORTB_PIN0_DIR);
    142e:	e7 e3       	ldi	r30, 0x37	; 55
    1430:	f0 e0       	ldi	r31, 0x00	; 0
    1432:	8f e0       	ldi	r24, 0x0F	; 15
    1434:	80 83       	st	Z, r24
	    DDRC= CONC(PORTC_PIN7_DIR,PORTC_PIN6_DIR,PORTC_PIN5_DIR,PORTC_PIN4_DIR,PORTC_PIN3_DIR,PORTC_PIN2_DIR,PORTC_PIN1_DIR,PORTC_PIN0_DIR);
    1436:	e4 e3       	ldi	r30, 0x34	; 52
    1438:	f0 e0       	ldi	r31, 0x00	; 0
    143a:	10 82       	st	Z, r1
	    DDRD= CONC(PORTD_PIN7_DIR,PORTD_PIN6_DIR,PORTD_PIN5_DIR,PORTD_PIN4_DIR,PORTD_PIN3_DIR,PORTD_PIN2_DIR,PORTD_PIN1_DIR,PORTD_PIN0_DIR);
    143c:	e1 e3       	ldi	r30, 0x31	; 49
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	8f e0       	ldi	r24, 0x0F	; 15
    1442:	80 83       	st	Z, r24

	    PORTA= CONC(PORTA_PIN7_VAL,PORTA_PIN6_VAL,PORTA_PIN5_VAL,PORTA_PIN4_VAL,PORTA_PIN3_VAL,PORTA_PIN2_VAL,PORTA_PIN1_VAL,PORTA_PIN0_VAL);
    1444:	eb e3       	ldi	r30, 0x3B	; 59
    1446:	f0 e0       	ldi	r31, 0x00	; 0
    1448:	10 82       	st	Z, r1
		PORTB= CONC(PORTB_PIN7_VAL,PORTB_PIN6_VAL,PORTB_PIN5_VAL,PORTB_PIN4_VAL,PORTB_PIN3_VAL,PORTB_PIN2_VAL,PORTB_PIN1_VAL,PORTB_PIN0_VAL);
    144a:	e8 e3       	ldi	r30, 0x38	; 56
    144c:	f0 e0       	ldi	r31, 0x00	; 0
    144e:	89 e2       	ldi	r24, 0x29	; 41
    1450:	80 83       	st	Z, r24
		PORTC= CONC(PORTC_PIN7_VAL,PORTC_PIN6_VAL,PORTC_PIN5_VAL,PORTC_PIN4_VAL,PORTC_PIN3_VAL,PORTC_PIN2_VAL,PORTC_PIN1_VAL,PORTC_PIN0_VAL);
    1452:	e5 e3       	ldi	r30, 0x35	; 53
    1454:	f0 e0       	ldi	r31, 0x00	; 0
    1456:	87 ea       	ldi	r24, 0xA7	; 167
    1458:	80 83       	st	Z, r24
		PORTD= CONC(PORTD_PIN7_VAL,PORTD_PIN6_VAL,PORTD_PIN5_VAL,PORTD_PIN4_VAL,PORTD_PIN3_VAL,PORTD_PIN2_VAL,PORTD_PIN1_VAL,PORTD_PIN0_VAL);
    145a:	e2 e3       	ldi	r30, 0x32	; 50
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	8f ef       	ldi	r24, 0xFF	; 255
    1460:	80 83       	st	Z, r24
		local_enumError=DIO_OK;
    1462:	19 82       	std	Y+1, r1	; 0x01


	 return local_enumError;
    1464:	89 81       	ldd	r24, Y+1	; 0x01

 }
    1466:	0f 90       	pop	r0
    1468:	cf 91       	pop	r28
    146a:	df 91       	pop	r29
    146c:	08 95       	ret

0000146e <Setport_Direction>:

ES_t Setport_Direction(u8 copy_u8_PortId,u8 copy_u8_value)
{
    146e:	df 93       	push	r29
    1470:	cf 93       	push	r28
    1472:	cd b7       	in	r28, 0x3d	; 61
    1474:	de b7       	in	r29, 0x3e	; 62
    1476:	27 97       	sbiw	r28, 0x07	; 7
    1478:	0f b6       	in	r0, 0x3f	; 63
    147a:	f8 94       	cli
    147c:	de bf       	out	0x3e, r29	; 62
    147e:	0f be       	out	0x3f, r0	; 63
    1480:	cd bf       	out	0x3d, r28	; 61
    1482:	8c 83       	std	Y+4, r24	; 0x04
    1484:	6d 83       	std	Y+5, r22	; 0x05
		ES_t local_enumError=DIO_NOK;
    1486:	81 e0       	ldi	r24, 0x01	; 1
    1488:	8b 83       	std	Y+3, r24	; 0x03

     if(copy_u8_PortId<=DIO_PORTD)
    148a:	8c 81       	ldd	r24, Y+4	; 0x04
    148c:	84 30       	cpi	r24, 0x04	; 4
    148e:	a0 f5       	brcc	.+104    	; 0x14f8 <Setport_Direction+0x8a>
     {
    	 switch(copy_u8_PortId)
    1490:	8c 81       	ldd	r24, Y+4	; 0x04
    1492:	28 2f       	mov	r18, r24
    1494:	30 e0       	ldi	r19, 0x00	; 0
    1496:	3f 83       	std	Y+7, r19	; 0x07
    1498:	2e 83       	std	Y+6, r18	; 0x06
    149a:	8e 81       	ldd	r24, Y+6	; 0x06
    149c:	9f 81       	ldd	r25, Y+7	; 0x07
    149e:	81 30       	cpi	r24, 0x01	; 1
    14a0:	91 05       	cpc	r25, r1
    14a2:	d1 f0       	breq	.+52     	; 0x14d8 <Setport_Direction+0x6a>
    14a4:	2e 81       	ldd	r18, Y+6	; 0x06
    14a6:	3f 81       	ldd	r19, Y+7	; 0x07
    14a8:	22 30       	cpi	r18, 0x02	; 2
    14aa:	31 05       	cpc	r19, r1
    14ac:	2c f4       	brge	.+10     	; 0x14b8 <Setport_Direction+0x4a>
    14ae:	8e 81       	ldd	r24, Y+6	; 0x06
    14b0:	9f 81       	ldd	r25, Y+7	; 0x07
    14b2:	00 97       	sbiw	r24, 0x00	; 0
    14b4:	61 f0       	breq	.+24     	; 0x14ce <Setport_Direction+0x60>
    14b6:	1e c0       	rjmp	.+60     	; 0x14f4 <Setport_Direction+0x86>
    14b8:	2e 81       	ldd	r18, Y+6	; 0x06
    14ba:	3f 81       	ldd	r19, Y+7	; 0x07
    14bc:	22 30       	cpi	r18, 0x02	; 2
    14be:	31 05       	cpc	r19, r1
    14c0:	81 f0       	breq	.+32     	; 0x14e2 <Setport_Direction+0x74>
    14c2:	8e 81       	ldd	r24, Y+6	; 0x06
    14c4:	9f 81       	ldd	r25, Y+7	; 0x07
    14c6:	83 30       	cpi	r24, 0x03	; 3
    14c8:	91 05       	cpc	r25, r1
    14ca:	81 f0       	breq	.+32     	; 0x14ec <Setport_Direction+0x7e>
    14cc:	13 c0       	rjmp	.+38     	; 0x14f4 <Setport_Direction+0x86>
    	 {
    	 case DIO_PORTA:
    		 DDRA=copy_u8_value;
    14ce:	ea e3       	ldi	r30, 0x3A	; 58
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	8d 81       	ldd	r24, Y+5	; 0x05
    14d4:	80 83       	st	Z, r24
    14d6:	0e c0       	rjmp	.+28     	; 0x14f4 <Setport_Direction+0x86>
    		 break;
    	 case DIO_PORTB:
    		 DDRB=copy_u8_value;
    14d8:	e7 e3       	ldi	r30, 0x37	; 55
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	8d 81       	ldd	r24, Y+5	; 0x05
    14de:	80 83       	st	Z, r24
    14e0:	09 c0       	rjmp	.+18     	; 0x14f4 <Setport_Direction+0x86>

    	    		 break;
    	 case DIO_PORTC:
    		 DDRC=copy_u8_value;
    14e2:	e4 e3       	ldi	r30, 0x34	; 52
    14e4:	f0 e0       	ldi	r31, 0x00	; 0
    14e6:	8d 81       	ldd	r24, Y+5	; 0x05
    14e8:	80 83       	st	Z, r24
    14ea:	04 c0       	rjmp	.+8      	; 0x14f4 <Setport_Direction+0x86>

    	    		 break;
    	 case DIO_PORTD:
    		 DDRD=copy_u8_value;
    14ec:	e1 e3       	ldi	r30, 0x31	; 49
    14ee:	f0 e0       	ldi	r31, 0x00	; 0
    14f0:	8d 81       	ldd	r24, Y+5	; 0x05
    14f2:	80 83       	st	Z, r24

    	    		 break;
    	 }

 		ES_t local_enumError=DIO_OK;
    14f4:	1a 82       	std	Y+2, r1	; 0x02
    14f6:	02 c0       	rjmp	.+4      	; 0x14fc <Setport_Direction+0x8e>

     }

     else
     {
    		ES_t local_enumError=OUT_OF_RANGE;
    14f8:	83 e0       	ldi	r24, 0x03	; 3
    14fa:	89 83       	std	Y+1, r24	; 0x01
     }




		 return local_enumError;
    14fc:	8b 81       	ldd	r24, Y+3	; 0x03

}
    14fe:	27 96       	adiw	r28, 0x07	; 7
    1500:	0f b6       	in	r0, 0x3f	; 63
    1502:	f8 94       	cli
    1504:	de bf       	out	0x3e, r29	; 62
    1506:	0f be       	out	0x3f, r0	; 63
    1508:	cd bf       	out	0x3d, r28	; 61
    150a:	cf 91       	pop	r28
    150c:	df 91       	pop	r29
    150e:	08 95       	ret

00001510 <Setport_value>:
ES_t Setport_value(u8 copy_u8_PortId,u8 copy_u8_value)
{
    1510:	df 93       	push	r29
    1512:	cf 93       	push	r28
    1514:	cd b7       	in	r28, 0x3d	; 61
    1516:	de b7       	in	r29, 0x3e	; 62
    1518:	27 97       	sbiw	r28, 0x07	; 7
    151a:	0f b6       	in	r0, 0x3f	; 63
    151c:	f8 94       	cli
    151e:	de bf       	out	0x3e, r29	; 62
    1520:	0f be       	out	0x3f, r0	; 63
    1522:	cd bf       	out	0x3d, r28	; 61
    1524:	8c 83       	std	Y+4, r24	; 0x04
    1526:	6d 83       	std	Y+5, r22	; 0x05

			ES_t local_enumError=DIO_NOK;
    1528:	81 e0       	ldi	r24, 0x01	; 1
    152a:	8b 83       	std	Y+3, r24	; 0x03

	     if(copy_u8_PortId<=DIO_PORTD)
    152c:	8c 81       	ldd	r24, Y+4	; 0x04
    152e:	84 30       	cpi	r24, 0x04	; 4
    1530:	a0 f5       	brcc	.+104    	; 0x159a <Setport_value+0x8a>
	     {
	    	 switch(copy_u8_PortId)
    1532:	8c 81       	ldd	r24, Y+4	; 0x04
    1534:	28 2f       	mov	r18, r24
    1536:	30 e0       	ldi	r19, 0x00	; 0
    1538:	3f 83       	std	Y+7, r19	; 0x07
    153a:	2e 83       	std	Y+6, r18	; 0x06
    153c:	8e 81       	ldd	r24, Y+6	; 0x06
    153e:	9f 81       	ldd	r25, Y+7	; 0x07
    1540:	81 30       	cpi	r24, 0x01	; 1
    1542:	91 05       	cpc	r25, r1
    1544:	d1 f0       	breq	.+52     	; 0x157a <Setport_value+0x6a>
    1546:	2e 81       	ldd	r18, Y+6	; 0x06
    1548:	3f 81       	ldd	r19, Y+7	; 0x07
    154a:	22 30       	cpi	r18, 0x02	; 2
    154c:	31 05       	cpc	r19, r1
    154e:	2c f4       	brge	.+10     	; 0x155a <Setport_value+0x4a>
    1550:	8e 81       	ldd	r24, Y+6	; 0x06
    1552:	9f 81       	ldd	r25, Y+7	; 0x07
    1554:	00 97       	sbiw	r24, 0x00	; 0
    1556:	61 f0       	breq	.+24     	; 0x1570 <Setport_value+0x60>
    1558:	1e c0       	rjmp	.+60     	; 0x1596 <Setport_value+0x86>
    155a:	2e 81       	ldd	r18, Y+6	; 0x06
    155c:	3f 81       	ldd	r19, Y+7	; 0x07
    155e:	22 30       	cpi	r18, 0x02	; 2
    1560:	31 05       	cpc	r19, r1
    1562:	81 f0       	breq	.+32     	; 0x1584 <Setport_value+0x74>
    1564:	8e 81       	ldd	r24, Y+6	; 0x06
    1566:	9f 81       	ldd	r25, Y+7	; 0x07
    1568:	83 30       	cpi	r24, 0x03	; 3
    156a:	91 05       	cpc	r25, r1
    156c:	81 f0       	breq	.+32     	; 0x158e <Setport_value+0x7e>
    156e:	13 c0       	rjmp	.+38     	; 0x1596 <Setport_value+0x86>
	    	 {
	    	 case DIO_PORTA:
	    		 PORTA=copy_u8_value;
    1570:	eb e3       	ldi	r30, 0x3B	; 59
    1572:	f0 e0       	ldi	r31, 0x00	; 0
    1574:	8d 81       	ldd	r24, Y+5	; 0x05
    1576:	80 83       	st	Z, r24
    1578:	0e c0       	rjmp	.+28     	; 0x1596 <Setport_value+0x86>
	    		 break;
	    	 case DIO_PORTB:
	    		 PORTB=copy_u8_value;
    157a:	e8 e3       	ldi	r30, 0x38	; 56
    157c:	f0 e0       	ldi	r31, 0x00	; 0
    157e:	8d 81       	ldd	r24, Y+5	; 0x05
    1580:	80 83       	st	Z, r24
    1582:	09 c0       	rjmp	.+18     	; 0x1596 <Setport_value+0x86>

	    	    		 break;
	    	 case DIO_PORTC:
	    		 PORTC=copy_u8_value;
    1584:	e5 e3       	ldi	r30, 0x35	; 53
    1586:	f0 e0       	ldi	r31, 0x00	; 0
    1588:	8d 81       	ldd	r24, Y+5	; 0x05
    158a:	80 83       	st	Z, r24
    158c:	04 c0       	rjmp	.+8      	; 0x1596 <Setport_value+0x86>

	    	    		 break;
	    	 case DIO_PORTD:
	    		PORTD=copy_u8_value;
    158e:	e2 e3       	ldi	r30, 0x32	; 50
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	8d 81       	ldd	r24, Y+5	; 0x05
    1594:	80 83       	st	Z, r24

	    	    		 break;
	    	 }

	 		ES_t local_enumError=DIO_OK;
    1596:	1a 82       	std	Y+2, r1	; 0x02
    1598:	02 c0       	rjmp	.+4      	; 0x159e <Setport_value+0x8e>

	     }

	     else
	     {
	    		ES_t local_enumError=OUT_OF_RANGE;
    159a:	83 e0       	ldi	r24, 0x03	; 3
    159c:	89 83       	std	Y+1, r24	; 0x01
	     }




			 return local_enumError;
    159e:	8b 81       	ldd	r24, Y+3	; 0x03


}
    15a0:	27 96       	adiw	r28, 0x07	; 7
    15a2:	0f b6       	in	r0, 0x3f	; 63
    15a4:	f8 94       	cli
    15a6:	de bf       	out	0x3e, r29	; 62
    15a8:	0f be       	out	0x3f, r0	; 63
    15aa:	cd bf       	out	0x3d, r28	; 61
    15ac:	cf 91       	pop	r28
    15ae:	df 91       	pop	r29
    15b0:	08 95       	ret

000015b2 <TogglePort>:
        ES_t TogglePort(u8 copy_u8_PortId)

		{
    15b2:	df 93       	push	r29
    15b4:	cf 93       	push	r28
    15b6:	00 d0       	rcall	.+0      	; 0x15b8 <TogglePort+0x6>
    15b8:	00 d0       	rcall	.+0      	; 0x15ba <TogglePort+0x8>
    15ba:	00 d0       	rcall	.+0      	; 0x15bc <TogglePort+0xa>
    15bc:	cd b7       	in	r28, 0x3d	; 61
    15be:	de b7       	in	r29, 0x3e	; 62
    15c0:	8c 83       	std	Y+4, r24	; 0x04
					ES_t local_enumError=DIO_NOK;
    15c2:	81 e0       	ldi	r24, 0x01	; 1
    15c4:	8b 83       	std	Y+3, r24	; 0x03

			     if(copy_u8_PortId<=DIO_PORTD)
    15c6:	8c 81       	ldd	r24, Y+4	; 0x04
    15c8:	84 30       	cpi	r24, 0x04	; 4
    15ca:	08 f0       	brcs	.+2      	; 0x15ce <TogglePort+0x1c>
    15cc:	40 c0       	rjmp	.+128    	; 0x164e <TogglePort+0x9c>
			     {
			    	 switch(copy_u8_PortId)
    15ce:	8c 81       	ldd	r24, Y+4	; 0x04
    15d0:	28 2f       	mov	r18, r24
    15d2:	30 e0       	ldi	r19, 0x00	; 0
    15d4:	3e 83       	std	Y+6, r19	; 0x06
    15d6:	2d 83       	std	Y+5, r18	; 0x05
    15d8:	8d 81       	ldd	r24, Y+5	; 0x05
    15da:	9e 81       	ldd	r25, Y+6	; 0x06
    15dc:	81 30       	cpi	r24, 0x01	; 1
    15de:	91 05       	cpc	r25, r1
    15e0:	e9 f0       	breq	.+58     	; 0x161c <TogglePort+0x6a>
    15e2:	2d 81       	ldd	r18, Y+5	; 0x05
    15e4:	3e 81       	ldd	r19, Y+6	; 0x06
    15e6:	22 30       	cpi	r18, 0x02	; 2
    15e8:	31 05       	cpc	r19, r1
    15ea:	2c f4       	brge	.+10     	; 0x15f6 <TogglePort+0x44>
    15ec:	8d 81       	ldd	r24, Y+5	; 0x05
    15ee:	9e 81       	ldd	r25, Y+6	; 0x06
    15f0:	00 97       	sbiw	r24, 0x00	; 0
    15f2:	61 f0       	breq	.+24     	; 0x160c <TogglePort+0x5a>
    15f4:	2a c0       	rjmp	.+84     	; 0x164a <TogglePort+0x98>
    15f6:	2d 81       	ldd	r18, Y+5	; 0x05
    15f8:	3e 81       	ldd	r19, Y+6	; 0x06
    15fa:	22 30       	cpi	r18, 0x02	; 2
    15fc:	31 05       	cpc	r19, r1
    15fe:	b1 f0       	breq	.+44     	; 0x162c <TogglePort+0x7a>
    1600:	8d 81       	ldd	r24, Y+5	; 0x05
    1602:	9e 81       	ldd	r25, Y+6	; 0x06
    1604:	83 30       	cpi	r24, 0x03	; 3
    1606:	91 05       	cpc	r25, r1
    1608:	c9 f0       	breq	.+50     	; 0x163c <TogglePort+0x8a>
    160a:	1f c0       	rjmp	.+62     	; 0x164a <TogglePort+0x98>
			    	 {
			    	 case DIO_PORTA:
			    		 PORTA=~PORTA;
    160c:	ab e3       	ldi	r26, 0x3B	; 59
    160e:	b0 e0       	ldi	r27, 0x00	; 0
    1610:	eb e3       	ldi	r30, 0x3B	; 59
    1612:	f0 e0       	ldi	r31, 0x00	; 0
    1614:	80 81       	ld	r24, Z
    1616:	80 95       	com	r24
    1618:	8c 93       	st	X, r24
    161a:	17 c0       	rjmp	.+46     	; 0x164a <TogglePort+0x98>
			    		 break;

			    	 case DIO_PORTB:
			    		 PORTB=~PORTB;
    161c:	a8 e3       	ldi	r26, 0x38	; 56
    161e:	b0 e0       	ldi	r27, 0x00	; 0
    1620:	e8 e3       	ldi	r30, 0x38	; 56
    1622:	f0 e0       	ldi	r31, 0x00	; 0
    1624:	80 81       	ld	r24, Z
    1626:	80 95       	com	r24
    1628:	8c 93       	st	X, r24
    162a:	0f c0       	rjmp	.+30     	; 0x164a <TogglePort+0x98>

			    	    		 break;
			    	 case DIO_PORTC:
			    		 PORTC=~PORTC;
    162c:	a5 e3       	ldi	r26, 0x35	; 53
    162e:	b0 e0       	ldi	r27, 0x00	; 0
    1630:	e5 e3       	ldi	r30, 0x35	; 53
    1632:	f0 e0       	ldi	r31, 0x00	; 0
    1634:	80 81       	ld	r24, Z
    1636:	80 95       	com	r24
    1638:	8c 93       	st	X, r24
    163a:	07 c0       	rjmp	.+14     	; 0x164a <TogglePort+0x98>

			    	    		 break;
			    	 case DIO_PORTD:
			    		PORTD=~PORTD;
    163c:	a2 e3       	ldi	r26, 0x32	; 50
    163e:	b0 e0       	ldi	r27, 0x00	; 0
    1640:	e2 e3       	ldi	r30, 0x32	; 50
    1642:	f0 e0       	ldi	r31, 0x00	; 0
    1644:	80 81       	ld	r24, Z
    1646:	80 95       	com	r24
    1648:	8c 93       	st	X, r24

			    	    		 break;
			    	 }

			 		ES_t local_enumError=DIO_OK;
    164a:	1a 82       	std	Y+2, r1	; 0x02
    164c:	02 c0       	rjmp	.+4      	; 0x1652 <TogglePort+0xa0>

			     }

			     else
			     {
			    		ES_t local_enumError=OUT_OF_RANGE;
    164e:	83 e0       	ldi	r24, 0x03	; 3
    1650:	89 83       	std	Y+1, r24	; 0x01

			     }
			 return local_enumError;
    1652:	8b 81       	ldd	r24, Y+3	; 0x03

	}
    1654:	26 96       	adiw	r28, 0x06	; 6
    1656:	0f b6       	in	r0, 0x3f	; 63
    1658:	f8 94       	cli
    165a:	de bf       	out	0x3e, r29	; 62
    165c:	0f be       	out	0x3f, r0	; 63
    165e:	cd bf       	out	0x3d, r28	; 61
    1660:	cf 91       	pop	r28
    1662:	df 91       	pop	r29
    1664:	08 95       	ret

00001666 <GetPort>:

	ES_t GetPort(u8 copy_u8_PortId,u8 *copy_pu8_value)
{
    1666:	df 93       	push	r29
    1668:	cf 93       	push	r28
    166a:	cd b7       	in	r28, 0x3d	; 61
    166c:	de b7       	in	r29, 0x3e	; 62
    166e:	29 97       	sbiw	r28, 0x09	; 9
    1670:	0f b6       	in	r0, 0x3f	; 63
    1672:	f8 94       	cli
    1674:	de bf       	out	0x3e, r29	; 62
    1676:	0f be       	out	0x3f, r0	; 63
    1678:	cd bf       	out	0x3d, r28	; 61
    167a:	8d 83       	std	Y+5, r24	; 0x05
    167c:	7f 83       	std	Y+7, r23	; 0x07
    167e:	6e 83       	std	Y+6, r22	; 0x06
		ES_t local_enumError=DIO_NOK;
    1680:	81 e0       	ldi	r24, 0x01	; 1
    1682:	8c 83       	std	Y+4, r24	; 0x04
if(copy_pu8_value!=NULL)
    1684:	8e 81       	ldd	r24, Y+6	; 0x06
    1686:	9f 81       	ldd	r25, Y+7	; 0x07
    1688:	00 97       	sbiw	r24, 0x00	; 0
    168a:	09 f4       	brne	.+2      	; 0x168e <GetPort+0x28>
    168c:	42 c0       	rjmp	.+132    	; 0x1712 <GetPort+0xac>
{
	   if(copy_u8_PortId<=DIO_PORTD)
    168e:	8d 81       	ldd	r24, Y+5	; 0x05
    1690:	84 30       	cpi	r24, 0x04	; 4
    1692:	e0 f5       	brcc	.+120    	; 0x170c <GetPort+0xa6>
	   {
		   switch(copy_u8_PortId)
    1694:	8d 81       	ldd	r24, Y+5	; 0x05
    1696:	28 2f       	mov	r18, r24
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	39 87       	std	Y+9, r19	; 0x09
    169c:	28 87       	std	Y+8, r18	; 0x08
    169e:	88 85       	ldd	r24, Y+8	; 0x08
    16a0:	99 85       	ldd	r25, Y+9	; 0x09
    16a2:	81 30       	cpi	r24, 0x01	; 1
    16a4:	91 05       	cpc	r25, r1
    16a6:	e1 f0       	breq	.+56     	; 0x16e0 <GetPort+0x7a>
    16a8:	28 85       	ldd	r18, Y+8	; 0x08
    16aa:	39 85       	ldd	r19, Y+9	; 0x09
    16ac:	22 30       	cpi	r18, 0x02	; 2
    16ae:	31 05       	cpc	r19, r1
    16b0:	2c f4       	brge	.+10     	; 0x16bc <GetPort+0x56>
    16b2:	88 85       	ldd	r24, Y+8	; 0x08
    16b4:	99 85       	ldd	r25, Y+9	; 0x09
    16b6:	00 97       	sbiw	r24, 0x00	; 0
    16b8:	61 f0       	breq	.+24     	; 0x16d2 <GetPort+0x6c>
    16ba:	26 c0       	rjmp	.+76     	; 0x1708 <GetPort+0xa2>
    16bc:	28 85       	ldd	r18, Y+8	; 0x08
    16be:	39 85       	ldd	r19, Y+9	; 0x09
    16c0:	22 30       	cpi	r18, 0x02	; 2
    16c2:	31 05       	cpc	r19, r1
    16c4:	a1 f0       	breq	.+40     	; 0x16ee <GetPort+0x88>
    16c6:	88 85       	ldd	r24, Y+8	; 0x08
    16c8:	99 85       	ldd	r25, Y+9	; 0x09
    16ca:	83 30       	cpi	r24, 0x03	; 3
    16cc:	91 05       	cpc	r25, r1
    16ce:	b1 f0       	breq	.+44     	; 0x16fc <GetPort+0x96>
    16d0:	1b c0       	rjmp	.+54     	; 0x1708 <GetPort+0xa2>
		   {
		   case DIO_PORTA:
			   *copy_pu8_value=PINA;
    16d2:	e9 e3       	ldi	r30, 0x39	; 57
    16d4:	f0 e0       	ldi	r31, 0x00	; 0
    16d6:	80 81       	ld	r24, Z
    16d8:	ee 81       	ldd	r30, Y+6	; 0x06
    16da:	ff 81       	ldd	r31, Y+7	; 0x07
    16dc:	80 83       	st	Z, r24
    16de:	14 c0       	rjmp	.+40     	; 0x1708 <GetPort+0xa2>
			   break;

		       case DIO_PORTB:
		  			   *copy_pu8_value=PINB;
    16e0:	e6 e3       	ldi	r30, 0x36	; 54
    16e2:	f0 e0       	ldi	r31, 0x00	; 0
    16e4:	80 81       	ld	r24, Z
    16e6:	ee 81       	ldd	r30, Y+6	; 0x06
    16e8:	ff 81       	ldd	r31, Y+7	; 0x07
    16ea:	80 83       	st	Z, r24
    16ec:	0d c0       	rjmp	.+26     	; 0x1708 <GetPort+0xa2>
		  			  break;

		  			   case DIO_PORTC:
		  				   *copy_pu8_value=PINC;
    16ee:	e3 e3       	ldi	r30, 0x33	; 51
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	80 81       	ld	r24, Z
    16f4:	ee 81       	ldd	r30, Y+6	; 0x06
    16f6:	ff 81       	ldd	r31, Y+7	; 0x07
    16f8:	80 83       	st	Z, r24
    16fa:	06 c0       	rjmp	.+12     	; 0x1708 <GetPort+0xa2>
		  				   break;

		  				   case DIO_PORTD:
		  					   *copy_pu8_value=PIND;
    16fc:	e0 e3       	ldi	r30, 0x30	; 48
    16fe:	f0 e0       	ldi	r31, 0x00	; 0
    1700:	80 81       	ld	r24, Z
    1702:	ee 81       	ldd	r30, Y+6	; 0x06
    1704:	ff 81       	ldd	r31, Y+7	; 0x07
    1706:	80 83       	st	Z, r24
		  					   break;

		   }

			ES_t local_enumError=DIO_OK;
    1708:	1b 82       	std	Y+3, r1	; 0x03
    170a:	05 c0       	rjmp	.+10     	; 0x1716 <GetPort+0xb0>

	   }
	   else
	   {
			ES_t local_enumError=OUT_OF_RANGE;
    170c:	83 e0       	ldi	r24, 0x03	; 3
    170e:	8a 83       	std	Y+2, r24	; 0x02
    1710:	02 c0       	rjmp	.+4      	; 0x1716 <GetPort+0xb0>
	   }

}
else
{
	ES_t local_enumError=DIO_NULLPOINTER;
    1712:	82 e0       	ldi	r24, 0x02	; 2
    1714:	89 83       	std	Y+1, r24	; 0x01
}

			 return local_enumError;
    1716:	8c 81       	ldd	r24, Y+4	; 0x04

}
    1718:	29 96       	adiw	r28, 0x09	; 9
    171a:	0f b6       	in	r0, 0x3f	; 63
    171c:	f8 94       	cli
    171e:	de bf       	out	0x3e, r29	; 62
    1720:	0f be       	out	0x3f, r0	; 63
    1722:	cd bf       	out	0x3d, r28	; 61
    1724:	cf 91       	pop	r28
    1726:	df 91       	pop	r29
    1728:	08 95       	ret

0000172a <Setpin_Direction>:

	ES_t Setpin_Direction(u8 copy_u8_PortId,u8 copy_u8_PIN_Id,u8 copy_u8_value)
{
    172a:	df 93       	push	r29
    172c:	cf 93       	push	r28
    172e:	cd b7       	in	r28, 0x3d	; 61
    1730:	de b7       	in	r29, 0x3e	; 62
    1732:	28 97       	sbiw	r28, 0x08	; 8
    1734:	0f b6       	in	r0, 0x3f	; 63
    1736:	f8 94       	cli
    1738:	de bf       	out	0x3e, r29	; 62
    173a:	0f be       	out	0x3f, r0	; 63
    173c:	cd bf       	out	0x3d, r28	; 61
    173e:	8c 83       	std	Y+4, r24	; 0x04
    1740:	6d 83       	std	Y+5, r22	; 0x05
    1742:	4e 83       	std	Y+6, r20	; 0x06
		ES_t local_enumError=DIO_NOK;
    1744:	81 e0       	ldi	r24, 0x01	; 1
    1746:	8b 83       	std	Y+3, r24	; 0x03
		if(copy_u8_PortId<=DIO_PORTD &&copy_u8_PIN_Id<=DIO_PIN7&&copy_u8_value<=OUTPUT)
    1748:	8c 81       	ldd	r24, Y+4	; 0x04
    174a:	84 30       	cpi	r24, 0x04	; 4
    174c:	08 f0       	brcs	.+2      	; 0x1750 <Setpin_Direction+0x26>
    174e:	d0 c0       	rjmp	.+416    	; 0x18f0 <Setpin_Direction+0x1c6>
    1750:	8d 81       	ldd	r24, Y+5	; 0x05
    1752:	88 30       	cpi	r24, 0x08	; 8
    1754:	08 f0       	brcs	.+2      	; 0x1758 <Setpin_Direction+0x2e>
    1756:	cc c0       	rjmp	.+408    	; 0x18f0 <Setpin_Direction+0x1c6>
    1758:	8e 81       	ldd	r24, Y+6	; 0x06
    175a:	82 30       	cpi	r24, 0x02	; 2
    175c:	08 f0       	brcs	.+2      	; 0x1760 <Setpin_Direction+0x36>
    175e:	c8 c0       	rjmp	.+400    	; 0x18f0 <Setpin_Direction+0x1c6>
		{
			switch(copy_u8_PortId)
    1760:	8c 81       	ldd	r24, Y+4	; 0x04
    1762:	28 2f       	mov	r18, r24
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	38 87       	std	Y+8, r19	; 0x08
    1768:	2f 83       	std	Y+7, r18	; 0x07
    176a:	6f 81       	ldd	r22, Y+7	; 0x07
    176c:	78 85       	ldd	r23, Y+8	; 0x08
    176e:	61 30       	cpi	r22, 0x01	; 1
    1770:	71 05       	cpc	r23, r1
    1772:	09 f4       	brne	.+2      	; 0x1776 <Setpin_Direction+0x4c>
    1774:	41 c0       	rjmp	.+130    	; 0x17f8 <Setpin_Direction+0xce>
    1776:	8f 81       	ldd	r24, Y+7	; 0x07
    1778:	98 85       	ldd	r25, Y+8	; 0x08
    177a:	82 30       	cpi	r24, 0x02	; 2
    177c:	91 05       	cpc	r25, r1
    177e:	34 f4       	brge	.+12     	; 0x178c <Setpin_Direction+0x62>
    1780:	2f 81       	ldd	r18, Y+7	; 0x07
    1782:	38 85       	ldd	r19, Y+8	; 0x08
    1784:	21 15       	cp	r18, r1
    1786:	31 05       	cpc	r19, r1
    1788:	71 f0       	breq	.+28     	; 0x17a6 <Setpin_Direction+0x7c>
    178a:	b0 c0       	rjmp	.+352    	; 0x18ec <Setpin_Direction+0x1c2>
    178c:	6f 81       	ldd	r22, Y+7	; 0x07
    178e:	78 85       	ldd	r23, Y+8	; 0x08
    1790:	62 30       	cpi	r22, 0x02	; 2
    1792:	71 05       	cpc	r23, r1
    1794:	09 f4       	brne	.+2      	; 0x1798 <Setpin_Direction+0x6e>
    1796:	59 c0       	rjmp	.+178    	; 0x184a <Setpin_Direction+0x120>
    1798:	8f 81       	ldd	r24, Y+7	; 0x07
    179a:	98 85       	ldd	r25, Y+8	; 0x08
    179c:	83 30       	cpi	r24, 0x03	; 3
    179e:	91 05       	cpc	r25, r1
    17a0:	09 f4       	brne	.+2      	; 0x17a4 <Setpin_Direction+0x7a>
    17a2:	7c c0       	rjmp	.+248    	; 0x189c <Setpin_Direction+0x172>
    17a4:	a3 c0       	rjmp	.+326    	; 0x18ec <Setpin_Direction+0x1c2>
					   {
		 case DIO_PORTA:
			 DDRA &=~(1<<copy_u8_PIN_Id);
    17a6:	aa e3       	ldi	r26, 0x3A	; 58
    17a8:	b0 e0       	ldi	r27, 0x00	; 0
    17aa:	ea e3       	ldi	r30, 0x3A	; 58
    17ac:	f0 e0       	ldi	r31, 0x00	; 0
    17ae:	80 81       	ld	r24, Z
    17b0:	48 2f       	mov	r20, r24
    17b2:	8d 81       	ldd	r24, Y+5	; 0x05
    17b4:	28 2f       	mov	r18, r24
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	81 e0       	ldi	r24, 0x01	; 1
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	02 c0       	rjmp	.+4      	; 0x17c2 <Setpin_Direction+0x98>
    17be:	88 0f       	add	r24, r24
    17c0:	99 1f       	adc	r25, r25
    17c2:	2a 95       	dec	r18
    17c4:	e2 f7       	brpl	.-8      	; 0x17be <Setpin_Direction+0x94>
    17c6:	80 95       	com	r24
    17c8:	84 23       	and	r24, r20
    17ca:	8c 93       	st	X, r24
			 DDRA |=(copy_u8_value<<copy_u8_PIN_Id);
    17cc:	aa e3       	ldi	r26, 0x3A	; 58
    17ce:	b0 e0       	ldi	r27, 0x00	; 0
    17d0:	ea e3       	ldi	r30, 0x3A	; 58
    17d2:	f0 e0       	ldi	r31, 0x00	; 0
    17d4:	80 81       	ld	r24, Z
    17d6:	48 2f       	mov	r20, r24
    17d8:	8e 81       	ldd	r24, Y+6	; 0x06
    17da:	28 2f       	mov	r18, r24
    17dc:	30 e0       	ldi	r19, 0x00	; 0
    17de:	8d 81       	ldd	r24, Y+5	; 0x05
    17e0:	88 2f       	mov	r24, r24
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	b9 01       	movw	r22, r18
    17e6:	02 c0       	rjmp	.+4      	; 0x17ec <Setpin_Direction+0xc2>
    17e8:	66 0f       	add	r22, r22
    17ea:	77 1f       	adc	r23, r23
    17ec:	8a 95       	dec	r24
    17ee:	e2 f7       	brpl	.-8      	; 0x17e8 <Setpin_Direction+0xbe>
    17f0:	cb 01       	movw	r24, r22
    17f2:	84 2b       	or	r24, r20
    17f4:	8c 93       	st	X, r24
    17f6:	7a c0       	rjmp	.+244    	; 0x18ec <Setpin_Direction+0x1c2>
	 	                break;
	     case DIO_PORTB:
	    	  DDRB &=~(1<<copy_u8_PIN_Id);
    17f8:	a7 e3       	ldi	r26, 0x37	; 55
    17fa:	b0 e0       	ldi	r27, 0x00	; 0
    17fc:	e7 e3       	ldi	r30, 0x37	; 55
    17fe:	f0 e0       	ldi	r31, 0x00	; 0
    1800:	80 81       	ld	r24, Z
    1802:	48 2f       	mov	r20, r24
    1804:	8d 81       	ldd	r24, Y+5	; 0x05
    1806:	28 2f       	mov	r18, r24
    1808:	30 e0       	ldi	r19, 0x00	; 0
    180a:	81 e0       	ldi	r24, 0x01	; 1
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	02 c0       	rjmp	.+4      	; 0x1814 <Setpin_Direction+0xea>
    1810:	88 0f       	add	r24, r24
    1812:	99 1f       	adc	r25, r25
    1814:	2a 95       	dec	r18
    1816:	e2 f7       	brpl	.-8      	; 0x1810 <Setpin_Direction+0xe6>
    1818:	80 95       	com	r24
    181a:	84 23       	and	r24, r20
    181c:	8c 93       	st	X, r24
	    				 DDRB |=(copy_u8_value<<copy_u8_PIN_Id);
    181e:	a7 e3       	ldi	r26, 0x37	; 55
    1820:	b0 e0       	ldi	r27, 0x00	; 0
    1822:	e7 e3       	ldi	r30, 0x37	; 55
    1824:	f0 e0       	ldi	r31, 0x00	; 0
    1826:	80 81       	ld	r24, Z
    1828:	48 2f       	mov	r20, r24
    182a:	8e 81       	ldd	r24, Y+6	; 0x06
    182c:	28 2f       	mov	r18, r24
    182e:	30 e0       	ldi	r19, 0x00	; 0
    1830:	8d 81       	ldd	r24, Y+5	; 0x05
    1832:	88 2f       	mov	r24, r24
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	b9 01       	movw	r22, r18
    1838:	02 c0       	rjmp	.+4      	; 0x183e <Setpin_Direction+0x114>
    183a:	66 0f       	add	r22, r22
    183c:	77 1f       	adc	r23, r23
    183e:	8a 95       	dec	r24
    1840:	e2 f7       	brpl	.-8      	; 0x183a <Setpin_Direction+0x110>
    1842:	cb 01       	movw	r24, r22
    1844:	84 2b       	or	r24, r20
    1846:	8c 93       	st	X, r24
    1848:	51 c0       	rjmp	.+162    	; 0x18ec <Setpin_Direction+0x1c2>
	  	            break;
	     case DIO_PORTC:
	    	 DDRC &=~(1<<copy_u8_PIN_Id);
    184a:	a4 e3       	ldi	r26, 0x34	; 52
    184c:	b0 e0       	ldi	r27, 0x00	; 0
    184e:	e4 e3       	ldi	r30, 0x34	; 52
    1850:	f0 e0       	ldi	r31, 0x00	; 0
    1852:	80 81       	ld	r24, Z
    1854:	48 2f       	mov	r20, r24
    1856:	8d 81       	ldd	r24, Y+5	; 0x05
    1858:	28 2f       	mov	r18, r24
    185a:	30 e0       	ldi	r19, 0x00	; 0
    185c:	81 e0       	ldi	r24, 0x01	; 1
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	02 c0       	rjmp	.+4      	; 0x1866 <Setpin_Direction+0x13c>
    1862:	88 0f       	add	r24, r24
    1864:	99 1f       	adc	r25, r25
    1866:	2a 95       	dec	r18
    1868:	e2 f7       	brpl	.-8      	; 0x1862 <Setpin_Direction+0x138>
    186a:	80 95       	com	r24
    186c:	84 23       	and	r24, r20
    186e:	8c 93       	st	X, r24
	    				 DDRC |=(copy_u8_value<<copy_u8_PIN_Id);
    1870:	a4 e3       	ldi	r26, 0x34	; 52
    1872:	b0 e0       	ldi	r27, 0x00	; 0
    1874:	e4 e3       	ldi	r30, 0x34	; 52
    1876:	f0 e0       	ldi	r31, 0x00	; 0
    1878:	80 81       	ld	r24, Z
    187a:	48 2f       	mov	r20, r24
    187c:	8e 81       	ldd	r24, Y+6	; 0x06
    187e:	28 2f       	mov	r18, r24
    1880:	30 e0       	ldi	r19, 0x00	; 0
    1882:	8d 81       	ldd	r24, Y+5	; 0x05
    1884:	88 2f       	mov	r24, r24
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	b9 01       	movw	r22, r18
    188a:	02 c0       	rjmp	.+4      	; 0x1890 <Setpin_Direction+0x166>
    188c:	66 0f       	add	r22, r22
    188e:	77 1f       	adc	r23, r23
    1890:	8a 95       	dec	r24
    1892:	e2 f7       	brpl	.-8      	; 0x188c <Setpin_Direction+0x162>
    1894:	cb 01       	movw	r24, r22
    1896:	84 2b       	or	r24, r20
    1898:	8c 93       	st	X, r24
    189a:	28 c0       	rjmp	.+80     	; 0x18ec <Setpin_Direction+0x1c2>
	 	 			   break;

	    case DIO_PORTD:
	    	 DDRD &=~(1<<copy_u8_PIN_Id);
    189c:	a1 e3       	ldi	r26, 0x31	; 49
    189e:	b0 e0       	ldi	r27, 0x00	; 0
    18a0:	e1 e3       	ldi	r30, 0x31	; 49
    18a2:	f0 e0       	ldi	r31, 0x00	; 0
    18a4:	80 81       	ld	r24, Z
    18a6:	48 2f       	mov	r20, r24
    18a8:	8d 81       	ldd	r24, Y+5	; 0x05
    18aa:	28 2f       	mov	r18, r24
    18ac:	30 e0       	ldi	r19, 0x00	; 0
    18ae:	81 e0       	ldi	r24, 0x01	; 1
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	02 c0       	rjmp	.+4      	; 0x18b8 <Setpin_Direction+0x18e>
    18b4:	88 0f       	add	r24, r24
    18b6:	99 1f       	adc	r25, r25
    18b8:	2a 95       	dec	r18
    18ba:	e2 f7       	brpl	.-8      	; 0x18b4 <Setpin_Direction+0x18a>
    18bc:	80 95       	com	r24
    18be:	84 23       	and	r24, r20
    18c0:	8c 93       	st	X, r24
	    				 DDRD |=(copy_u8_value<<copy_u8_PIN_Id);
    18c2:	a1 e3       	ldi	r26, 0x31	; 49
    18c4:	b0 e0       	ldi	r27, 0x00	; 0
    18c6:	e1 e3       	ldi	r30, 0x31	; 49
    18c8:	f0 e0       	ldi	r31, 0x00	; 0
    18ca:	80 81       	ld	r24, Z
    18cc:	48 2f       	mov	r20, r24
    18ce:	8e 81       	ldd	r24, Y+6	; 0x06
    18d0:	28 2f       	mov	r18, r24
    18d2:	30 e0       	ldi	r19, 0x00	; 0
    18d4:	8d 81       	ldd	r24, Y+5	; 0x05
    18d6:	88 2f       	mov	r24, r24
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	b9 01       	movw	r22, r18
    18dc:	02 c0       	rjmp	.+4      	; 0x18e2 <Setpin_Direction+0x1b8>
    18de:	66 0f       	add	r22, r22
    18e0:	77 1f       	adc	r23, r23
    18e2:	8a 95       	dec	r24
    18e4:	e2 f7       	brpl	.-8      	; 0x18de <Setpin_Direction+0x1b4>
    18e6:	cb 01       	movw	r24, r22
    18e8:	84 2b       	or	r24, r20
    18ea:	8c 93       	st	X, r24
					   break;

					   }

			ES_t local_enumError=DIO_OK;
    18ec:	1a 82       	std	Y+2, r1	; 0x02
    18ee:	02 c0       	rjmp	.+4      	; 0x18f4 <Setpin_Direction+0x1ca>

		}
		else
		{
			ES_t local_enumError=OUT_OF_RANGE;
    18f0:	83 e0       	ldi	r24, 0x03	; 3
    18f2:	89 83       	std	Y+1, r24	; 0x01

		}


			 return local_enumError;
    18f4:	8b 81       	ldd	r24, Y+3	; 0x03

}
    18f6:	28 96       	adiw	r28, 0x08	; 8
    18f8:	0f b6       	in	r0, 0x3f	; 63
    18fa:	f8 94       	cli
    18fc:	de bf       	out	0x3e, r29	; 62
    18fe:	0f be       	out	0x3f, r0	; 63
    1900:	cd bf       	out	0x3d, r28	; 61
    1902:	cf 91       	pop	r28
    1904:	df 91       	pop	r29
    1906:	08 95       	ret

00001908 <Setpin_value>:
	ES_t Setpin_value(u8 copy_u8_PortId,u8 copy_u8_PIN_Id,u8 copy_u8_value)
{
    1908:	df 93       	push	r29
    190a:	cf 93       	push	r28
    190c:	cd b7       	in	r28, 0x3d	; 61
    190e:	de b7       	in	r29, 0x3e	; 62
    1910:	28 97       	sbiw	r28, 0x08	; 8
    1912:	0f b6       	in	r0, 0x3f	; 63
    1914:	f8 94       	cli
    1916:	de bf       	out	0x3e, r29	; 62
    1918:	0f be       	out	0x3f, r0	; 63
    191a:	cd bf       	out	0x3d, r28	; 61
    191c:	8c 83       	std	Y+4, r24	; 0x04
    191e:	6d 83       	std	Y+5, r22	; 0x05
    1920:	4e 83       	std	Y+6, r20	; 0x06
		ES_t local_enumError=DIO_NOK;
    1922:	81 e0       	ldi	r24, 0x01	; 1
    1924:	8b 83       	std	Y+3, r24	; 0x03
					if(copy_u8_PortId<=DIO_PORTD &&copy_u8_PIN_Id<=DIO_PIN7&&copy_u8_value<=OUTPUT)
    1926:	8c 81       	ldd	r24, Y+4	; 0x04
    1928:	84 30       	cpi	r24, 0x04	; 4
    192a:	08 f0       	brcs	.+2      	; 0x192e <Setpin_value+0x26>
    192c:	d0 c0       	rjmp	.+416    	; 0x1ace <Setpin_value+0x1c6>
    192e:	8d 81       	ldd	r24, Y+5	; 0x05
    1930:	88 30       	cpi	r24, 0x08	; 8
    1932:	08 f0       	brcs	.+2      	; 0x1936 <Setpin_value+0x2e>
    1934:	cc c0       	rjmp	.+408    	; 0x1ace <Setpin_value+0x1c6>
    1936:	8e 81       	ldd	r24, Y+6	; 0x06
    1938:	82 30       	cpi	r24, 0x02	; 2
    193a:	08 f0       	brcs	.+2      	; 0x193e <Setpin_value+0x36>
    193c:	c8 c0       	rjmp	.+400    	; 0x1ace <Setpin_value+0x1c6>
					{
						switch(copy_u8_PortId)
    193e:	8c 81       	ldd	r24, Y+4	; 0x04
    1940:	28 2f       	mov	r18, r24
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	38 87       	std	Y+8, r19	; 0x08
    1946:	2f 83       	std	Y+7, r18	; 0x07
    1948:	6f 81       	ldd	r22, Y+7	; 0x07
    194a:	78 85       	ldd	r23, Y+8	; 0x08
    194c:	61 30       	cpi	r22, 0x01	; 1
    194e:	71 05       	cpc	r23, r1
    1950:	09 f4       	brne	.+2      	; 0x1954 <Setpin_value+0x4c>
    1952:	41 c0       	rjmp	.+130    	; 0x19d6 <Setpin_value+0xce>
    1954:	8f 81       	ldd	r24, Y+7	; 0x07
    1956:	98 85       	ldd	r25, Y+8	; 0x08
    1958:	82 30       	cpi	r24, 0x02	; 2
    195a:	91 05       	cpc	r25, r1
    195c:	34 f4       	brge	.+12     	; 0x196a <Setpin_value+0x62>
    195e:	2f 81       	ldd	r18, Y+7	; 0x07
    1960:	38 85       	ldd	r19, Y+8	; 0x08
    1962:	21 15       	cp	r18, r1
    1964:	31 05       	cpc	r19, r1
    1966:	71 f0       	breq	.+28     	; 0x1984 <Setpin_value+0x7c>
    1968:	b0 c0       	rjmp	.+352    	; 0x1aca <Setpin_value+0x1c2>
    196a:	6f 81       	ldd	r22, Y+7	; 0x07
    196c:	78 85       	ldd	r23, Y+8	; 0x08
    196e:	62 30       	cpi	r22, 0x02	; 2
    1970:	71 05       	cpc	r23, r1
    1972:	09 f4       	brne	.+2      	; 0x1976 <Setpin_value+0x6e>
    1974:	59 c0       	rjmp	.+178    	; 0x1a28 <Setpin_value+0x120>
    1976:	8f 81       	ldd	r24, Y+7	; 0x07
    1978:	98 85       	ldd	r25, Y+8	; 0x08
    197a:	83 30       	cpi	r24, 0x03	; 3
    197c:	91 05       	cpc	r25, r1
    197e:	09 f4       	brne	.+2      	; 0x1982 <Setpin_value+0x7a>
    1980:	7c c0       	rjmp	.+248    	; 0x1a7a <Setpin_value+0x172>
    1982:	a3 c0       	rjmp	.+326    	; 0x1aca <Setpin_value+0x1c2>
								   {
					 case DIO_PORTA:
						 PORTA &=~(1<<copy_u8_PIN_Id);
    1984:	ab e3       	ldi	r26, 0x3B	; 59
    1986:	b0 e0       	ldi	r27, 0x00	; 0
    1988:	eb e3       	ldi	r30, 0x3B	; 59
    198a:	f0 e0       	ldi	r31, 0x00	; 0
    198c:	80 81       	ld	r24, Z
    198e:	48 2f       	mov	r20, r24
    1990:	8d 81       	ldd	r24, Y+5	; 0x05
    1992:	28 2f       	mov	r18, r24
    1994:	30 e0       	ldi	r19, 0x00	; 0
    1996:	81 e0       	ldi	r24, 0x01	; 1
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	02 c0       	rjmp	.+4      	; 0x19a0 <Setpin_value+0x98>
    199c:	88 0f       	add	r24, r24
    199e:	99 1f       	adc	r25, r25
    19a0:	2a 95       	dec	r18
    19a2:	e2 f7       	brpl	.-8      	; 0x199c <Setpin_value+0x94>
    19a4:	80 95       	com	r24
    19a6:	84 23       	and	r24, r20
    19a8:	8c 93       	st	X, r24
						 PORTA |=(copy_u8_value<<copy_u8_PIN_Id);
    19aa:	ab e3       	ldi	r26, 0x3B	; 59
    19ac:	b0 e0       	ldi	r27, 0x00	; 0
    19ae:	eb e3       	ldi	r30, 0x3B	; 59
    19b0:	f0 e0       	ldi	r31, 0x00	; 0
    19b2:	80 81       	ld	r24, Z
    19b4:	48 2f       	mov	r20, r24
    19b6:	8e 81       	ldd	r24, Y+6	; 0x06
    19b8:	28 2f       	mov	r18, r24
    19ba:	30 e0       	ldi	r19, 0x00	; 0
    19bc:	8d 81       	ldd	r24, Y+5	; 0x05
    19be:	88 2f       	mov	r24, r24
    19c0:	90 e0       	ldi	r25, 0x00	; 0
    19c2:	b9 01       	movw	r22, r18
    19c4:	02 c0       	rjmp	.+4      	; 0x19ca <Setpin_value+0xc2>
    19c6:	66 0f       	add	r22, r22
    19c8:	77 1f       	adc	r23, r23
    19ca:	8a 95       	dec	r24
    19cc:	e2 f7       	brpl	.-8      	; 0x19c6 <Setpin_value+0xbe>
    19ce:	cb 01       	movw	r24, r22
    19d0:	84 2b       	or	r24, r20
    19d2:	8c 93       	st	X, r24
    19d4:	7a c0       	rjmp	.+244    	; 0x1aca <Setpin_value+0x1c2>
				 	                break;
				     case DIO_PORTB:
				    	 PORTB &=~(1<<copy_u8_PIN_Id);
    19d6:	a8 e3       	ldi	r26, 0x38	; 56
    19d8:	b0 e0       	ldi	r27, 0x00	; 0
    19da:	e8 e3       	ldi	r30, 0x38	; 56
    19dc:	f0 e0       	ldi	r31, 0x00	; 0
    19de:	80 81       	ld	r24, Z
    19e0:	48 2f       	mov	r20, r24
    19e2:	8d 81       	ldd	r24, Y+5	; 0x05
    19e4:	28 2f       	mov	r18, r24
    19e6:	30 e0       	ldi	r19, 0x00	; 0
    19e8:	81 e0       	ldi	r24, 0x01	; 1
    19ea:	90 e0       	ldi	r25, 0x00	; 0
    19ec:	02 c0       	rjmp	.+4      	; 0x19f2 <Setpin_value+0xea>
    19ee:	88 0f       	add	r24, r24
    19f0:	99 1f       	adc	r25, r25
    19f2:	2a 95       	dec	r18
    19f4:	e2 f7       	brpl	.-8      	; 0x19ee <Setpin_value+0xe6>
    19f6:	80 95       	com	r24
    19f8:	84 23       	and	r24, r20
    19fa:	8c 93       	st	X, r24
				    	 PORTB |=(copy_u8_value<<copy_u8_PIN_Id);
    19fc:	a8 e3       	ldi	r26, 0x38	; 56
    19fe:	b0 e0       	ldi	r27, 0x00	; 0
    1a00:	e8 e3       	ldi	r30, 0x38	; 56
    1a02:	f0 e0       	ldi	r31, 0x00	; 0
    1a04:	80 81       	ld	r24, Z
    1a06:	48 2f       	mov	r20, r24
    1a08:	8e 81       	ldd	r24, Y+6	; 0x06
    1a0a:	28 2f       	mov	r18, r24
    1a0c:	30 e0       	ldi	r19, 0x00	; 0
    1a0e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a10:	88 2f       	mov	r24, r24
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	b9 01       	movw	r22, r18
    1a16:	02 c0       	rjmp	.+4      	; 0x1a1c <Setpin_value+0x114>
    1a18:	66 0f       	add	r22, r22
    1a1a:	77 1f       	adc	r23, r23
    1a1c:	8a 95       	dec	r24
    1a1e:	e2 f7       	brpl	.-8      	; 0x1a18 <Setpin_value+0x110>
    1a20:	cb 01       	movw	r24, r22
    1a22:	84 2b       	or	r24, r20
    1a24:	8c 93       	st	X, r24
    1a26:	51 c0       	rjmp	.+162    	; 0x1aca <Setpin_value+0x1c2>
				  	            break;
				     case DIO_PORTC:
				    	 PORTC &=~(1<<copy_u8_PIN_Id);
    1a28:	a5 e3       	ldi	r26, 0x35	; 53
    1a2a:	b0 e0       	ldi	r27, 0x00	; 0
    1a2c:	e5 e3       	ldi	r30, 0x35	; 53
    1a2e:	f0 e0       	ldi	r31, 0x00	; 0
    1a30:	80 81       	ld	r24, Z
    1a32:	48 2f       	mov	r20, r24
    1a34:	8d 81       	ldd	r24, Y+5	; 0x05
    1a36:	28 2f       	mov	r18, r24
    1a38:	30 e0       	ldi	r19, 0x00	; 0
    1a3a:	81 e0       	ldi	r24, 0x01	; 1
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	02 c0       	rjmp	.+4      	; 0x1a44 <Setpin_value+0x13c>
    1a40:	88 0f       	add	r24, r24
    1a42:	99 1f       	adc	r25, r25
    1a44:	2a 95       	dec	r18
    1a46:	e2 f7       	brpl	.-8      	; 0x1a40 <Setpin_value+0x138>
    1a48:	80 95       	com	r24
    1a4a:	84 23       	and	r24, r20
    1a4c:	8c 93       	st	X, r24
				    	 PORTC |=(copy_u8_value<<copy_u8_PIN_Id);
    1a4e:	a5 e3       	ldi	r26, 0x35	; 53
    1a50:	b0 e0       	ldi	r27, 0x00	; 0
    1a52:	e5 e3       	ldi	r30, 0x35	; 53
    1a54:	f0 e0       	ldi	r31, 0x00	; 0
    1a56:	80 81       	ld	r24, Z
    1a58:	48 2f       	mov	r20, r24
    1a5a:	8e 81       	ldd	r24, Y+6	; 0x06
    1a5c:	28 2f       	mov	r18, r24
    1a5e:	30 e0       	ldi	r19, 0x00	; 0
    1a60:	8d 81       	ldd	r24, Y+5	; 0x05
    1a62:	88 2f       	mov	r24, r24
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	b9 01       	movw	r22, r18
    1a68:	02 c0       	rjmp	.+4      	; 0x1a6e <Setpin_value+0x166>
    1a6a:	66 0f       	add	r22, r22
    1a6c:	77 1f       	adc	r23, r23
    1a6e:	8a 95       	dec	r24
    1a70:	e2 f7       	brpl	.-8      	; 0x1a6a <Setpin_value+0x162>
    1a72:	cb 01       	movw	r24, r22
    1a74:	84 2b       	or	r24, r20
    1a76:	8c 93       	st	X, r24
    1a78:	28 c0       	rjmp	.+80     	; 0x1aca <Setpin_value+0x1c2>
				 	 			   break;

				    case DIO_PORTD:
				    	PORTD &=~(1<<copy_u8_PIN_Id);
    1a7a:	a2 e3       	ldi	r26, 0x32	; 50
    1a7c:	b0 e0       	ldi	r27, 0x00	; 0
    1a7e:	e2 e3       	ldi	r30, 0x32	; 50
    1a80:	f0 e0       	ldi	r31, 0x00	; 0
    1a82:	80 81       	ld	r24, Z
    1a84:	48 2f       	mov	r20, r24
    1a86:	8d 81       	ldd	r24, Y+5	; 0x05
    1a88:	28 2f       	mov	r18, r24
    1a8a:	30 e0       	ldi	r19, 0x00	; 0
    1a8c:	81 e0       	ldi	r24, 0x01	; 1
    1a8e:	90 e0       	ldi	r25, 0x00	; 0
    1a90:	02 c0       	rjmp	.+4      	; 0x1a96 <Setpin_value+0x18e>
    1a92:	88 0f       	add	r24, r24
    1a94:	99 1f       	adc	r25, r25
    1a96:	2a 95       	dec	r18
    1a98:	e2 f7       	brpl	.-8      	; 0x1a92 <Setpin_value+0x18a>
    1a9a:	80 95       	com	r24
    1a9c:	84 23       	and	r24, r20
    1a9e:	8c 93       	st	X, r24
				    	PORTD |=(copy_u8_value<<copy_u8_PIN_Id);
    1aa0:	a2 e3       	ldi	r26, 0x32	; 50
    1aa2:	b0 e0       	ldi	r27, 0x00	; 0
    1aa4:	e2 e3       	ldi	r30, 0x32	; 50
    1aa6:	f0 e0       	ldi	r31, 0x00	; 0
    1aa8:	80 81       	ld	r24, Z
    1aaa:	48 2f       	mov	r20, r24
    1aac:	8e 81       	ldd	r24, Y+6	; 0x06
    1aae:	28 2f       	mov	r18, r24
    1ab0:	30 e0       	ldi	r19, 0x00	; 0
    1ab2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ab4:	88 2f       	mov	r24, r24
    1ab6:	90 e0       	ldi	r25, 0x00	; 0
    1ab8:	b9 01       	movw	r22, r18
    1aba:	02 c0       	rjmp	.+4      	; 0x1ac0 <Setpin_value+0x1b8>
    1abc:	66 0f       	add	r22, r22
    1abe:	77 1f       	adc	r23, r23
    1ac0:	8a 95       	dec	r24
    1ac2:	e2 f7       	brpl	.-8      	; 0x1abc <Setpin_value+0x1b4>
    1ac4:	cb 01       	movw	r24, r22
    1ac6:	84 2b       	or	r24, r20
    1ac8:	8c 93       	st	X, r24
								   break;

								   }

						ES_t local_enumError=DIO_OK;
    1aca:	1a 82       	std	Y+2, r1	; 0x02
    1acc:	02 c0       	rjmp	.+4      	; 0x1ad2 <Setpin_value+0x1ca>

					}
					else
					{
						ES_t local_enumError=OUT_OF_RANGE;
    1ace:	83 e0       	ldi	r24, 0x03	; 3
    1ad0:	89 83       	std	Y+1, r24	; 0x01

					}


						 return local_enumError;
    1ad2:	8b 81       	ldd	r24, Y+3	; 0x03

			}
    1ad4:	28 96       	adiw	r28, 0x08	; 8
    1ad6:	0f b6       	in	r0, 0x3f	; 63
    1ad8:	f8 94       	cli
    1ada:	de bf       	out	0x3e, r29	; 62
    1adc:	0f be       	out	0x3f, r0	; 63
    1ade:	cd bf       	out	0x3d, r28	; 61
    1ae0:	cf 91       	pop	r28
    1ae2:	df 91       	pop	r29
    1ae4:	08 95       	ret

00001ae6 <TogglePIN>:

	ES_t TogglePIN(u8 copy_u8_PortId,u8  copy_u8_PIN_Id)
				{
    1ae6:	df 93       	push	r29
    1ae8:	cf 93       	push	r28
    1aea:	cd b7       	in	r28, 0x3d	; 61
    1aec:	de b7       	in	r29, 0x3e	; 62
    1aee:	27 97       	sbiw	r28, 0x07	; 7
    1af0:	0f b6       	in	r0, 0x3f	; 63
    1af2:	f8 94       	cli
    1af4:	de bf       	out	0x3e, r29	; 62
    1af6:	0f be       	out	0x3f, r0	; 63
    1af8:	cd bf       	out	0x3d, r28	; 61
    1afa:	8c 83       	std	Y+4, r24	; 0x04
    1afc:	6d 83       	std	Y+5, r22	; 0x05
					ES_t local_enumError=DIO_NOK;
    1afe:	81 e0       	ldi	r24, 0x01	; 1
    1b00:	8b 83       	std	Y+3, r24	; 0x03

					if(copy_u8_PortId<=DIO_PORTD &&copy_u8_PIN_Id<=DIO_PIN7)
    1b02:	8c 81       	ldd	r24, Y+4	; 0x04
    1b04:	84 30       	cpi	r24, 0x04	; 4
    1b06:	08 f0       	brcs	.+2      	; 0x1b0a <TogglePIN+0x24>
    1b08:	74 c0       	rjmp	.+232    	; 0x1bf2 <TogglePIN+0x10c>
    1b0a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b0c:	88 30       	cpi	r24, 0x08	; 8
    1b0e:	08 f0       	brcs	.+2      	; 0x1b12 <TogglePIN+0x2c>
    1b10:	70 c0       	rjmp	.+224    	; 0x1bf2 <TogglePIN+0x10c>
					{

						 switch(copy_u8_PortId)
    1b12:	8c 81       	ldd	r24, Y+4	; 0x04
    1b14:	28 2f       	mov	r18, r24
    1b16:	30 e0       	ldi	r19, 0x00	; 0
    1b18:	3f 83       	std	Y+7, r19	; 0x07
    1b1a:	2e 83       	std	Y+6, r18	; 0x06
    1b1c:	8e 81       	ldd	r24, Y+6	; 0x06
    1b1e:	9f 81       	ldd	r25, Y+7	; 0x07
    1b20:	81 30       	cpi	r24, 0x01	; 1
    1b22:	91 05       	cpc	r25, r1
    1b24:	49 f1       	breq	.+82     	; 0x1b78 <TogglePIN+0x92>
    1b26:	2e 81       	ldd	r18, Y+6	; 0x06
    1b28:	3f 81       	ldd	r19, Y+7	; 0x07
    1b2a:	22 30       	cpi	r18, 0x02	; 2
    1b2c:	31 05       	cpc	r19, r1
    1b2e:	2c f4       	brge	.+10     	; 0x1b3a <TogglePIN+0x54>
    1b30:	8e 81       	ldd	r24, Y+6	; 0x06
    1b32:	9f 81       	ldd	r25, Y+7	; 0x07
    1b34:	00 97       	sbiw	r24, 0x00	; 0
    1b36:	61 f0       	breq	.+24     	; 0x1b50 <TogglePIN+0x6a>
    1b38:	5a c0       	rjmp	.+180    	; 0x1bee <TogglePIN+0x108>
    1b3a:	2e 81       	ldd	r18, Y+6	; 0x06
    1b3c:	3f 81       	ldd	r19, Y+7	; 0x07
    1b3e:	22 30       	cpi	r18, 0x02	; 2
    1b40:	31 05       	cpc	r19, r1
    1b42:	71 f1       	breq	.+92     	; 0x1ba0 <TogglePIN+0xba>
    1b44:	8e 81       	ldd	r24, Y+6	; 0x06
    1b46:	9f 81       	ldd	r25, Y+7	; 0x07
    1b48:	83 30       	cpi	r24, 0x03	; 3
    1b4a:	91 05       	cpc	r25, r1
    1b4c:	e9 f1       	breq	.+122    	; 0x1bc8 <TogglePIN+0xe2>
    1b4e:	4f c0       	rjmp	.+158    	; 0x1bee <TogglePIN+0x108>
		   	 {
					  case DIO_PORTA:
					 	 PORTA ^=(1<<copy_u8_PIN_Id);
    1b50:	ab e3       	ldi	r26, 0x3B	; 59
    1b52:	b0 e0       	ldi	r27, 0x00	; 0
    1b54:	eb e3       	ldi	r30, 0x3B	; 59
    1b56:	f0 e0       	ldi	r31, 0x00	; 0
    1b58:	80 81       	ld	r24, Z
    1b5a:	48 2f       	mov	r20, r24
    1b5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b5e:	28 2f       	mov	r18, r24
    1b60:	30 e0       	ldi	r19, 0x00	; 0
    1b62:	81 e0       	ldi	r24, 0x01	; 1
    1b64:	90 e0       	ldi	r25, 0x00	; 0
    1b66:	02 2e       	mov	r0, r18
    1b68:	02 c0       	rjmp	.+4      	; 0x1b6e <TogglePIN+0x88>
    1b6a:	88 0f       	add	r24, r24
    1b6c:	99 1f       	adc	r25, r25
    1b6e:	0a 94       	dec	r0
    1b70:	e2 f7       	brpl	.-8      	; 0x1b6a <TogglePIN+0x84>
    1b72:	84 27       	eor	r24, r20
    1b74:	8c 93       	st	X, r24
    1b76:	3b c0       	rjmp	.+118    	; 0x1bee <TogglePIN+0x108>
					 	 break;

					  case DIO_PORTB:
					 	 PORTB ^=(1<<copy_u8_PIN_Id);
    1b78:	a8 e3       	ldi	r26, 0x38	; 56
    1b7a:	b0 e0       	ldi	r27, 0x00	; 0
    1b7c:	e8 e3       	ldi	r30, 0x38	; 56
    1b7e:	f0 e0       	ldi	r31, 0x00	; 0
    1b80:	80 81       	ld	r24, Z
    1b82:	48 2f       	mov	r20, r24
    1b84:	8d 81       	ldd	r24, Y+5	; 0x05
    1b86:	28 2f       	mov	r18, r24
    1b88:	30 e0       	ldi	r19, 0x00	; 0
    1b8a:	81 e0       	ldi	r24, 0x01	; 1
    1b8c:	90 e0       	ldi	r25, 0x00	; 0
    1b8e:	02 2e       	mov	r0, r18
    1b90:	02 c0       	rjmp	.+4      	; 0x1b96 <TogglePIN+0xb0>
    1b92:	88 0f       	add	r24, r24
    1b94:	99 1f       	adc	r25, r25
    1b96:	0a 94       	dec	r0
    1b98:	e2 f7       	brpl	.-8      	; 0x1b92 <TogglePIN+0xac>
    1b9a:	84 27       	eor	r24, r20
    1b9c:	8c 93       	st	X, r24
    1b9e:	27 c0       	rjmp	.+78     	; 0x1bee <TogglePIN+0x108>

					     		 break;
					  case DIO_PORTC:
					 	 PORTC ^=(1<<copy_u8_PIN_Id);
    1ba0:	a5 e3       	ldi	r26, 0x35	; 53
    1ba2:	b0 e0       	ldi	r27, 0x00	; 0
    1ba4:	e5 e3       	ldi	r30, 0x35	; 53
    1ba6:	f0 e0       	ldi	r31, 0x00	; 0
    1ba8:	80 81       	ld	r24, Z
    1baa:	48 2f       	mov	r20, r24
    1bac:	8d 81       	ldd	r24, Y+5	; 0x05
    1bae:	28 2f       	mov	r18, r24
    1bb0:	30 e0       	ldi	r19, 0x00	; 0
    1bb2:	81 e0       	ldi	r24, 0x01	; 1
    1bb4:	90 e0       	ldi	r25, 0x00	; 0
    1bb6:	02 2e       	mov	r0, r18
    1bb8:	02 c0       	rjmp	.+4      	; 0x1bbe <TogglePIN+0xd8>
    1bba:	88 0f       	add	r24, r24
    1bbc:	99 1f       	adc	r25, r25
    1bbe:	0a 94       	dec	r0
    1bc0:	e2 f7       	brpl	.-8      	; 0x1bba <TogglePIN+0xd4>
    1bc2:	84 27       	eor	r24, r20
    1bc4:	8c 93       	st	X, r24
    1bc6:	13 c0       	rjmp	.+38     	; 0x1bee <TogglePIN+0x108>

					     		 break;
					  case DIO_PORTD:
					 	PORTD ^=(1<<copy_u8_PIN_Id);
    1bc8:	a2 e3       	ldi	r26, 0x32	; 50
    1bca:	b0 e0       	ldi	r27, 0x00	; 0
    1bcc:	e2 e3       	ldi	r30, 0x32	; 50
    1bce:	f0 e0       	ldi	r31, 0x00	; 0
    1bd0:	80 81       	ld	r24, Z
    1bd2:	48 2f       	mov	r20, r24
    1bd4:	8d 81       	ldd	r24, Y+5	; 0x05
    1bd6:	28 2f       	mov	r18, r24
    1bd8:	30 e0       	ldi	r19, 0x00	; 0
    1bda:	81 e0       	ldi	r24, 0x01	; 1
    1bdc:	90 e0       	ldi	r25, 0x00	; 0
    1bde:	02 2e       	mov	r0, r18
    1be0:	02 c0       	rjmp	.+4      	; 0x1be6 <TogglePIN+0x100>
    1be2:	88 0f       	add	r24, r24
    1be4:	99 1f       	adc	r25, r25
    1be6:	0a 94       	dec	r0
    1be8:	e2 f7       	brpl	.-8      	; 0x1be2 <TogglePIN+0xfc>
    1bea:	84 27       	eor	r24, r20
    1bec:	8c 93       	st	X, r24

					     		 break;
	     }

						ES_t local_enumError=DIO_OK;
    1bee:	1a 82       	std	Y+2, r1	; 0x02
    1bf0:	02 c0       	rjmp	.+4      	; 0x1bf6 <TogglePIN+0x110>
					}
					else
					{
				ES_t local_enumError=OUT_OF_RANGE;
    1bf2:	83 e0       	ldi	r24, 0x03	; 3
    1bf4:	89 83       	std	Y+1, r24	; 0x01

				}

					return local_enumError;
    1bf6:	8b 81       	ldd	r24, Y+3	; 0x03

}
    1bf8:	27 96       	adiw	r28, 0x07	; 7
    1bfa:	0f b6       	in	r0, 0x3f	; 63
    1bfc:	f8 94       	cli
    1bfe:	de bf       	out	0x3e, r29	; 62
    1c00:	0f be       	out	0x3f, r0	; 63
    1c02:	cd bf       	out	0x3d, r28	; 61
    1c04:	cf 91       	pop	r28
    1c06:	df 91       	pop	r29
    1c08:	08 95       	ret

00001c0a <GetPin>:
	ES_t GetPin(u8 copy_u8_PortId,u8 copy_u8_PIN_Id,u8 *copy_pu8_value)
{
    1c0a:	df 93       	push	r29
    1c0c:	cf 93       	push	r28
    1c0e:	cd b7       	in	r28, 0x3d	; 61
    1c10:	de b7       	in	r29, 0x3e	; 62
    1c12:	2a 97       	sbiw	r28, 0x0a	; 10
    1c14:	0f b6       	in	r0, 0x3f	; 63
    1c16:	f8 94       	cli
    1c18:	de bf       	out	0x3e, r29	; 62
    1c1a:	0f be       	out	0x3f, r0	; 63
    1c1c:	cd bf       	out	0x3d, r28	; 61
    1c1e:	8d 83       	std	Y+5, r24	; 0x05
    1c20:	6e 83       	std	Y+6, r22	; 0x06
    1c22:	58 87       	std	Y+8, r21	; 0x08
    1c24:	4f 83       	std	Y+7, r20	; 0x07
		ES_t local_enumError=DIO_NOK;
    1c26:	81 e0       	ldi	r24, 0x01	; 1
    1c28:	8c 83       	std	Y+4, r24	; 0x04
          if(copy_pu8_value!=NULL)
    1c2a:	8f 81       	ldd	r24, Y+7	; 0x07
    1c2c:	98 85       	ldd	r25, Y+8	; 0x08
    1c2e:	00 97       	sbiw	r24, 0x00	; 0
    1c30:	09 f4       	brne	.+2      	; 0x1c34 <GetPin+0x2a>
    1c32:	7d c0       	rjmp	.+250    	; 0x1d2e <GetPin+0x124>
 {
        	  if(copy_u8_PortId<=DIO_PORTD&&copy_u8_PIN_Id<=DIO_PIN7)
    1c34:	8d 81       	ldd	r24, Y+5	; 0x05
    1c36:	84 30       	cpi	r24, 0x04	; 4
    1c38:	08 f0       	brcs	.+2      	; 0x1c3c <GetPin+0x32>
    1c3a:	76 c0       	rjmp	.+236    	; 0x1d28 <GetPin+0x11e>
    1c3c:	8e 81       	ldd	r24, Y+6	; 0x06
    1c3e:	88 30       	cpi	r24, 0x08	; 8
    1c40:	08 f0       	brcs	.+2      	; 0x1c44 <GetPin+0x3a>
    1c42:	72 c0       	rjmp	.+228    	; 0x1d28 <GetPin+0x11e>
        	  {
        			 switch(copy_u8_PortId)
    1c44:	8d 81       	ldd	r24, Y+5	; 0x05
    1c46:	28 2f       	mov	r18, r24
    1c48:	30 e0       	ldi	r19, 0x00	; 0
    1c4a:	3a 87       	std	Y+10, r19	; 0x0a
    1c4c:	29 87       	std	Y+9, r18	; 0x09
    1c4e:	49 85       	ldd	r20, Y+9	; 0x09
    1c50:	5a 85       	ldd	r21, Y+10	; 0x0a
    1c52:	41 30       	cpi	r20, 0x01	; 1
    1c54:	51 05       	cpc	r21, r1
    1c56:	59 f1       	breq	.+86     	; 0x1cae <GetPin+0xa4>
    1c58:	89 85       	ldd	r24, Y+9	; 0x09
    1c5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c5c:	82 30       	cpi	r24, 0x02	; 2
    1c5e:	91 05       	cpc	r25, r1
    1c60:	34 f4       	brge	.+12     	; 0x1c6e <GetPin+0x64>
    1c62:	29 85       	ldd	r18, Y+9	; 0x09
    1c64:	3a 85       	ldd	r19, Y+10	; 0x0a
    1c66:	21 15       	cp	r18, r1
    1c68:	31 05       	cpc	r19, r1
    1c6a:	69 f0       	breq	.+26     	; 0x1c86 <GetPin+0x7c>
    1c6c:	5b c0       	rjmp	.+182    	; 0x1d24 <GetPin+0x11a>
    1c6e:	49 85       	ldd	r20, Y+9	; 0x09
    1c70:	5a 85       	ldd	r21, Y+10	; 0x0a
    1c72:	42 30       	cpi	r20, 0x02	; 2
    1c74:	51 05       	cpc	r21, r1
    1c76:	79 f1       	breq	.+94     	; 0x1cd6 <GetPin+0xcc>
    1c78:	89 85       	ldd	r24, Y+9	; 0x09
    1c7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c7c:	83 30       	cpi	r24, 0x03	; 3
    1c7e:	91 05       	cpc	r25, r1
    1c80:	09 f4       	brne	.+2      	; 0x1c84 <GetPin+0x7a>
    1c82:	3d c0       	rjmp	.+122    	; 0x1cfe <GetPin+0xf4>
    1c84:	4f c0       	rjmp	.+158    	; 0x1d24 <GetPin+0x11a>
        			   	 {
        						  case DIO_PORTA:
        							  *copy_pu8_value=((PINA>>copy_u8_PIN_Id)&1);
    1c86:	e9 e3       	ldi	r30, 0x39	; 57
    1c88:	f0 e0       	ldi	r31, 0x00	; 0
    1c8a:	80 81       	ld	r24, Z
    1c8c:	28 2f       	mov	r18, r24
    1c8e:	30 e0       	ldi	r19, 0x00	; 0
    1c90:	8e 81       	ldd	r24, Y+6	; 0x06
    1c92:	88 2f       	mov	r24, r24
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	a9 01       	movw	r20, r18
    1c98:	02 c0       	rjmp	.+4      	; 0x1c9e <GetPin+0x94>
    1c9a:	55 95       	asr	r21
    1c9c:	47 95       	ror	r20
    1c9e:	8a 95       	dec	r24
    1ca0:	e2 f7       	brpl	.-8      	; 0x1c9a <GetPin+0x90>
    1ca2:	ca 01       	movw	r24, r20
    1ca4:	81 70       	andi	r24, 0x01	; 1
    1ca6:	ef 81       	ldd	r30, Y+7	; 0x07
    1ca8:	f8 85       	ldd	r31, Y+8	; 0x08
    1caa:	80 83       	st	Z, r24
    1cac:	3b c0       	rjmp	.+118    	; 0x1d24 <GetPin+0x11a>
        						 	 break;

        						  case DIO_PORTB:
        							  *copy_pu8_value=((PINB>>copy_u8_PIN_Id)&1);
    1cae:	e6 e3       	ldi	r30, 0x36	; 54
    1cb0:	f0 e0       	ldi	r31, 0x00	; 0
    1cb2:	80 81       	ld	r24, Z
    1cb4:	28 2f       	mov	r18, r24
    1cb6:	30 e0       	ldi	r19, 0x00	; 0
    1cb8:	8e 81       	ldd	r24, Y+6	; 0x06
    1cba:	88 2f       	mov	r24, r24
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	a9 01       	movw	r20, r18
    1cc0:	02 c0       	rjmp	.+4      	; 0x1cc6 <GetPin+0xbc>
    1cc2:	55 95       	asr	r21
    1cc4:	47 95       	ror	r20
    1cc6:	8a 95       	dec	r24
    1cc8:	e2 f7       	brpl	.-8      	; 0x1cc2 <GetPin+0xb8>
    1cca:	ca 01       	movw	r24, r20
    1ccc:	81 70       	andi	r24, 0x01	; 1
    1cce:	ef 81       	ldd	r30, Y+7	; 0x07
    1cd0:	f8 85       	ldd	r31, Y+8	; 0x08
    1cd2:	80 83       	st	Z, r24
    1cd4:	27 c0       	rjmp	.+78     	; 0x1d24 <GetPin+0x11a>

        						     		 break;
        						  case DIO_PORTC:
        							  *copy_pu8_value=((PINC>>copy_u8_PIN_Id)&1);
    1cd6:	e3 e3       	ldi	r30, 0x33	; 51
    1cd8:	f0 e0       	ldi	r31, 0x00	; 0
    1cda:	80 81       	ld	r24, Z
    1cdc:	28 2f       	mov	r18, r24
    1cde:	30 e0       	ldi	r19, 0x00	; 0
    1ce0:	8e 81       	ldd	r24, Y+6	; 0x06
    1ce2:	88 2f       	mov	r24, r24
    1ce4:	90 e0       	ldi	r25, 0x00	; 0
    1ce6:	a9 01       	movw	r20, r18
    1ce8:	02 c0       	rjmp	.+4      	; 0x1cee <GetPin+0xe4>
    1cea:	55 95       	asr	r21
    1cec:	47 95       	ror	r20
    1cee:	8a 95       	dec	r24
    1cf0:	e2 f7       	brpl	.-8      	; 0x1cea <GetPin+0xe0>
    1cf2:	ca 01       	movw	r24, r20
    1cf4:	81 70       	andi	r24, 0x01	; 1
    1cf6:	ef 81       	ldd	r30, Y+7	; 0x07
    1cf8:	f8 85       	ldd	r31, Y+8	; 0x08
    1cfa:	80 83       	st	Z, r24
    1cfc:	13 c0       	rjmp	.+38     	; 0x1d24 <GetPin+0x11a>

        						     		 break;
        						  case DIO_PORTD:
        							  *copy_pu8_value=((PIND>>copy_u8_PIN_Id)&1);
    1cfe:	e0 e3       	ldi	r30, 0x30	; 48
    1d00:	f0 e0       	ldi	r31, 0x00	; 0
    1d02:	80 81       	ld	r24, Z
    1d04:	28 2f       	mov	r18, r24
    1d06:	30 e0       	ldi	r19, 0x00	; 0
    1d08:	8e 81       	ldd	r24, Y+6	; 0x06
    1d0a:	88 2f       	mov	r24, r24
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	a9 01       	movw	r20, r18
    1d10:	02 c0       	rjmp	.+4      	; 0x1d16 <GetPin+0x10c>
    1d12:	55 95       	asr	r21
    1d14:	47 95       	ror	r20
    1d16:	8a 95       	dec	r24
    1d18:	e2 f7       	brpl	.-8      	; 0x1d12 <GetPin+0x108>
    1d1a:	ca 01       	movw	r24, r20
    1d1c:	81 70       	andi	r24, 0x01	; 1
    1d1e:	ef 81       	ldd	r30, Y+7	; 0x07
    1d20:	f8 85       	ldd	r31, Y+8	; 0x08
    1d22:	80 83       	st	Z, r24

        						     		 break;
        		     }


					ES_t local_enumError=DIO_OK;
    1d24:	1b 82       	std	Y+3, r1	; 0x03
    1d26:	05 c0       	rjmp	.+10     	; 0x1d32 <GetPin+0x128>
        	  }
 else
        	  {
    	ES_t local_enumError=OUT_OF_RANGE;
    1d28:	83 e0       	ldi	r24, 0x03	; 3
    1d2a:	8a 83       	std	Y+2, r24	; 0x02
    1d2c:	02 c0       	rjmp	.+4      	; 0x1d32 <GetPin+0x128>

}

else
					{
				ES_t local_enumError=DIO_NULLPOINTER;
    1d2e:	82 e0       	ldi	r24, 0x02	; 2
    1d30:	89 83       	std	Y+1, r24	; 0x01

				}


					 return local_enumError;
    1d32:	8c 81       	ldd	r24, Y+4	; 0x04

}
    1d34:	2a 96       	adiw	r28, 0x0a	; 10
    1d36:	0f b6       	in	r0, 0x3f	; 63
    1d38:	f8 94       	cli
    1d3a:	de bf       	out	0x3e, r29	; 62
    1d3c:	0f be       	out	0x3f, r0	; 63
    1d3e:	cd bf       	out	0x3d, r28	; 61
    1d40:	cf 91       	pop	r28
    1d42:	df 91       	pop	r29
    1d44:	08 95       	ret

00001d46 <GetPressedKey>:
#include "KEY_PAD_private.h"



ES_t GetPressedKey (void)
{
    1d46:	df 93       	push	r29
    1d48:	cf 93       	push	r28
    1d4a:	00 d0       	rcall	.+0      	; 0x1d4c <GetPressedKey+0x6>
    1d4c:	00 d0       	rcall	.+0      	; 0x1d4e <GetPressedKey+0x8>
    1d4e:	0f 92       	push	r0
    1d50:	cd b7       	in	r28, 0x3d	; 61
    1d52:	de b7       	in	r29, 0x3e	; 62
u8 Local_u8PressedKey= Not_Pressed,Local_u8CoulmnsIndex,Local_u8RowsIndex,Local_u8PinState;
    1d54:	8f ef       	ldi	r24, 0xFF	; 255
    1d56:	8b 83       	std	Y+3, r24	; 0x03

static u8 Local_u8KPD_Arr[Rows_Num][Coulmns_Num]=KPD_ARR;
static u8 Local_u8KPD_CoulmnsArr[Coulmns_Num] = {C1_Pin  ,C2_Pin  ,C3_Pin  ,C4_Pin  };
static u8 Local_u8KPD_RowsArr[Rows_Num] = { R1_Pin  ,R2_Pin  ,R3_Pin  ,R4_Pin  };

for(Local_u8CoulmnsIndex=0;  Local_u8CoulmnsIndex < Coulmns_Num; Local_u8CoulmnsIndex++)
    1d58:	1a 82       	std	Y+2, r1	; 0x02
    1d5a:	5e c0       	rjmp	.+188    	; 0x1e18 <GetPressedKey+0xd2>
{
	//ACTIVATE COULMN
	Setpin_value(PORT,Local_u8KPD_CoulmnsArr[Local_u8CoulmnsIndex], DIO_U8LOW);
    1d5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d5e:	88 2f       	mov	r24, r24
    1d60:	90 e0       	ldi	r25, 0x00	; 0
    1d62:	fc 01       	movw	r30, r24
    1d64:	eb 54       	subi	r30, 0x4B	; 75
    1d66:	ff 4f       	sbci	r31, 0xFF	; 255
    1d68:	90 81       	ld	r25, Z
    1d6a:	83 e0       	ldi	r24, 0x03	; 3
    1d6c:	69 2f       	mov	r22, r25
    1d6e:	40 e0       	ldi	r20, 0x00	; 0
    1d70:	0e 94 84 0c 	call	0x1908	; 0x1908 <Setpin_value>


	for(Local_u8RowsIndex=0; Local_u8RowsIndex < Rows_Num; Local_u8RowsIndex++)
    1d74:	19 82       	std	Y+1, r1	; 0x01
    1d76:	3d c0       	rjmp	.+122    	; 0x1df2 <GetPressedKey+0xac>
	{

      GetPin(PORT,Local_u8KPD_RowsArr[Local_u8RowsIndex],  &Local_u8PinState);
    1d78:	89 81       	ldd	r24, Y+1	; 0x01
    1d7a:	88 2f       	mov	r24, r24
    1d7c:	90 e0       	ldi	r25, 0x00	; 0
    1d7e:	fc 01       	movw	r30, r24
    1d80:	ef 54       	subi	r30, 0x4F	; 79
    1d82:	ff 4f       	sbci	r31, 0xFF	; 255
    1d84:	90 81       	ld	r25, Z
    1d86:	9e 01       	movw	r18, r28
    1d88:	2c 5f       	subi	r18, 0xFC	; 252
    1d8a:	3f 4f       	sbci	r19, 0xFF	; 255
    1d8c:	83 e0       	ldi	r24, 0x03	; 3
    1d8e:	69 2f       	mov	r22, r25
    1d90:	a9 01       	movw	r20, r18
    1d92:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <GetPin>

if(Local_u8PinState==DIO_U8LOW)
    1d96:	8c 81       	ldd	r24, Y+4	; 0x04
    1d98:	88 23       	and	r24, r24
    1d9a:	41 f5       	brne	.+80     	; 0x1dec <GetPressedKey+0xa6>
{
	Local_u8PressedKey=Local_u8KPD_Arr[ Local_u8RowsIndex][Local_u8CoulmnsIndex];
    1d9c:	89 81       	ldd	r24, Y+1	; 0x01
    1d9e:	48 2f       	mov	r20, r24
    1da0:	50 e0       	ldi	r21, 0x00	; 0
    1da2:	8a 81       	ldd	r24, Y+2	; 0x02
    1da4:	28 2f       	mov	r18, r24
    1da6:	30 e0       	ldi	r19, 0x00	; 0
    1da8:	ca 01       	movw	r24, r20
    1daa:	88 0f       	add	r24, r24
    1dac:	99 1f       	adc	r25, r25
    1dae:	88 0f       	add	r24, r24
    1db0:	99 1f       	adc	r25, r25
    1db2:	82 0f       	add	r24, r18
    1db4:	93 1f       	adc	r25, r19
    1db6:	fc 01       	movw	r30, r24
    1db8:	e7 54       	subi	r30, 0x47	; 71
    1dba:	ff 4f       	sbci	r31, 0xFF	; 255
    1dbc:	80 81       	ld	r24, Z
    1dbe:	8b 83       	std	Y+3, r24	; 0x03
    1dc0:	0f c0       	rjmp	.+30     	; 0x1de0 <GetPressedKey+0x9a>
	//POLLING
	while(Local_u8PinState==DIO_U8LOW)
	{
		GetPin(PORT,Local_u8KPD_RowsArr[Local_u8RowsIndex],  &Local_u8PinState);
    1dc2:	89 81       	ldd	r24, Y+1	; 0x01
    1dc4:	88 2f       	mov	r24, r24
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	fc 01       	movw	r30, r24
    1dca:	ef 54       	subi	r30, 0x4F	; 79
    1dcc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dce:	90 81       	ld	r25, Z
    1dd0:	9e 01       	movw	r18, r28
    1dd2:	2c 5f       	subi	r18, 0xFC	; 252
    1dd4:	3f 4f       	sbci	r19, 0xFF	; 255
    1dd6:	83 e0       	ldi	r24, 0x03	; 3
    1dd8:	69 2f       	mov	r22, r25
    1dda:	a9 01       	movw	r20, r18
    1ddc:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <GetPin>

if(Local_u8PinState==DIO_U8LOW)
{
	Local_u8PressedKey=Local_u8KPD_Arr[ Local_u8RowsIndex][Local_u8CoulmnsIndex];
	//POLLING
	while(Local_u8PinState==DIO_U8LOW)
    1de0:	8c 81       	ldd	r24, Y+4	; 0x04
    1de2:	88 23       	and	r24, r24
    1de4:	71 f3       	breq	.-36     	; 0x1dc2 <GetPressedKey+0x7c>
	{
		GetPin(PORT,Local_u8KPD_RowsArr[Local_u8RowsIndex],  &Local_u8PinState);
	}


	return Local_u8PressedKey ;
    1de6:	8b 81       	ldd	r24, Y+3	; 0x03
    1de8:	8d 83       	std	Y+5, r24	; 0x05
    1dea:	1c c0       	rjmp	.+56     	; 0x1e24 <GetPressedKey+0xde>
{
	//ACTIVATE COULMN
	Setpin_value(PORT,Local_u8KPD_CoulmnsArr[Local_u8CoulmnsIndex], DIO_U8LOW);


	for(Local_u8RowsIndex=0; Local_u8RowsIndex < Rows_Num; Local_u8RowsIndex++)
    1dec:	89 81       	ldd	r24, Y+1	; 0x01
    1dee:	8f 5f       	subi	r24, 0xFF	; 255
    1df0:	89 83       	std	Y+1, r24	; 0x01
    1df2:	89 81       	ldd	r24, Y+1	; 0x01
    1df4:	84 30       	cpi	r24, 0x04	; 4
    1df6:	08 f4       	brcc	.+2      	; 0x1dfa <GetPressedKey+0xb4>
    1df8:	bf cf       	rjmp	.-130    	; 0x1d78 <GetPressedKey+0x32>
}
	}


	//DE ACTIVATE COULMN
		Setpin_value(PORT,Local_u8KPD_CoulmnsArr[Local_u8CoulmnsIndex], DIO_U8HIGH);
    1dfa:	8a 81       	ldd	r24, Y+2	; 0x02
    1dfc:	88 2f       	mov	r24, r24
    1dfe:	90 e0       	ldi	r25, 0x00	; 0
    1e00:	fc 01       	movw	r30, r24
    1e02:	eb 54       	subi	r30, 0x4B	; 75
    1e04:	ff 4f       	sbci	r31, 0xFF	; 255
    1e06:	90 81       	ld	r25, Z
    1e08:	83 e0       	ldi	r24, 0x03	; 3
    1e0a:	69 2f       	mov	r22, r25
    1e0c:	41 e0       	ldi	r20, 0x01	; 1
    1e0e:	0e 94 84 0c 	call	0x1908	; 0x1908 <Setpin_value>

static u8 Local_u8KPD_Arr[Rows_Num][Coulmns_Num]=KPD_ARR;
static u8 Local_u8KPD_CoulmnsArr[Coulmns_Num] = {C1_Pin  ,C2_Pin  ,C3_Pin  ,C4_Pin  };
static u8 Local_u8KPD_RowsArr[Rows_Num] = { R1_Pin  ,R2_Pin  ,R3_Pin  ,R4_Pin  };

for(Local_u8CoulmnsIndex=0;  Local_u8CoulmnsIndex < Coulmns_Num; Local_u8CoulmnsIndex++)
    1e12:	8a 81       	ldd	r24, Y+2	; 0x02
    1e14:	8f 5f       	subi	r24, 0xFF	; 255
    1e16:	8a 83       	std	Y+2, r24	; 0x02
    1e18:	8a 81       	ldd	r24, Y+2	; 0x02
    1e1a:	84 30       	cpi	r24, 0x04	; 4
    1e1c:	08 f4       	brcc	.+2      	; 0x1e20 <GetPressedKey+0xda>
    1e1e:	9e cf       	rjmp	.-196    	; 0x1d5c <GetPressedKey+0x16>



}

	return Local_u8PressedKey;
    1e20:	8b 81       	ldd	r24, Y+3	; 0x03
    1e22:	8d 83       	std	Y+5, r24	; 0x05
    1e24:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1e26:	0f 90       	pop	r0
    1e28:	0f 90       	pop	r0
    1e2a:	0f 90       	pop	r0
    1e2c:	0f 90       	pop	r0
    1e2e:	0f 90       	pop	r0
    1e30:	cf 91       	pop	r28
    1e32:	df 91       	pop	r29
    1e34:	08 95       	ret

00001e36 <LCD_enuInit>:
#include "util/delay.h"
#include "DIO_Int.h"


ES_t LCD_enuInit(void)
{
    1e36:	df 93       	push	r29
    1e38:	cf 93       	push	r28
    1e3a:	cd b7       	in	r28, 0x3d	; 61
    1e3c:	de b7       	in	r29, 0x3e	; 62
    1e3e:	e9 97       	sbiw	r28, 0x39	; 57
    1e40:	0f b6       	in	r0, 0x3f	; 63
    1e42:	f8 94       	cli
    1e44:	de bf       	out	0x3e, r29	; 62
    1e46:	0f be       	out	0x3f, r0	; 63
    1e48:	cd bf       	out	0x3d, r28	; 61

	ES_t  local_enumError=DIO_NOK;
    1e4a:	81 e0       	ldi	r24, 0x01	; 1
    1e4c:	89 af       	std	Y+57, r24	; 0x39
    1e4e:	80 e0       	ldi	r24, 0x00	; 0
    1e50:	90 e0       	ldi	r25, 0x00	; 0
    1e52:	ac e0       	ldi	r26, 0x0C	; 12
    1e54:	b2 e4       	ldi	r27, 0x42	; 66
    1e56:	8d ab       	std	Y+53, r24	; 0x35
    1e58:	9e ab       	std	Y+54, r25	; 0x36
    1e5a:	af ab       	std	Y+55, r26	; 0x37
    1e5c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e5e:	6d a9       	ldd	r22, Y+53	; 0x35
    1e60:	7e a9       	ldd	r23, Y+54	; 0x36
    1e62:	8f a9       	ldd	r24, Y+55	; 0x37
    1e64:	98 ad       	ldd	r25, Y+56	; 0x38
    1e66:	20 e0       	ldi	r18, 0x00	; 0
    1e68:	30 e0       	ldi	r19, 0x00	; 0
    1e6a:	4a e7       	ldi	r20, 0x7A	; 122
    1e6c:	53 e4       	ldi	r21, 0x43	; 67
    1e6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e72:	dc 01       	movw	r26, r24
    1e74:	cb 01       	movw	r24, r22
    1e76:	89 ab       	std	Y+49, r24	; 0x31
    1e78:	9a ab       	std	Y+50, r25	; 0x32
    1e7a:	ab ab       	std	Y+51, r26	; 0x33
    1e7c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1e7e:	69 a9       	ldd	r22, Y+49	; 0x31
    1e80:	7a a9       	ldd	r23, Y+50	; 0x32
    1e82:	8b a9       	ldd	r24, Y+51	; 0x33
    1e84:	9c a9       	ldd	r25, Y+52	; 0x34
    1e86:	20 e0       	ldi	r18, 0x00	; 0
    1e88:	30 e0       	ldi	r19, 0x00	; 0
    1e8a:	40 e8       	ldi	r20, 0x80	; 128
    1e8c:	5f e3       	ldi	r21, 0x3F	; 63
    1e8e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e92:	88 23       	and	r24, r24
    1e94:	2c f4       	brge	.+10     	; 0x1ea0 <LCD_enuInit+0x6a>
		__ticks = 1;
    1e96:	81 e0       	ldi	r24, 0x01	; 1
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	98 ab       	std	Y+48, r25	; 0x30
    1e9c:	8f a7       	std	Y+47, r24	; 0x2f
    1e9e:	3f c0       	rjmp	.+126    	; 0x1f1e <LCD_enuInit+0xe8>
	else if (__tmp > 65535)
    1ea0:	69 a9       	ldd	r22, Y+49	; 0x31
    1ea2:	7a a9       	ldd	r23, Y+50	; 0x32
    1ea4:	8b a9       	ldd	r24, Y+51	; 0x33
    1ea6:	9c a9       	ldd	r25, Y+52	; 0x34
    1ea8:	20 e0       	ldi	r18, 0x00	; 0
    1eaa:	3f ef       	ldi	r19, 0xFF	; 255
    1eac:	4f e7       	ldi	r20, 0x7F	; 127
    1eae:	57 e4       	ldi	r21, 0x47	; 71
    1eb0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1eb4:	18 16       	cp	r1, r24
    1eb6:	4c f5       	brge	.+82     	; 0x1f0a <LCD_enuInit+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eb8:	6d a9       	ldd	r22, Y+53	; 0x35
    1eba:	7e a9       	ldd	r23, Y+54	; 0x36
    1ebc:	8f a9       	ldd	r24, Y+55	; 0x37
    1ebe:	98 ad       	ldd	r25, Y+56	; 0x38
    1ec0:	20 e0       	ldi	r18, 0x00	; 0
    1ec2:	30 e0       	ldi	r19, 0x00	; 0
    1ec4:	40 e2       	ldi	r20, 0x20	; 32
    1ec6:	51 e4       	ldi	r21, 0x41	; 65
    1ec8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ecc:	dc 01       	movw	r26, r24
    1ece:	cb 01       	movw	r24, r22
    1ed0:	bc 01       	movw	r22, r24
    1ed2:	cd 01       	movw	r24, r26
    1ed4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ed8:	dc 01       	movw	r26, r24
    1eda:	cb 01       	movw	r24, r22
    1edc:	98 ab       	std	Y+48, r25	; 0x30
    1ede:	8f a7       	std	Y+47, r24	; 0x2f
    1ee0:	0f c0       	rjmp	.+30     	; 0x1f00 <LCD_enuInit+0xca>
    1ee2:	89 e1       	ldi	r24, 0x19	; 25
    1ee4:	90 e0       	ldi	r25, 0x00	; 0
    1ee6:	9e a7       	std	Y+46, r25	; 0x2e
    1ee8:	8d a7       	std	Y+45, r24	; 0x2d
    1eea:	8d a5       	ldd	r24, Y+45	; 0x2d
    1eec:	9e a5       	ldd	r25, Y+46	; 0x2e
    1eee:	01 97       	sbiw	r24, 0x01	; 1
    1ef0:	f1 f7       	brne	.-4      	; 0x1eee <LCD_enuInit+0xb8>
    1ef2:	9e a7       	std	Y+46, r25	; 0x2e
    1ef4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ef6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ef8:	98 a9       	ldd	r25, Y+48	; 0x30
    1efa:	01 97       	sbiw	r24, 0x01	; 1
    1efc:	98 ab       	std	Y+48, r25	; 0x30
    1efe:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f00:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f02:	98 a9       	ldd	r25, Y+48	; 0x30
    1f04:	00 97       	sbiw	r24, 0x00	; 0
    1f06:	69 f7       	brne	.-38     	; 0x1ee2 <LCD_enuInit+0xac>
    1f08:	14 c0       	rjmp	.+40     	; 0x1f32 <LCD_enuInit+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f0a:	69 a9       	ldd	r22, Y+49	; 0x31
    1f0c:	7a a9       	ldd	r23, Y+50	; 0x32
    1f0e:	8b a9       	ldd	r24, Y+51	; 0x33
    1f10:	9c a9       	ldd	r25, Y+52	; 0x34
    1f12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f16:	dc 01       	movw	r26, r24
    1f18:	cb 01       	movw	r24, r22
    1f1a:	98 ab       	std	Y+48, r25	; 0x30
    1f1c:	8f a7       	std	Y+47, r24	; 0x2f
    1f1e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f20:	98 a9       	ldd	r25, Y+48	; 0x30
    1f22:	9c a7       	std	Y+44, r25	; 0x2c
    1f24:	8b a7       	std	Y+43, r24	; 0x2b
    1f26:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f28:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f2a:	01 97       	sbiw	r24, 0x01	; 1
    1f2c:	f1 f7       	brne	.-4      	; 0x1f2a <LCD_enuInit+0xf4>
    1f2e:	9c a7       	std	Y+44, r25	; 0x2c
    1f30:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(35);
	Setpin_Direction(RS_port,RS_pin,DIO_U8OUTPUT);
    1f32:	81 e0       	ldi	r24, 0x01	; 1
    1f34:	60 e0       	ldi	r22, 0x00	; 0
    1f36:	41 e0       	ldi	r20, 0x01	; 1
    1f38:	0e 94 95 0b 	call	0x172a	; 0x172a <Setpin_Direction>
	Setpin_Direction(RW_port,RW_pin,DIO_U8OUTPUT);
    1f3c:	81 e0       	ldi	r24, 0x01	; 1
    1f3e:	61 e0       	ldi	r22, 0x01	; 1
    1f40:	41 e0       	ldi	r20, 0x01	; 1
    1f42:	0e 94 95 0b 	call	0x172a	; 0x172a <Setpin_Direction>
	Setpin_Direction(EN_port,EN_pin,DIO_U8OUTPUT);
    1f46:	81 e0       	ldi	r24, 0x01	; 1
    1f48:	62 e0       	ldi	r22, 0x02	; 2
    1f4a:	41 e0       	ldi	r20, 0x01	; 1
    1f4c:	0e 94 95 0b 	call	0x172a	; 0x172a <Setpin_Direction>

	 Setpin_Direction(D7_port,D7_pin,DIO_U8OUTPUT);
    1f50:	80 e0       	ldi	r24, 0x00	; 0
    1f52:	67 e0       	ldi	r22, 0x07	; 7
    1f54:	41 e0       	ldi	r20, 0x01	; 1
    1f56:	0e 94 95 0b 	call	0x172a	; 0x172a <Setpin_Direction>
	 Setpin_Direction(D6_port,D6_pin,DIO_U8OUTPUT);
    1f5a:	80 e0       	ldi	r24, 0x00	; 0
    1f5c:	66 e0       	ldi	r22, 0x06	; 6
    1f5e:	41 e0       	ldi	r20, 0x01	; 1
    1f60:	0e 94 95 0b 	call	0x172a	; 0x172a <Setpin_Direction>
	 Setpin_Direction(D5_port,D5_pin,DIO_U8OUTPUT);
    1f64:	80 e0       	ldi	r24, 0x00	; 0
    1f66:	65 e0       	ldi	r22, 0x05	; 5
    1f68:	41 e0       	ldi	r20, 0x01	; 1
    1f6a:	0e 94 95 0b 	call	0x172a	; 0x172a <Setpin_Direction>
	 Setpin_Direction(D4_port,D4_pin,DIO_U8OUTPUT);
    1f6e:	80 e0       	ldi	r24, 0x00	; 0
    1f70:	64 e0       	ldi	r22, 0x04	; 4
    1f72:	41 e0       	ldi	r20, 0x01	; 1
    1f74:	0e 94 95 0b 	call	0x172a	; 0x172a <Setpin_Direction>

 #if    LCD_Mode==EIGHT_BITS

	 Setpin_Direction(D3_port,D3_pin,DIO_U8OUTPUT);
    1f78:	80 e0       	ldi	r24, 0x00	; 0
    1f7a:	63 e0       	ldi	r22, 0x03	; 3
    1f7c:	41 e0       	ldi	r20, 0x01	; 1
    1f7e:	0e 94 95 0b 	call	0x172a	; 0x172a <Setpin_Direction>
	 Setpin_Direction(D2_port,D2_pin,DIO_U8OUTPUT);
    1f82:	80 e0       	ldi	r24, 0x00	; 0
    1f84:	62 e0       	ldi	r22, 0x02	; 2
    1f86:	41 e0       	ldi	r20, 0x01	; 1
    1f88:	0e 94 95 0b 	call	0x172a	; 0x172a <Setpin_Direction>
	 Setpin_Direction(D1_port,D1_pin,DIO_U8OUTPUT);
    1f8c:	80 e0       	ldi	r24, 0x00	; 0
    1f8e:	61 e0       	ldi	r22, 0x01	; 1
    1f90:	41 e0       	ldi	r20, 0x01	; 1
    1f92:	0e 94 95 0b 	call	0x172a	; 0x172a <Setpin_Direction>
	 Setpin_Direction(D0_port,D0_pin,DIO_U8OUTPUT);
    1f96:	80 e0       	ldi	r24, 0x00	; 0
    1f98:	60 e0       	ldi	r22, 0x00	; 0
    1f9a:	41 e0       	ldi	r20, 0x01	; 1
    1f9c:	0e 94 95 0b 	call	0x172a	; 0x172a <Setpin_Direction>

		 LCD_invidSendCommand ( 0x38);
    1fa0:	88 e3       	ldi	r24, 0x38	; 56
    1fa2:	0e 94 68 11 	call	0x22d0	; 0x22d0 <LCD_invidSendCommand>
    1fa6:	80 e0       	ldi	r24, 0x00	; 0
    1fa8:	90 e0       	ldi	r25, 0x00	; 0
    1faa:	a0 e8       	ldi	r26, 0x80	; 128
    1fac:	bf e3       	ldi	r27, 0x3F	; 63
    1fae:	8f a3       	std	Y+39, r24	; 0x27
    1fb0:	98 a7       	std	Y+40, r25	; 0x28
    1fb2:	a9 a7       	std	Y+41, r26	; 0x29
    1fb4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fb6:	6f a1       	ldd	r22, Y+39	; 0x27
    1fb8:	78 a5       	ldd	r23, Y+40	; 0x28
    1fba:	89 a5       	ldd	r24, Y+41	; 0x29
    1fbc:	9a a5       	ldd	r25, Y+42	; 0x2a
    1fbe:	20 e0       	ldi	r18, 0x00	; 0
    1fc0:	30 e0       	ldi	r19, 0x00	; 0
    1fc2:	4a e7       	ldi	r20, 0x7A	; 122
    1fc4:	53 e4       	ldi	r21, 0x43	; 67
    1fc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fca:	dc 01       	movw	r26, r24
    1fcc:	cb 01       	movw	r24, r22
    1fce:	8b a3       	std	Y+35, r24	; 0x23
    1fd0:	9c a3       	std	Y+36, r25	; 0x24
    1fd2:	ad a3       	std	Y+37, r26	; 0x25
    1fd4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1fd6:	6b a1       	ldd	r22, Y+35	; 0x23
    1fd8:	7c a1       	ldd	r23, Y+36	; 0x24
    1fda:	8d a1       	ldd	r24, Y+37	; 0x25
    1fdc:	9e a1       	ldd	r25, Y+38	; 0x26
    1fde:	20 e0       	ldi	r18, 0x00	; 0
    1fe0:	30 e0       	ldi	r19, 0x00	; 0
    1fe2:	40 e8       	ldi	r20, 0x80	; 128
    1fe4:	5f e3       	ldi	r21, 0x3F	; 63
    1fe6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fea:	88 23       	and	r24, r24
    1fec:	2c f4       	brge	.+10     	; 0x1ff8 <LCD_enuInit+0x1c2>
		__ticks = 1;
    1fee:	81 e0       	ldi	r24, 0x01	; 1
    1ff0:	90 e0       	ldi	r25, 0x00	; 0
    1ff2:	9a a3       	std	Y+34, r25	; 0x22
    1ff4:	89 a3       	std	Y+33, r24	; 0x21
    1ff6:	3f c0       	rjmp	.+126    	; 0x2076 <LCD_enuInit+0x240>
	else if (__tmp > 65535)
    1ff8:	6b a1       	ldd	r22, Y+35	; 0x23
    1ffa:	7c a1       	ldd	r23, Y+36	; 0x24
    1ffc:	8d a1       	ldd	r24, Y+37	; 0x25
    1ffe:	9e a1       	ldd	r25, Y+38	; 0x26
    2000:	20 e0       	ldi	r18, 0x00	; 0
    2002:	3f ef       	ldi	r19, 0xFF	; 255
    2004:	4f e7       	ldi	r20, 0x7F	; 127
    2006:	57 e4       	ldi	r21, 0x47	; 71
    2008:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    200c:	18 16       	cp	r1, r24
    200e:	4c f5       	brge	.+82     	; 0x2062 <LCD_enuInit+0x22c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2010:	6f a1       	ldd	r22, Y+39	; 0x27
    2012:	78 a5       	ldd	r23, Y+40	; 0x28
    2014:	89 a5       	ldd	r24, Y+41	; 0x29
    2016:	9a a5       	ldd	r25, Y+42	; 0x2a
    2018:	20 e0       	ldi	r18, 0x00	; 0
    201a:	30 e0       	ldi	r19, 0x00	; 0
    201c:	40 e2       	ldi	r20, 0x20	; 32
    201e:	51 e4       	ldi	r21, 0x41	; 65
    2020:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2024:	dc 01       	movw	r26, r24
    2026:	cb 01       	movw	r24, r22
    2028:	bc 01       	movw	r22, r24
    202a:	cd 01       	movw	r24, r26
    202c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2030:	dc 01       	movw	r26, r24
    2032:	cb 01       	movw	r24, r22
    2034:	9a a3       	std	Y+34, r25	; 0x22
    2036:	89 a3       	std	Y+33, r24	; 0x21
    2038:	0f c0       	rjmp	.+30     	; 0x2058 <LCD_enuInit+0x222>
    203a:	89 e1       	ldi	r24, 0x19	; 25
    203c:	90 e0       	ldi	r25, 0x00	; 0
    203e:	98 a3       	std	Y+32, r25	; 0x20
    2040:	8f 8f       	std	Y+31, r24	; 0x1f
    2042:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2044:	98 a1       	ldd	r25, Y+32	; 0x20
    2046:	01 97       	sbiw	r24, 0x01	; 1
    2048:	f1 f7       	brne	.-4      	; 0x2046 <LCD_enuInit+0x210>
    204a:	98 a3       	std	Y+32, r25	; 0x20
    204c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    204e:	89 a1       	ldd	r24, Y+33	; 0x21
    2050:	9a a1       	ldd	r25, Y+34	; 0x22
    2052:	01 97       	sbiw	r24, 0x01	; 1
    2054:	9a a3       	std	Y+34, r25	; 0x22
    2056:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2058:	89 a1       	ldd	r24, Y+33	; 0x21
    205a:	9a a1       	ldd	r25, Y+34	; 0x22
    205c:	00 97       	sbiw	r24, 0x00	; 0
    205e:	69 f7       	brne	.-38     	; 0x203a <LCD_enuInit+0x204>
    2060:	14 c0       	rjmp	.+40     	; 0x208a <LCD_enuInit+0x254>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2062:	6b a1       	ldd	r22, Y+35	; 0x23
    2064:	7c a1       	ldd	r23, Y+36	; 0x24
    2066:	8d a1       	ldd	r24, Y+37	; 0x25
    2068:	9e a1       	ldd	r25, Y+38	; 0x26
    206a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    206e:	dc 01       	movw	r26, r24
    2070:	cb 01       	movw	r24, r22
    2072:	9a a3       	std	Y+34, r25	; 0x22
    2074:	89 a3       	std	Y+33, r24	; 0x21
    2076:	89 a1       	ldd	r24, Y+33	; 0x21
    2078:	9a a1       	ldd	r25, Y+34	; 0x22
    207a:	9e 8f       	std	Y+30, r25	; 0x1e
    207c:	8d 8f       	std	Y+29, r24	; 0x1d
    207e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2080:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2082:	01 97       	sbiw	r24, 0x01	; 1
    2084:	f1 f7       	brne	.-4      	; 0x2082 <LCD_enuInit+0x24c>
    2086:	9e 8f       	std	Y+30, r25	; 0x1e
    2088:	8d 8f       	std	Y+29, r24	; 0x1d
		 LCD_invidSendCommand (0x28);

#endif

_delay_ms(1);
LCD_invidSendCommand(0x0f);  //DISPLAY
    208a:	8f e0       	ldi	r24, 0x0F	; 15
    208c:	0e 94 68 11 	call	0x22d0	; 0x22d0 <LCD_invidSendCommand>
    2090:	80 e0       	ldi	r24, 0x00	; 0
    2092:	90 e0       	ldi	r25, 0x00	; 0
    2094:	a0 e8       	ldi	r26, 0x80	; 128
    2096:	bf e3       	ldi	r27, 0x3F	; 63
    2098:	89 8f       	std	Y+25, r24	; 0x19
    209a:	9a 8f       	std	Y+26, r25	; 0x1a
    209c:	ab 8f       	std	Y+27, r26	; 0x1b
    209e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20a0:	69 8d       	ldd	r22, Y+25	; 0x19
    20a2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20a4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20a6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20a8:	20 e0       	ldi	r18, 0x00	; 0
    20aa:	30 e0       	ldi	r19, 0x00	; 0
    20ac:	4a e7       	ldi	r20, 0x7A	; 122
    20ae:	53 e4       	ldi	r21, 0x43	; 67
    20b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20b4:	dc 01       	movw	r26, r24
    20b6:	cb 01       	movw	r24, r22
    20b8:	8d 8b       	std	Y+21, r24	; 0x15
    20ba:	9e 8b       	std	Y+22, r25	; 0x16
    20bc:	af 8b       	std	Y+23, r26	; 0x17
    20be:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    20c0:	6d 89       	ldd	r22, Y+21	; 0x15
    20c2:	7e 89       	ldd	r23, Y+22	; 0x16
    20c4:	8f 89       	ldd	r24, Y+23	; 0x17
    20c6:	98 8d       	ldd	r25, Y+24	; 0x18
    20c8:	20 e0       	ldi	r18, 0x00	; 0
    20ca:	30 e0       	ldi	r19, 0x00	; 0
    20cc:	40 e8       	ldi	r20, 0x80	; 128
    20ce:	5f e3       	ldi	r21, 0x3F	; 63
    20d0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20d4:	88 23       	and	r24, r24
    20d6:	2c f4       	brge	.+10     	; 0x20e2 <LCD_enuInit+0x2ac>
		__ticks = 1;
    20d8:	81 e0       	ldi	r24, 0x01	; 1
    20da:	90 e0       	ldi	r25, 0x00	; 0
    20dc:	9c 8b       	std	Y+20, r25	; 0x14
    20de:	8b 8b       	std	Y+19, r24	; 0x13
    20e0:	3f c0       	rjmp	.+126    	; 0x2160 <LCD_enuInit+0x32a>
	else if (__tmp > 65535)
    20e2:	6d 89       	ldd	r22, Y+21	; 0x15
    20e4:	7e 89       	ldd	r23, Y+22	; 0x16
    20e6:	8f 89       	ldd	r24, Y+23	; 0x17
    20e8:	98 8d       	ldd	r25, Y+24	; 0x18
    20ea:	20 e0       	ldi	r18, 0x00	; 0
    20ec:	3f ef       	ldi	r19, 0xFF	; 255
    20ee:	4f e7       	ldi	r20, 0x7F	; 127
    20f0:	57 e4       	ldi	r21, 0x47	; 71
    20f2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20f6:	18 16       	cp	r1, r24
    20f8:	4c f5       	brge	.+82     	; 0x214c <LCD_enuInit+0x316>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20fa:	69 8d       	ldd	r22, Y+25	; 0x19
    20fc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2100:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2102:	20 e0       	ldi	r18, 0x00	; 0
    2104:	30 e0       	ldi	r19, 0x00	; 0
    2106:	40 e2       	ldi	r20, 0x20	; 32
    2108:	51 e4       	ldi	r21, 0x41	; 65
    210a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    210e:	dc 01       	movw	r26, r24
    2110:	cb 01       	movw	r24, r22
    2112:	bc 01       	movw	r22, r24
    2114:	cd 01       	movw	r24, r26
    2116:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    211a:	dc 01       	movw	r26, r24
    211c:	cb 01       	movw	r24, r22
    211e:	9c 8b       	std	Y+20, r25	; 0x14
    2120:	8b 8b       	std	Y+19, r24	; 0x13
    2122:	0f c0       	rjmp	.+30     	; 0x2142 <LCD_enuInit+0x30c>
    2124:	89 e1       	ldi	r24, 0x19	; 25
    2126:	90 e0       	ldi	r25, 0x00	; 0
    2128:	9a 8b       	std	Y+18, r25	; 0x12
    212a:	89 8b       	std	Y+17, r24	; 0x11
    212c:	89 89       	ldd	r24, Y+17	; 0x11
    212e:	9a 89       	ldd	r25, Y+18	; 0x12
    2130:	01 97       	sbiw	r24, 0x01	; 1
    2132:	f1 f7       	brne	.-4      	; 0x2130 <LCD_enuInit+0x2fa>
    2134:	9a 8b       	std	Y+18, r25	; 0x12
    2136:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2138:	8b 89       	ldd	r24, Y+19	; 0x13
    213a:	9c 89       	ldd	r25, Y+20	; 0x14
    213c:	01 97       	sbiw	r24, 0x01	; 1
    213e:	9c 8b       	std	Y+20, r25	; 0x14
    2140:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2142:	8b 89       	ldd	r24, Y+19	; 0x13
    2144:	9c 89       	ldd	r25, Y+20	; 0x14
    2146:	00 97       	sbiw	r24, 0x00	; 0
    2148:	69 f7       	brne	.-38     	; 0x2124 <LCD_enuInit+0x2ee>
    214a:	14 c0       	rjmp	.+40     	; 0x2174 <LCD_enuInit+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    214c:	6d 89       	ldd	r22, Y+21	; 0x15
    214e:	7e 89       	ldd	r23, Y+22	; 0x16
    2150:	8f 89       	ldd	r24, Y+23	; 0x17
    2152:	98 8d       	ldd	r25, Y+24	; 0x18
    2154:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2158:	dc 01       	movw	r26, r24
    215a:	cb 01       	movw	r24, r22
    215c:	9c 8b       	std	Y+20, r25	; 0x14
    215e:	8b 8b       	std	Y+19, r24	; 0x13
    2160:	8b 89       	ldd	r24, Y+19	; 0x13
    2162:	9c 89       	ldd	r25, Y+20	; 0x14
    2164:	98 8b       	std	Y+16, r25	; 0x10
    2166:	8f 87       	std	Y+15, r24	; 0x0f
    2168:	8f 85       	ldd	r24, Y+15	; 0x0f
    216a:	98 89       	ldd	r25, Y+16	; 0x10
    216c:	01 97       	sbiw	r24, 0x01	; 1
    216e:	f1 f7       	brne	.-4      	; 0x216c <LCD_enuInit+0x336>
    2170:	98 8b       	std	Y+16, r25	; 0x10
    2172:	8f 87       	std	Y+15, r24	; 0x0f

_delay_ms(1);
LCD_invidSendCommand(0x01);  //CLEAR
    2174:	81 e0       	ldi	r24, 0x01	; 1
    2176:	0e 94 68 11 	call	0x22d0	; 0x22d0 <LCD_invidSendCommand>
    217a:	80 e0       	ldi	r24, 0x00	; 0
    217c:	90 e0       	ldi	r25, 0x00	; 0
    217e:	a0 e0       	ldi	r26, 0x00	; 0
    2180:	b0 e4       	ldi	r27, 0x40	; 64
    2182:	8b 87       	std	Y+11, r24	; 0x0b
    2184:	9c 87       	std	Y+12, r25	; 0x0c
    2186:	ad 87       	std	Y+13, r26	; 0x0d
    2188:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    218a:	6b 85       	ldd	r22, Y+11	; 0x0b
    218c:	7c 85       	ldd	r23, Y+12	; 0x0c
    218e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2190:	9e 85       	ldd	r25, Y+14	; 0x0e
    2192:	20 e0       	ldi	r18, 0x00	; 0
    2194:	30 e0       	ldi	r19, 0x00	; 0
    2196:	4a e7       	ldi	r20, 0x7A	; 122
    2198:	53 e4       	ldi	r21, 0x43	; 67
    219a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    219e:	dc 01       	movw	r26, r24
    21a0:	cb 01       	movw	r24, r22
    21a2:	8f 83       	std	Y+7, r24	; 0x07
    21a4:	98 87       	std	Y+8, r25	; 0x08
    21a6:	a9 87       	std	Y+9, r26	; 0x09
    21a8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21aa:	6f 81       	ldd	r22, Y+7	; 0x07
    21ac:	78 85       	ldd	r23, Y+8	; 0x08
    21ae:	89 85       	ldd	r24, Y+9	; 0x09
    21b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    21b2:	20 e0       	ldi	r18, 0x00	; 0
    21b4:	30 e0       	ldi	r19, 0x00	; 0
    21b6:	40 e8       	ldi	r20, 0x80	; 128
    21b8:	5f e3       	ldi	r21, 0x3F	; 63
    21ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21be:	88 23       	and	r24, r24
    21c0:	2c f4       	brge	.+10     	; 0x21cc <LCD_enuInit+0x396>
		__ticks = 1;
    21c2:	81 e0       	ldi	r24, 0x01	; 1
    21c4:	90 e0       	ldi	r25, 0x00	; 0
    21c6:	9e 83       	std	Y+6, r25	; 0x06
    21c8:	8d 83       	std	Y+5, r24	; 0x05
    21ca:	3f c0       	rjmp	.+126    	; 0x224a <LCD_enuInit+0x414>
	else if (__tmp > 65535)
    21cc:	6f 81       	ldd	r22, Y+7	; 0x07
    21ce:	78 85       	ldd	r23, Y+8	; 0x08
    21d0:	89 85       	ldd	r24, Y+9	; 0x09
    21d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    21d4:	20 e0       	ldi	r18, 0x00	; 0
    21d6:	3f ef       	ldi	r19, 0xFF	; 255
    21d8:	4f e7       	ldi	r20, 0x7F	; 127
    21da:	57 e4       	ldi	r21, 0x47	; 71
    21dc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21e0:	18 16       	cp	r1, r24
    21e2:	4c f5       	brge	.+82     	; 0x2236 <LCD_enuInit+0x400>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    21e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    21e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    21ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    21ec:	20 e0       	ldi	r18, 0x00	; 0
    21ee:	30 e0       	ldi	r19, 0x00	; 0
    21f0:	40 e2       	ldi	r20, 0x20	; 32
    21f2:	51 e4       	ldi	r21, 0x41	; 65
    21f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21f8:	dc 01       	movw	r26, r24
    21fa:	cb 01       	movw	r24, r22
    21fc:	bc 01       	movw	r22, r24
    21fe:	cd 01       	movw	r24, r26
    2200:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2204:	dc 01       	movw	r26, r24
    2206:	cb 01       	movw	r24, r22
    2208:	9e 83       	std	Y+6, r25	; 0x06
    220a:	8d 83       	std	Y+5, r24	; 0x05
    220c:	0f c0       	rjmp	.+30     	; 0x222c <LCD_enuInit+0x3f6>
    220e:	89 e1       	ldi	r24, 0x19	; 25
    2210:	90 e0       	ldi	r25, 0x00	; 0
    2212:	9c 83       	std	Y+4, r25	; 0x04
    2214:	8b 83       	std	Y+3, r24	; 0x03
    2216:	8b 81       	ldd	r24, Y+3	; 0x03
    2218:	9c 81       	ldd	r25, Y+4	; 0x04
    221a:	01 97       	sbiw	r24, 0x01	; 1
    221c:	f1 f7       	brne	.-4      	; 0x221a <LCD_enuInit+0x3e4>
    221e:	9c 83       	std	Y+4, r25	; 0x04
    2220:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2222:	8d 81       	ldd	r24, Y+5	; 0x05
    2224:	9e 81       	ldd	r25, Y+6	; 0x06
    2226:	01 97       	sbiw	r24, 0x01	; 1
    2228:	9e 83       	std	Y+6, r25	; 0x06
    222a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    222c:	8d 81       	ldd	r24, Y+5	; 0x05
    222e:	9e 81       	ldd	r25, Y+6	; 0x06
    2230:	00 97       	sbiw	r24, 0x00	; 0
    2232:	69 f7       	brne	.-38     	; 0x220e <LCD_enuInit+0x3d8>
    2234:	14 c0       	rjmp	.+40     	; 0x225e <LCD_enuInit+0x428>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2236:	6f 81       	ldd	r22, Y+7	; 0x07
    2238:	78 85       	ldd	r23, Y+8	; 0x08
    223a:	89 85       	ldd	r24, Y+9	; 0x09
    223c:	9a 85       	ldd	r25, Y+10	; 0x0a
    223e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2242:	dc 01       	movw	r26, r24
    2244:	cb 01       	movw	r24, r22
    2246:	9e 83       	std	Y+6, r25	; 0x06
    2248:	8d 83       	std	Y+5, r24	; 0x05
    224a:	8d 81       	ldd	r24, Y+5	; 0x05
    224c:	9e 81       	ldd	r25, Y+6	; 0x06
    224e:	9a 83       	std	Y+2, r25	; 0x02
    2250:	89 83       	std	Y+1, r24	; 0x01
    2252:	89 81       	ldd	r24, Y+1	; 0x01
    2254:	9a 81       	ldd	r25, Y+2	; 0x02
    2256:	01 97       	sbiw	r24, 0x01	; 1
    2258:	f1 f7       	brne	.-4      	; 0x2256 <LCD_enuInit+0x420>
    225a:	9a 83       	std	Y+2, r25	; 0x02
    225c:	89 83       	std	Y+1, r24	; 0x01
_delay_ms(2);
LCD_invidSendCommand(0x06); //ENTRY MODE
    225e:	86 e0       	ldi	r24, 0x06	; 6
    2260:	0e 94 68 11 	call	0x22d0	; 0x22d0 <LCD_invidSendCommand>


	return local_enumError;
    2264:	89 ad       	ldd	r24, Y+57	; 0x39
}
    2266:	e9 96       	adiw	r28, 0x39	; 57
    2268:	0f b6       	in	r0, 0x3f	; 63
    226a:	f8 94       	cli
    226c:	de bf       	out	0x3e, r29	; 62
    226e:	0f be       	out	0x3f, r0	; 63
    2270:	cd bf       	out	0x3d, r28	; 61
    2272:	cf 91       	pop	r28
    2274:	df 91       	pop	r29
    2276:	08 95       	ret

00002278 <LCD_enuSendData>:

ES_t LCD_enuSendData(u8 copy_u8Data)
{
    2278:	df 93       	push	r29
    227a:	cf 93       	push	r28
    227c:	00 d0       	rcall	.+0      	; 0x227e <LCD_enuSendData+0x6>
    227e:	cd b7       	in	r28, 0x3d	; 61
    2280:	de b7       	in	r29, 0x3e	; 62
    2282:	8a 83       	std	Y+2, r24	; 0x02
	ES_t local_enumError=DIO_NOK;
    2284:	81 e0       	ldi	r24, 0x01	; 1
    2286:	89 83       	std	Y+1, r24	; 0x01
	 Setpin_value( RS_port,RS_pin,DIO_U8HIGH);  // RS DATA
    2288:	81 e0       	ldi	r24, 0x01	; 1
    228a:	60 e0       	ldi	r22, 0x00	; 0
    228c:	41 e0       	ldi	r20, 0x01	; 1
    228e:	0e 94 84 0c 	call	0x1908	; 0x1908 <Setpin_value>

            LCD_Latch( copy_u8Data) ;
    2292:	8a 81       	ldd	r24, Y+2	; 0x02
    2294:	0e 94 58 12 	call	0x24b0	; 0x24b0 <LCD_Latch>


	return local_enumError;
    2298:	89 81       	ldd	r24, Y+1	; 0x01
}
    229a:	0f 90       	pop	r0
    229c:	0f 90       	pop	r0
    229e:	cf 91       	pop	r28
    22a0:	df 91       	pop	r29
    22a2:	08 95       	ret

000022a4 <LCD_enuSendCommand>:

ES_t LCD_enuSendCommand(u8 copy_u8Command)
{
    22a4:	df 93       	push	r29
    22a6:	cf 93       	push	r28
    22a8:	00 d0       	rcall	.+0      	; 0x22aa <LCD_enuSendCommand+0x6>
    22aa:	cd b7       	in	r28, 0x3d	; 61
    22ac:	de b7       	in	r29, 0x3e	; 62
    22ae:	8a 83       	std	Y+2, r24	; 0x02
	ES_t local_enumError=DIO_NOK;
    22b0:	81 e0       	ldi	r24, 0x01	; 1
    22b2:	89 83       	std	Y+1, r24	; 0x01

	 Setpin_value( RS_port,RS_pin,DIO_U8LOW);  // RS COMMAND
    22b4:	81 e0       	ldi	r24, 0x01	; 1
    22b6:	60 e0       	ldi	r22, 0x00	; 0
    22b8:	40 e0       	ldi	r20, 0x00	; 0
    22ba:	0e 94 84 0c 	call	0x1908	; 0x1908 <Setpin_value>

	   LCD_Latch(copy_u8Command) ;
    22be:	8a 81       	ldd	r24, Y+2	; 0x02
    22c0:	0e 94 58 12 	call	0x24b0	; 0x24b0 <LCD_Latch>


	return local_enumError;
    22c4:	89 81       	ldd	r24, Y+1	; 0x01
}
    22c6:	0f 90       	pop	r0
    22c8:	0f 90       	pop	r0
    22ca:	cf 91       	pop	r28
    22cc:	df 91       	pop	r29
    22ce:	08 95       	ret

000022d0 <LCD_invidSendCommand>:

static inline void LCD_invidSendCommand (u8 copy_u8Command)
{
    22d0:	df 93       	push	r29
    22d2:	cf 93       	push	r28
    22d4:	cd b7       	in	r28, 0x3d	; 61
    22d6:	de b7       	in	r29, 0x3e	; 62
    22d8:	2f 97       	sbiw	r28, 0x0f	; 15
    22da:	0f b6       	in	r0, 0x3f	; 63
    22dc:	f8 94       	cli
    22de:	de bf       	out	0x3e, r29	; 62
    22e0:	0f be       	out	0x3f, r0	; 63
    22e2:	cd bf       	out	0x3d, r28	; 61
    22e4:	8f 87       	std	Y+15, r24	; 0x0f
	 Setpin_value( RS_port,RS_pin,DIO_U8LOW);  // RS=0
    22e6:	81 e0       	ldi	r24, 0x01	; 1
    22e8:	60 e0       	ldi	r22, 0x00	; 0
    22ea:	40 e0       	ldi	r20, 0x00	; 0
    22ec:	0e 94 84 0c 	call	0x1908	; 0x1908 <Setpin_value>
		 Setpin_value( EN_port, EN_pin,DIO_U8LOW);  //EN=0
    22f0:	81 e0       	ldi	r24, 0x01	; 1
    22f2:	62 e0       	ldi	r22, 0x02	; 2
    22f4:	40 e0       	ldi	r20, 0x00	; 0
    22f6:	0e 94 84 0c 	call	0x1908	; 0x1908 <Setpin_value>

		 Setpin_value(RW_pin, RW_port, DIO_U8LOW);  //WRITE=0
    22fa:	81 e0       	ldi	r24, 0x01	; 1
    22fc:	61 e0       	ldi	r22, 0x01	; 1
    22fe:	40 e0       	ldi	r20, 0x00	; 0
    2300:	0e 94 84 0c 	call	0x1908	; 0x1908 <Setpin_value>

		 Setpin_value(D7_port,D7_pin,(copy_u8Command>>7)&1);
    2304:	8f 85       	ldd	r24, Y+15	; 0x0f
    2306:	98 2f       	mov	r25, r24
    2308:	99 1f       	adc	r25, r25
    230a:	99 27       	eor	r25, r25
    230c:	99 1f       	adc	r25, r25
    230e:	80 e0       	ldi	r24, 0x00	; 0
    2310:	67 e0       	ldi	r22, 0x07	; 7
    2312:	49 2f       	mov	r20, r25
    2314:	0e 94 84 0c 	call	0x1908	; 0x1908 <Setpin_value>
		 Setpin_value(D6_port,D6_pin,(copy_u8Command>>6)&1);
    2318:	8f 85       	ldd	r24, Y+15	; 0x0f
    231a:	82 95       	swap	r24
    231c:	86 95       	lsr	r24
    231e:	86 95       	lsr	r24
    2320:	83 70       	andi	r24, 0x03	; 3
    2322:	98 2f       	mov	r25, r24
    2324:	91 70       	andi	r25, 0x01	; 1
    2326:	80 e0       	ldi	r24, 0x00	; 0
    2328:	66 e0       	ldi	r22, 0x06	; 6
    232a:	49 2f       	mov	r20, r25
    232c:	0e 94 84 0c 	call	0x1908	; 0x1908 <Setpin_value>
		 Setpin_value(D5_port,D5_pin,(copy_u8Command>>5)&1);
    2330:	8f 85       	ldd	r24, Y+15	; 0x0f
    2332:	82 95       	swap	r24
    2334:	86 95       	lsr	r24
    2336:	87 70       	andi	r24, 0x07	; 7
    2338:	98 2f       	mov	r25, r24
    233a:	91 70       	andi	r25, 0x01	; 1
    233c:	80 e0       	ldi	r24, 0x00	; 0
    233e:	65 e0       	ldi	r22, 0x05	; 5
    2340:	49 2f       	mov	r20, r25
    2342:	0e 94 84 0c 	call	0x1908	; 0x1908 <Setpin_value>
		 Setpin_value(D4_port,D4_pin,(copy_u8Command>>4)&1);
    2346:	8f 85       	ldd	r24, Y+15	; 0x0f
    2348:	82 95       	swap	r24
    234a:	8f 70       	andi	r24, 0x0F	; 15
    234c:	98 2f       	mov	r25, r24
    234e:	91 70       	andi	r25, 0x01	; 1
    2350:	80 e0       	ldi	r24, 0x00	; 0
    2352:	64 e0       	ldi	r22, 0x04	; 4
    2354:	49 2f       	mov	r20, r25
    2356:	0e 94 84 0c 	call	0x1908	; 0x1908 <Setpin_value>
		 Setpin_value(D3_port,D3_pin,(copy_u8Command>>3)&1);
    235a:	8f 85       	ldd	r24, Y+15	; 0x0f
    235c:	86 95       	lsr	r24
    235e:	86 95       	lsr	r24
    2360:	86 95       	lsr	r24
    2362:	98 2f       	mov	r25, r24
    2364:	91 70       	andi	r25, 0x01	; 1
    2366:	80 e0       	ldi	r24, 0x00	; 0
    2368:	63 e0       	ldi	r22, 0x03	; 3
    236a:	49 2f       	mov	r20, r25
    236c:	0e 94 84 0c 	call	0x1908	; 0x1908 <Setpin_value>
		 Setpin_value(D2_port,D2_pin,(copy_u8Command>>2)&1);
    2370:	8f 85       	ldd	r24, Y+15	; 0x0f
    2372:	86 95       	lsr	r24
    2374:	86 95       	lsr	r24
    2376:	98 2f       	mov	r25, r24
    2378:	91 70       	andi	r25, 0x01	; 1
    237a:	80 e0       	ldi	r24, 0x00	; 0
    237c:	62 e0       	ldi	r22, 0x02	; 2
    237e:	49 2f       	mov	r20, r25
    2380:	0e 94 84 0c 	call	0x1908	; 0x1908 <Setpin_value>
		 Setpin_value(D1_port,D1_pin,(copy_u8Command>>1)&1);
    2384:	8f 85       	ldd	r24, Y+15	; 0x0f
    2386:	86 95       	lsr	r24
    2388:	98 2f       	mov	r25, r24
    238a:	91 70       	andi	r25, 0x01	; 1
    238c:	80 e0       	ldi	r24, 0x00	; 0
    238e:	61 e0       	ldi	r22, 0x01	; 1
    2390:	49 2f       	mov	r20, r25
    2392:	0e 94 84 0c 	call	0x1908	; 0x1908 <Setpin_value>
		 Setpin_value(D0_port,D0_pin,(copy_u8Command>>0)&1);
    2396:	8f 85       	ldd	r24, Y+15	; 0x0f
    2398:	98 2f       	mov	r25, r24
    239a:	91 70       	andi	r25, 0x01	; 1
    239c:	80 e0       	ldi	r24, 0x00	; 0
    239e:	60 e0       	ldi	r22, 0x00	; 0
    23a0:	49 2f       	mov	r20, r25
    23a2:	0e 94 84 0c 	call	0x1908	; 0x1908 <Setpin_value>

	     Setpin_value(EN_port,EN_pin,DIO_U8HIGH);
    23a6:	81 e0       	ldi	r24, 0x01	; 1
    23a8:	62 e0       	ldi	r22, 0x02	; 2
    23aa:	41 e0       	ldi	r20, 0x01	; 1
    23ac:	0e 94 84 0c 	call	0x1908	; 0x1908 <Setpin_value>
    23b0:	80 e0       	ldi	r24, 0x00	; 0
    23b2:	90 e0       	ldi	r25, 0x00	; 0
    23b4:	a0 e2       	ldi	r26, 0x20	; 32
    23b6:	b1 e4       	ldi	r27, 0x41	; 65
    23b8:	8b 87       	std	Y+11, r24	; 0x0b
    23ba:	9c 87       	std	Y+12, r25	; 0x0c
    23bc:	ad 87       	std	Y+13, r26	; 0x0d
    23be:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    23c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    23c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    23c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    23c8:	20 e0       	ldi	r18, 0x00	; 0
    23ca:	30 e0       	ldi	r19, 0x00	; 0
    23cc:	4a e7       	ldi	r20, 0x7A	; 122
    23ce:	53 e4       	ldi	r21, 0x43	; 67
    23d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23d4:	dc 01       	movw	r26, r24
    23d6:	cb 01       	movw	r24, r22
    23d8:	8f 83       	std	Y+7, r24	; 0x07
    23da:	98 87       	std	Y+8, r25	; 0x08
    23dc:	a9 87       	std	Y+9, r26	; 0x09
    23de:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23e0:	6f 81       	ldd	r22, Y+7	; 0x07
    23e2:	78 85       	ldd	r23, Y+8	; 0x08
    23e4:	89 85       	ldd	r24, Y+9	; 0x09
    23e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    23e8:	20 e0       	ldi	r18, 0x00	; 0
    23ea:	30 e0       	ldi	r19, 0x00	; 0
    23ec:	40 e8       	ldi	r20, 0x80	; 128
    23ee:	5f e3       	ldi	r21, 0x3F	; 63
    23f0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23f4:	88 23       	and	r24, r24
    23f6:	2c f4       	brge	.+10     	; 0x2402 <LCD_invidSendCommand+0x132>
		__ticks = 1;
    23f8:	81 e0       	ldi	r24, 0x01	; 1
    23fa:	90 e0       	ldi	r25, 0x00	; 0
    23fc:	9e 83       	std	Y+6, r25	; 0x06
    23fe:	8d 83       	std	Y+5, r24	; 0x05
    2400:	3f c0       	rjmp	.+126    	; 0x2480 <LCD_invidSendCommand+0x1b0>
	else if (__tmp > 65535)
    2402:	6f 81       	ldd	r22, Y+7	; 0x07
    2404:	78 85       	ldd	r23, Y+8	; 0x08
    2406:	89 85       	ldd	r24, Y+9	; 0x09
    2408:	9a 85       	ldd	r25, Y+10	; 0x0a
    240a:	20 e0       	ldi	r18, 0x00	; 0
    240c:	3f ef       	ldi	r19, 0xFF	; 255
    240e:	4f e7       	ldi	r20, 0x7F	; 127
    2410:	57 e4       	ldi	r21, 0x47	; 71
    2412:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2416:	18 16       	cp	r1, r24
    2418:	4c f5       	brge	.+82     	; 0x246c <LCD_invidSendCommand+0x19c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    241a:	6b 85       	ldd	r22, Y+11	; 0x0b
    241c:	7c 85       	ldd	r23, Y+12	; 0x0c
    241e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2420:	9e 85       	ldd	r25, Y+14	; 0x0e
    2422:	20 e0       	ldi	r18, 0x00	; 0
    2424:	30 e0       	ldi	r19, 0x00	; 0
    2426:	40 e2       	ldi	r20, 0x20	; 32
    2428:	51 e4       	ldi	r21, 0x41	; 65
    242a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    242e:	dc 01       	movw	r26, r24
    2430:	cb 01       	movw	r24, r22
    2432:	bc 01       	movw	r22, r24
    2434:	cd 01       	movw	r24, r26
    2436:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    243a:	dc 01       	movw	r26, r24
    243c:	cb 01       	movw	r24, r22
    243e:	9e 83       	std	Y+6, r25	; 0x06
    2440:	8d 83       	std	Y+5, r24	; 0x05
    2442:	0f c0       	rjmp	.+30     	; 0x2462 <LCD_invidSendCommand+0x192>
    2444:	89 e1       	ldi	r24, 0x19	; 25
    2446:	90 e0       	ldi	r25, 0x00	; 0
    2448:	9c 83       	std	Y+4, r25	; 0x04
    244a:	8b 83       	std	Y+3, r24	; 0x03
    244c:	8b 81       	ldd	r24, Y+3	; 0x03
    244e:	9c 81       	ldd	r25, Y+4	; 0x04
    2450:	01 97       	sbiw	r24, 0x01	; 1
    2452:	f1 f7       	brne	.-4      	; 0x2450 <LCD_invidSendCommand+0x180>
    2454:	9c 83       	std	Y+4, r25	; 0x04
    2456:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2458:	8d 81       	ldd	r24, Y+5	; 0x05
    245a:	9e 81       	ldd	r25, Y+6	; 0x06
    245c:	01 97       	sbiw	r24, 0x01	; 1
    245e:	9e 83       	std	Y+6, r25	; 0x06
    2460:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2462:	8d 81       	ldd	r24, Y+5	; 0x05
    2464:	9e 81       	ldd	r25, Y+6	; 0x06
    2466:	00 97       	sbiw	r24, 0x00	; 0
    2468:	69 f7       	brne	.-38     	; 0x2444 <LCD_invidSendCommand+0x174>
    246a:	14 c0       	rjmp	.+40     	; 0x2494 <LCD_invidSendCommand+0x1c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    246c:	6f 81       	ldd	r22, Y+7	; 0x07
    246e:	78 85       	ldd	r23, Y+8	; 0x08
    2470:	89 85       	ldd	r24, Y+9	; 0x09
    2472:	9a 85       	ldd	r25, Y+10	; 0x0a
    2474:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2478:	dc 01       	movw	r26, r24
    247a:	cb 01       	movw	r24, r22
    247c:	9e 83       	std	Y+6, r25	; 0x06
    247e:	8d 83       	std	Y+5, r24	; 0x05
    2480:	8d 81       	ldd	r24, Y+5	; 0x05
    2482:	9e 81       	ldd	r25, Y+6	; 0x06
    2484:	9a 83       	std	Y+2, r25	; 0x02
    2486:	89 83       	std	Y+1, r24	; 0x01
    2488:	89 81       	ldd	r24, Y+1	; 0x01
    248a:	9a 81       	ldd	r25, Y+2	; 0x02
    248c:	01 97       	sbiw	r24, 0x01	; 1
    248e:	f1 f7       	brne	.-4      	; 0x248c <LCD_invidSendCommand+0x1bc>
    2490:	9a 83       	std	Y+2, r25	; 0x02
    2492:	89 83       	std	Y+1, r24	; 0x01
	   _delay_ms(10);
	    Setpin_value(EN_port,EN_pin,DIO_U8LOW);
    2494:	81 e0       	ldi	r24, 0x01	; 1
    2496:	62 e0       	ldi	r22, 0x02	; 2
    2498:	40 e0       	ldi	r20, 0x00	; 0
    249a:	0e 94 84 0c 	call	0x1908	; 0x1908 <Setpin_value>
}
    249e:	2f 96       	adiw	r28, 0x0f	; 15
    24a0:	0f b6       	in	r0, 0x3f	; 63
    24a2:	f8 94       	cli
    24a4:	de bf       	out	0x3e, r29	; 62
    24a6:	0f be       	out	0x3f, r0	; 63
    24a8:	cd bf       	out	0x3d, r28	; 61
    24aa:	cf 91       	pop	r28
    24ac:	df 91       	pop	r29
    24ae:	08 95       	ret

000024b0 <LCD_Latch>:
static void LCD_Latch(u8 copy_u8Data)
		{
    24b0:	df 93       	push	r29
    24b2:	cf 93       	push	r28
    24b4:	cd b7       	in	r28, 0x3d	; 61
    24b6:	de b7       	in	r29, 0x3e	; 62
    24b8:	2f 97       	sbiw	r28, 0x0f	; 15
    24ba:	0f b6       	in	r0, 0x3f	; 63
    24bc:	f8 94       	cli
    24be:	de bf       	out	0x3e, r29	; 62
    24c0:	0f be       	out	0x3f, r0	; 63
    24c2:	cd bf       	out	0x3d, r28	; 61
    24c4:	8f 87       	std	Y+15, r24	; 0x0f
	Setpin_value( EN_port, EN_pin,DIO_U8LOW);  //EN=0
    24c6:	81 e0       	ldi	r24, 0x01	; 1
    24c8:	62 e0       	ldi	r22, 0x02	; 2
    24ca:	40 e0       	ldi	r20, 0x00	; 0
    24cc:	0e 94 84 0c 	call	0x1908	; 0x1908 <Setpin_value>

		 Setpin_value(RW_pin, RW_port, DIO_U8LOW);  //WRITE=0
    24d0:	81 e0       	ldi	r24, 0x01	; 1
    24d2:	61 e0       	ldi	r22, 0x01	; 1
    24d4:	40 e0       	ldi	r20, 0x00	; 0
    24d6:	0e 94 84 0c 	call	0x1908	; 0x1908 <Setpin_value>

		 Setpin_value(D7_port,D7_pin,(copy_u8Data>>7)&1);
    24da:	8f 85       	ldd	r24, Y+15	; 0x0f
    24dc:	98 2f       	mov	r25, r24
    24de:	99 1f       	adc	r25, r25
    24e0:	99 27       	eor	r25, r25
    24e2:	99 1f       	adc	r25, r25
    24e4:	80 e0       	ldi	r24, 0x00	; 0
    24e6:	67 e0       	ldi	r22, 0x07	; 7
    24e8:	49 2f       	mov	r20, r25
    24ea:	0e 94 84 0c 	call	0x1908	; 0x1908 <Setpin_value>
		 Setpin_value(D6_port,D6_pin,(copy_u8Data>>6)&1);
    24ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    24f0:	82 95       	swap	r24
    24f2:	86 95       	lsr	r24
    24f4:	86 95       	lsr	r24
    24f6:	83 70       	andi	r24, 0x03	; 3
    24f8:	98 2f       	mov	r25, r24
    24fa:	91 70       	andi	r25, 0x01	; 1
    24fc:	80 e0       	ldi	r24, 0x00	; 0
    24fe:	66 e0       	ldi	r22, 0x06	; 6
    2500:	49 2f       	mov	r20, r25
    2502:	0e 94 84 0c 	call	0x1908	; 0x1908 <Setpin_value>
		 Setpin_value(D5_port,D5_pin,(copy_u8Data>>5)&1);
    2506:	8f 85       	ldd	r24, Y+15	; 0x0f
    2508:	82 95       	swap	r24
    250a:	86 95       	lsr	r24
    250c:	87 70       	andi	r24, 0x07	; 7
    250e:	98 2f       	mov	r25, r24
    2510:	91 70       	andi	r25, 0x01	; 1
    2512:	80 e0       	ldi	r24, 0x00	; 0
    2514:	65 e0       	ldi	r22, 0x05	; 5
    2516:	49 2f       	mov	r20, r25
    2518:	0e 94 84 0c 	call	0x1908	; 0x1908 <Setpin_value>
		 Setpin_value(D4_port,D4_pin,(copy_u8Data>>4)&1);
    251c:	8f 85       	ldd	r24, Y+15	; 0x0f
    251e:	82 95       	swap	r24
    2520:	8f 70       	andi	r24, 0x0F	; 15
    2522:	98 2f       	mov	r25, r24
    2524:	91 70       	andi	r25, 0x01	; 1
    2526:	80 e0       	ldi	r24, 0x00	; 0
    2528:	64 e0       	ldi	r22, 0x04	; 4
    252a:	49 2f       	mov	r20, r25
    252c:	0e 94 84 0c 	call	0x1908	; 0x1908 <Setpin_value>
		 Setpin_value(D3_port,D3_pin,(copy_u8Data>>3)&1);
    2530:	8f 85       	ldd	r24, Y+15	; 0x0f
    2532:	86 95       	lsr	r24
    2534:	86 95       	lsr	r24
    2536:	86 95       	lsr	r24
    2538:	98 2f       	mov	r25, r24
    253a:	91 70       	andi	r25, 0x01	; 1
    253c:	80 e0       	ldi	r24, 0x00	; 0
    253e:	63 e0       	ldi	r22, 0x03	; 3
    2540:	49 2f       	mov	r20, r25
    2542:	0e 94 84 0c 	call	0x1908	; 0x1908 <Setpin_value>
		 Setpin_value(D2_port,D2_pin,(copy_u8Data>>2)&1);
    2546:	8f 85       	ldd	r24, Y+15	; 0x0f
    2548:	86 95       	lsr	r24
    254a:	86 95       	lsr	r24
    254c:	98 2f       	mov	r25, r24
    254e:	91 70       	andi	r25, 0x01	; 1
    2550:	80 e0       	ldi	r24, 0x00	; 0
    2552:	62 e0       	ldi	r22, 0x02	; 2
    2554:	49 2f       	mov	r20, r25
    2556:	0e 94 84 0c 	call	0x1908	; 0x1908 <Setpin_value>
		 Setpin_value(D1_port,D1_pin,(copy_u8Data>>1)&1);
    255a:	8f 85       	ldd	r24, Y+15	; 0x0f
    255c:	86 95       	lsr	r24
    255e:	98 2f       	mov	r25, r24
    2560:	91 70       	andi	r25, 0x01	; 1
    2562:	80 e0       	ldi	r24, 0x00	; 0
    2564:	61 e0       	ldi	r22, 0x01	; 1
    2566:	49 2f       	mov	r20, r25
    2568:	0e 94 84 0c 	call	0x1908	; 0x1908 <Setpin_value>
		 Setpin_value(D0_port,D0_pin,(copy_u8Data>>0)&1);
    256c:	8f 85       	ldd	r24, Y+15	; 0x0f
    256e:	98 2f       	mov	r25, r24
    2570:	91 70       	andi	r25, 0x01	; 1
    2572:	80 e0       	ldi	r24, 0x00	; 0
    2574:	60 e0       	ldi	r22, 0x00	; 0
    2576:	49 2f       	mov	r20, r25
    2578:	0e 94 84 0c 	call	0x1908	; 0x1908 <Setpin_value>

	     Setpin_value(EN_port,EN_pin,DIO_U8HIGH);
    257c:	81 e0       	ldi	r24, 0x01	; 1
    257e:	62 e0       	ldi	r22, 0x02	; 2
    2580:	41 e0       	ldi	r20, 0x01	; 1
    2582:	0e 94 84 0c 	call	0x1908	; 0x1908 <Setpin_value>
    2586:	80 e0       	ldi	r24, 0x00	; 0
    2588:	90 e0       	ldi	r25, 0x00	; 0
    258a:	a0 e2       	ldi	r26, 0x20	; 32
    258c:	b1 e4       	ldi	r27, 0x41	; 65
    258e:	8b 87       	std	Y+11, r24	; 0x0b
    2590:	9c 87       	std	Y+12, r25	; 0x0c
    2592:	ad 87       	std	Y+13, r26	; 0x0d
    2594:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2596:	6b 85       	ldd	r22, Y+11	; 0x0b
    2598:	7c 85       	ldd	r23, Y+12	; 0x0c
    259a:	8d 85       	ldd	r24, Y+13	; 0x0d
    259c:	9e 85       	ldd	r25, Y+14	; 0x0e
    259e:	20 e0       	ldi	r18, 0x00	; 0
    25a0:	30 e0       	ldi	r19, 0x00	; 0
    25a2:	4a e7       	ldi	r20, 0x7A	; 122
    25a4:	53 e4       	ldi	r21, 0x43	; 67
    25a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25aa:	dc 01       	movw	r26, r24
    25ac:	cb 01       	movw	r24, r22
    25ae:	8f 83       	std	Y+7, r24	; 0x07
    25b0:	98 87       	std	Y+8, r25	; 0x08
    25b2:	a9 87       	std	Y+9, r26	; 0x09
    25b4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25b6:	6f 81       	ldd	r22, Y+7	; 0x07
    25b8:	78 85       	ldd	r23, Y+8	; 0x08
    25ba:	89 85       	ldd	r24, Y+9	; 0x09
    25bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    25be:	20 e0       	ldi	r18, 0x00	; 0
    25c0:	30 e0       	ldi	r19, 0x00	; 0
    25c2:	40 e8       	ldi	r20, 0x80	; 128
    25c4:	5f e3       	ldi	r21, 0x3F	; 63
    25c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25ca:	88 23       	and	r24, r24
    25cc:	2c f4       	brge	.+10     	; 0x25d8 <LCD_Latch+0x128>
		__ticks = 1;
    25ce:	81 e0       	ldi	r24, 0x01	; 1
    25d0:	90 e0       	ldi	r25, 0x00	; 0
    25d2:	9e 83       	std	Y+6, r25	; 0x06
    25d4:	8d 83       	std	Y+5, r24	; 0x05
    25d6:	3f c0       	rjmp	.+126    	; 0x2656 <LCD_Latch+0x1a6>
	else if (__tmp > 65535)
    25d8:	6f 81       	ldd	r22, Y+7	; 0x07
    25da:	78 85       	ldd	r23, Y+8	; 0x08
    25dc:	89 85       	ldd	r24, Y+9	; 0x09
    25de:	9a 85       	ldd	r25, Y+10	; 0x0a
    25e0:	20 e0       	ldi	r18, 0x00	; 0
    25e2:	3f ef       	ldi	r19, 0xFF	; 255
    25e4:	4f e7       	ldi	r20, 0x7F	; 127
    25e6:	57 e4       	ldi	r21, 0x47	; 71
    25e8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25ec:	18 16       	cp	r1, r24
    25ee:	4c f5       	brge	.+82     	; 0x2642 <LCD_Latch+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    25f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    25f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    25f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    25f8:	20 e0       	ldi	r18, 0x00	; 0
    25fa:	30 e0       	ldi	r19, 0x00	; 0
    25fc:	40 e2       	ldi	r20, 0x20	; 32
    25fe:	51 e4       	ldi	r21, 0x41	; 65
    2600:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2604:	dc 01       	movw	r26, r24
    2606:	cb 01       	movw	r24, r22
    2608:	bc 01       	movw	r22, r24
    260a:	cd 01       	movw	r24, r26
    260c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2610:	dc 01       	movw	r26, r24
    2612:	cb 01       	movw	r24, r22
    2614:	9e 83       	std	Y+6, r25	; 0x06
    2616:	8d 83       	std	Y+5, r24	; 0x05
    2618:	0f c0       	rjmp	.+30     	; 0x2638 <LCD_Latch+0x188>
    261a:	89 e1       	ldi	r24, 0x19	; 25
    261c:	90 e0       	ldi	r25, 0x00	; 0
    261e:	9c 83       	std	Y+4, r25	; 0x04
    2620:	8b 83       	std	Y+3, r24	; 0x03
    2622:	8b 81       	ldd	r24, Y+3	; 0x03
    2624:	9c 81       	ldd	r25, Y+4	; 0x04
    2626:	01 97       	sbiw	r24, 0x01	; 1
    2628:	f1 f7       	brne	.-4      	; 0x2626 <LCD_Latch+0x176>
    262a:	9c 83       	std	Y+4, r25	; 0x04
    262c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    262e:	8d 81       	ldd	r24, Y+5	; 0x05
    2630:	9e 81       	ldd	r25, Y+6	; 0x06
    2632:	01 97       	sbiw	r24, 0x01	; 1
    2634:	9e 83       	std	Y+6, r25	; 0x06
    2636:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2638:	8d 81       	ldd	r24, Y+5	; 0x05
    263a:	9e 81       	ldd	r25, Y+6	; 0x06
    263c:	00 97       	sbiw	r24, 0x00	; 0
    263e:	69 f7       	brne	.-38     	; 0x261a <LCD_Latch+0x16a>
    2640:	14 c0       	rjmp	.+40     	; 0x266a <LCD_Latch+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2642:	6f 81       	ldd	r22, Y+7	; 0x07
    2644:	78 85       	ldd	r23, Y+8	; 0x08
    2646:	89 85       	ldd	r24, Y+9	; 0x09
    2648:	9a 85       	ldd	r25, Y+10	; 0x0a
    264a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    264e:	dc 01       	movw	r26, r24
    2650:	cb 01       	movw	r24, r22
    2652:	9e 83       	std	Y+6, r25	; 0x06
    2654:	8d 83       	std	Y+5, r24	; 0x05
    2656:	8d 81       	ldd	r24, Y+5	; 0x05
    2658:	9e 81       	ldd	r25, Y+6	; 0x06
    265a:	9a 83       	std	Y+2, r25	; 0x02
    265c:	89 83       	std	Y+1, r24	; 0x01
    265e:	89 81       	ldd	r24, Y+1	; 0x01
    2660:	9a 81       	ldd	r25, Y+2	; 0x02
    2662:	01 97       	sbiw	r24, 0x01	; 1
    2664:	f1 f7       	brne	.-4      	; 0x2662 <LCD_Latch+0x1b2>
    2666:	9a 83       	std	Y+2, r25	; 0x02
    2668:	89 83       	std	Y+1, r24	; 0x01
	   _delay_ms(10);
	    Setpin_value(EN_port,EN_pin,DIO_U8LOW);
    266a:	81 e0       	ldi	r24, 0x01	; 1
    266c:	62 e0       	ldi	r22, 0x02	; 2
    266e:	40 e0       	ldi	r20, 0x00	; 0
    2670:	0e 94 84 0c 	call	0x1908	; 0x1908 <Setpin_value>

		}
    2674:	2f 96       	adiw	r28, 0x0f	; 15
    2676:	0f b6       	in	r0, 0x3f	; 63
    2678:	f8 94       	cli
    267a:	de bf       	out	0x3e, r29	; 62
    267c:	0f be       	out	0x3f, r0	; 63
    267e:	cd bf       	out	0x3d, r28	; 61
    2680:	cf 91       	pop	r28
    2682:	df 91       	pop	r29
    2684:	08 95       	ret

00002686 <initialize>:
#include "stack.h"
#include <stdio.h>

void initialize(Stack *ps)
{
    2686:	df 93       	push	r29
    2688:	cf 93       	push	r28
    268a:	00 d0       	rcall	.+0      	; 0x268c <initialize+0x6>
    268c:	cd b7       	in	r28, 0x3d	; 61
    268e:	de b7       	in	r29, 0x3e	; 62
    2690:	9a 83       	std	Y+2, r25	; 0x02
    2692:	89 83       	std	Y+1, r24	; 0x01
    ps->top = 0;
    2694:	89 81       	ldd	r24, Y+1	; 0x01
    2696:	9a 81       	ldd	r25, Y+2	; 0x02
    2698:	fc 01       	movw	r30, r24
    269a:	e8 53       	subi	r30, 0x38	; 56
    269c:	ff 4f       	sbci	r31, 0xFF	; 255
    269e:	11 82       	std	Z+1, r1	; 0x01
    26a0:	10 82       	st	Z, r1
}
    26a2:	0f 90       	pop	r0
    26a4:	0f 90       	pop	r0
    26a6:	cf 91       	pop	r28
    26a8:	df 91       	pop	r29
    26aa:	08 95       	ret

000026ac <isFull>:

int isFull(Stack *ps)
{
    26ac:	df 93       	push	r29
    26ae:	cf 93       	push	r28
    26b0:	00 d0       	rcall	.+0      	; 0x26b2 <isFull+0x6>
    26b2:	00 d0       	rcall	.+0      	; 0x26b4 <isFull+0x8>
    26b4:	cd b7       	in	r28, 0x3d	; 61
    26b6:	de b7       	in	r29, 0x3e	; 62
    26b8:	9a 83       	std	Y+2, r25	; 0x02
    26ba:	89 83       	std	Y+1, r24	; 0x01
    return ps->top == MAX_SIZE;
    26bc:	89 81       	ldd	r24, Y+1	; 0x01
    26be:	9a 81       	ldd	r25, Y+2	; 0x02
    26c0:	fc 01       	movw	r30, r24
    26c2:	e8 53       	subi	r30, 0x38	; 56
    26c4:	ff 4f       	sbci	r31, 0xFF	; 255
    26c6:	80 81       	ld	r24, Z
    26c8:	91 81       	ldd	r25, Z+1	; 0x01
    26ca:	1c 82       	std	Y+4, r1	; 0x04
    26cc:	1b 82       	std	Y+3, r1	; 0x03
    26ce:	84 36       	cpi	r24, 0x64	; 100
    26d0:	91 05       	cpc	r25, r1
    26d2:	21 f4       	brne	.+8      	; 0x26dc <isFull+0x30>
    26d4:	81 e0       	ldi	r24, 0x01	; 1
    26d6:	90 e0       	ldi	r25, 0x00	; 0
    26d8:	9c 83       	std	Y+4, r25	; 0x04
    26da:	8b 83       	std	Y+3, r24	; 0x03
    26dc:	8b 81       	ldd	r24, Y+3	; 0x03
    26de:	9c 81       	ldd	r25, Y+4	; 0x04
}
    26e0:	0f 90       	pop	r0
    26e2:	0f 90       	pop	r0
    26e4:	0f 90       	pop	r0
    26e6:	0f 90       	pop	r0
    26e8:	cf 91       	pop	r28
    26ea:	df 91       	pop	r29
    26ec:	08 95       	ret

000026ee <isEmpty>:

int isEmpty(Stack *ps) {
    26ee:	df 93       	push	r29
    26f0:	cf 93       	push	r28
    26f2:	00 d0       	rcall	.+0      	; 0x26f4 <isEmpty+0x6>
    26f4:	00 d0       	rcall	.+0      	; 0x26f6 <isEmpty+0x8>
    26f6:	cd b7       	in	r28, 0x3d	; 61
    26f8:	de b7       	in	r29, 0x3e	; 62
    26fa:	9a 83       	std	Y+2, r25	; 0x02
    26fc:	89 83       	std	Y+1, r24	; 0x01
    return ps->top == 0;
    26fe:	89 81       	ldd	r24, Y+1	; 0x01
    2700:	9a 81       	ldd	r25, Y+2	; 0x02
    2702:	fc 01       	movw	r30, r24
    2704:	e8 53       	subi	r30, 0x38	; 56
    2706:	ff 4f       	sbci	r31, 0xFF	; 255
    2708:	80 81       	ld	r24, Z
    270a:	91 81       	ldd	r25, Z+1	; 0x01
    270c:	1c 82       	std	Y+4, r1	; 0x04
    270e:	1b 82       	std	Y+3, r1	; 0x03
    2710:	00 97       	sbiw	r24, 0x00	; 0
    2712:	21 f4       	brne	.+8      	; 0x271c <isEmpty+0x2e>
    2714:	81 e0       	ldi	r24, 0x01	; 1
    2716:	90 e0       	ldi	r25, 0x00	; 0
    2718:	9c 83       	std	Y+4, r25	; 0x04
    271a:	8b 83       	std	Y+3, r24	; 0x03
    271c:	8b 81       	ldd	r24, Y+3	; 0x03
    271e:	9c 81       	ldd	r25, Y+4	; 0x04
}
    2720:	0f 90       	pop	r0
    2722:	0f 90       	pop	r0
    2724:	0f 90       	pop	r0
    2726:	0f 90       	pop	r0
    2728:	cf 91       	pop	r28
    272a:	df 91       	pop	r29
    272c:	08 95       	ret

0000272e <push>:

void push(Stack *ps, StackEntry e)
{
    272e:	df 93       	push	r29
    2730:	cf 93       	push	r28
    2732:	00 d0       	rcall	.+0      	; 0x2734 <push+0x6>
    2734:	00 d0       	rcall	.+0      	; 0x2736 <push+0x8>
    2736:	cd b7       	in	r28, 0x3d	; 61
    2738:	de b7       	in	r29, 0x3e	; 62
    273a:	9a 83       	std	Y+2, r25	; 0x02
    273c:	89 83       	std	Y+1, r24	; 0x01
    273e:	7c 83       	std	Y+4, r23	; 0x04
    2740:	6b 83       	std	Y+3, r22	; 0x03
    if (!isFull(ps)) {
    2742:	89 81       	ldd	r24, Y+1	; 0x01
    2744:	9a 81       	ldd	r25, Y+2	; 0x02
    2746:	0e 94 56 13 	call	0x26ac	; 0x26ac <isFull>
    274a:	00 97       	sbiw	r24, 0x00	; 0
    274c:	89 f5       	brne	.+98     	; 0x27b0 <push+0x82>
        ps->arr[ps->top++] = e;
    274e:	89 81       	ldd	r24, Y+1	; 0x01
    2750:	9a 81       	ldd	r25, Y+2	; 0x02
    2752:	fc 01       	movw	r30, r24
    2754:	e8 53       	subi	r30, 0x38	; 56
    2756:	ff 4f       	sbci	r31, 0xFF	; 255
    2758:	40 81       	ld	r20, Z
    275a:	51 81       	ldd	r21, Z+1	; 0x01
    275c:	29 81       	ldd	r18, Y+1	; 0x01
    275e:	3a 81       	ldd	r19, Y+2	; 0x02
    2760:	ca 01       	movw	r24, r20
    2762:	88 0f       	add	r24, r24
    2764:	99 1f       	adc	r25, r25
    2766:	f9 01       	movw	r30, r18
    2768:	e8 0f       	add	r30, r24
    276a:	f9 1f       	adc	r31, r25
    276c:	8b 81       	ldd	r24, Y+3	; 0x03
    276e:	9c 81       	ldd	r25, Y+4	; 0x04
    2770:	91 83       	std	Z+1, r25	; 0x01
    2772:	80 83       	st	Z, r24
    2774:	9a 01       	movw	r18, r20
    2776:	2f 5f       	subi	r18, 0xFF	; 255
    2778:	3f 4f       	sbci	r19, 0xFF	; 255
    277a:	89 81       	ldd	r24, Y+1	; 0x01
    277c:	9a 81       	ldd	r25, Y+2	; 0x02
    277e:	fc 01       	movw	r30, r24
    2780:	e8 53       	subi	r30, 0x38	; 56
    2782:	ff 4f       	sbci	r31, 0xFF	; 255
    2784:	31 83       	std	Z+1, r19	; 0x01
    2786:	20 83       	st	Z, r18
        printf("%d pushed into stack\n", e);
    2788:	00 d0       	rcall	.+0      	; 0x278a <push+0x5c>
    278a:	00 d0       	rcall	.+0      	; 0x278c <push+0x5e>
    278c:	ed b7       	in	r30, 0x3d	; 61
    278e:	fe b7       	in	r31, 0x3e	; 62
    2790:	31 96       	adiw	r30, 0x01	; 1
    2792:	80 e6       	ldi	r24, 0x60	; 96
    2794:	90 e0       	ldi	r25, 0x00	; 0
    2796:	91 83       	std	Z+1, r25	; 0x01
    2798:	80 83       	st	Z, r24
    279a:	8b 81       	ldd	r24, Y+3	; 0x03
    279c:	9c 81       	ldd	r25, Y+4	; 0x04
    279e:	93 83       	std	Z+3, r25	; 0x03
    27a0:	82 83       	std	Z+2, r24	; 0x02
    27a2:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <printf>
    27a6:	0f 90       	pop	r0
    27a8:	0f 90       	pop	r0
    27aa:	0f 90       	pop	r0
    27ac:	0f 90       	pop	r0
    27ae:	04 c0       	rjmp	.+8      	; 0x27b8 <push+0x8a>
    } else {
        printf("Stack is full\n");
    27b0:	86 e7       	ldi	r24, 0x76	; 118
    27b2:	90 e0       	ldi	r25, 0x00	; 0
    27b4:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <puts>
    }
}
    27b8:	0f 90       	pop	r0
    27ba:	0f 90       	pop	r0
    27bc:	0f 90       	pop	r0
    27be:	0f 90       	pop	r0
    27c0:	cf 91       	pop	r28
    27c2:	df 91       	pop	r29
    27c4:	08 95       	ret

000027c6 <pop>:

void pop(Stack *ps, StackEntry *e)
{
    27c6:	df 93       	push	r29
    27c8:	cf 93       	push	r28
    27ca:	00 d0       	rcall	.+0      	; 0x27cc <pop+0x6>
    27cc:	00 d0       	rcall	.+0      	; 0x27ce <pop+0x8>
    27ce:	cd b7       	in	r28, 0x3d	; 61
    27d0:	de b7       	in	r29, 0x3e	; 62
    27d2:	9a 83       	std	Y+2, r25	; 0x02
    27d4:	89 83       	std	Y+1, r24	; 0x01
    27d6:	7c 83       	std	Y+4, r23	; 0x04
    27d8:	6b 83       	std	Y+3, r22	; 0x03
    if (!isEmpty(ps)) {
    27da:	89 81       	ldd	r24, Y+1	; 0x01
    27dc:	9a 81       	ldd	r25, Y+2	; 0x02
    27de:	0e 94 77 13 	call	0x26ee	; 0x26ee <isEmpty>
    27e2:	00 97       	sbiw	r24, 0x00	; 0
    27e4:	d9 f5       	brne	.+118    	; 0x285c <pop+0x96>
        *e = ps->arr[--ps->top];
    27e6:	89 81       	ldd	r24, Y+1	; 0x01
    27e8:	9a 81       	ldd	r25, Y+2	; 0x02
    27ea:	fc 01       	movw	r30, r24
    27ec:	e8 53       	subi	r30, 0x38	; 56
    27ee:	ff 4f       	sbci	r31, 0xFF	; 255
    27f0:	80 81       	ld	r24, Z
    27f2:	91 81       	ldd	r25, Z+1	; 0x01
    27f4:	9c 01       	movw	r18, r24
    27f6:	21 50       	subi	r18, 0x01	; 1
    27f8:	30 40       	sbci	r19, 0x00	; 0
    27fa:	89 81       	ldd	r24, Y+1	; 0x01
    27fc:	9a 81       	ldd	r25, Y+2	; 0x02
    27fe:	fc 01       	movw	r30, r24
    2800:	e8 53       	subi	r30, 0x38	; 56
    2802:	ff 4f       	sbci	r31, 0xFF	; 255
    2804:	31 83       	std	Z+1, r19	; 0x01
    2806:	20 83       	st	Z, r18
    2808:	89 81       	ldd	r24, Y+1	; 0x01
    280a:	9a 81       	ldd	r25, Y+2	; 0x02
    280c:	fc 01       	movw	r30, r24
    280e:	e8 53       	subi	r30, 0x38	; 56
    2810:	ff 4f       	sbci	r31, 0xFF	; 255
    2812:	80 81       	ld	r24, Z
    2814:	91 81       	ldd	r25, Z+1	; 0x01
    2816:	29 81       	ldd	r18, Y+1	; 0x01
    2818:	3a 81       	ldd	r19, Y+2	; 0x02
    281a:	88 0f       	add	r24, r24
    281c:	99 1f       	adc	r25, r25
    281e:	f9 01       	movw	r30, r18
    2820:	e8 0f       	add	r30, r24
    2822:	f9 1f       	adc	r31, r25
    2824:	80 81       	ld	r24, Z
    2826:	91 81       	ldd	r25, Z+1	; 0x01
    2828:	eb 81       	ldd	r30, Y+3	; 0x03
    282a:	fc 81       	ldd	r31, Y+4	; 0x04
    282c:	91 83       	std	Z+1, r25	; 0x01
    282e:	80 83       	st	Z, r24
        printf("%d Popped from stack\n", *e);
    2830:	eb 81       	ldd	r30, Y+3	; 0x03
    2832:	fc 81       	ldd	r31, Y+4	; 0x04
    2834:	20 81       	ld	r18, Z
    2836:	31 81       	ldd	r19, Z+1	; 0x01
    2838:	00 d0       	rcall	.+0      	; 0x283a <pop+0x74>
    283a:	00 d0       	rcall	.+0      	; 0x283c <pop+0x76>
    283c:	ed b7       	in	r30, 0x3d	; 61
    283e:	fe b7       	in	r31, 0x3e	; 62
    2840:	31 96       	adiw	r30, 0x01	; 1
    2842:	84 e8       	ldi	r24, 0x84	; 132
    2844:	90 e0       	ldi	r25, 0x00	; 0
    2846:	91 83       	std	Z+1, r25	; 0x01
    2848:	80 83       	st	Z, r24
    284a:	33 83       	std	Z+3, r19	; 0x03
    284c:	22 83       	std	Z+2, r18	; 0x02
    284e:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <printf>
    2852:	0f 90       	pop	r0
    2854:	0f 90       	pop	r0
    2856:	0f 90       	pop	r0
    2858:	0f 90       	pop	r0
    285a:	04 c0       	rjmp	.+8      	; 0x2864 <pop+0x9e>
    } else {
        printf("Stack is empty\n");
    285c:	8a e9       	ldi	r24, 0x9A	; 154
    285e:	90 e0       	ldi	r25, 0x00	; 0
    2860:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <puts>
    }


}
    2864:	0f 90       	pop	r0
    2866:	0f 90       	pop	r0
    2868:	0f 90       	pop	r0
    286a:	0f 90       	pop	r0
    286c:	cf 91       	pop	r28
    286e:	df 91       	pop	r29
    2870:	08 95       	ret

00002872 <clearStack>:

void clearStack(Stack *ps) {
    2872:	df 93       	push	r29
    2874:	cf 93       	push	r28
    2876:	00 d0       	rcall	.+0      	; 0x2878 <clearStack+0x6>
    2878:	cd b7       	in	r28, 0x3d	; 61
    287a:	de b7       	in	r29, 0x3e	; 62
    287c:	9a 83       	std	Y+2, r25	; 0x02
    287e:	89 83       	std	Y+1, r24	; 0x01
    ps->top = 0;
    2880:	89 81       	ldd	r24, Y+1	; 0x01
    2882:	9a 81       	ldd	r25, Y+2	; 0x02
    2884:	fc 01       	movw	r30, r24
    2886:	e8 53       	subi	r30, 0x38	; 56
    2888:	ff 4f       	sbci	r31, 0xFF	; 255
    288a:	11 82       	std	Z+1, r1	; 0x01
    288c:	10 82       	st	Z, r1
}
    288e:	0f 90       	pop	r0
    2890:	0f 90       	pop	r0
    2892:	cf 91       	pop	r28
    2894:	df 91       	pop	r29
    2896:	08 95       	ret

00002898 <main>:
#include "util/delay.h"
#include "DIO_Int.h"



int main(void) {
    2898:	0f 93       	push	r16
    289a:	1f 93       	push	r17
    289c:	df 93       	push	r29
    289e:	cf 93       	push	r28
    28a0:	cd b7       	in	r28, 0x3d	; 61
    28a2:	de b7       	in	r29, 0x3e	; 62
    28a4:	c5 54       	subi	r28, 0x45	; 69
    28a6:	d0 40       	sbci	r29, 0x00	; 0
    28a8:	0f b6       	in	r0, 0x3f	; 63
    28aa:	f8 94       	cli
    28ac:	de bf       	out	0x3e, r29	; 62
    28ae:	0f be       	out	0x3f, r0	; 63
    28b0:	cd bf       	out	0x3d, r28	; 61
    Calc_Start();
    28b2:	0e 94 a3 05 	call	0xb46	; 0xb46 <Calc_Start>

    char infix[25] = "";
    28b6:	1e 82       	std	Y+6, r1	; 0x06
    28b8:	1f 82       	std	Y+7, r1	; 0x07
    28ba:	18 86       	std	Y+8, r1	; 0x08
    28bc:	19 86       	std	Y+9, r1	; 0x09
    28be:	85 e1       	ldi	r24, 0x15	; 21
    28c0:	fe 01       	movw	r30, r28
    28c2:	3a 96       	adiw	r30, 0x0a	; 10
    28c4:	df 01       	movw	r26, r30
    28c6:	98 2f       	mov	r25, r24
    28c8:	1d 92       	st	X+, r1
    28ca:	9a 95       	dec	r25
    28cc:	e9 f7       	brne	.-6      	; 0x28c8 <main+0x30>
    char postfix[25] = "";
    28ce:	1f 8e       	std	Y+31, r1	; 0x1f
    28d0:	18 a2       	std	Y+32, r1	; 0x20
    28d2:	19 a2       	std	Y+33, r1	; 0x21
    28d4:	1a a2       	std	Y+34, r1	; 0x22
    28d6:	85 e1       	ldi	r24, 0x15	; 21
    28d8:	fe 01       	movw	r30, r28
    28da:	b3 96       	adiw	r30, 0x23	; 35
    28dc:	df 01       	movw	r26, r30
    28de:	98 2f       	mov	r25, r24
    28e0:	1d 92       	st	X+, r1
    28e2:	9a 95       	dec	r25
    28e4:	e9 f7       	brne	.-6      	; 0x28e0 <main+0x48>
    int index = 0;
    28e6:	1d 82       	std	Y+5, r1	; 0x05
    28e8:	1c 82       	std	Y+4, r1	; 0x04
    s32 result = 0;
    28ea:	18 ae       	std	Y+56, r1	; 0x38
    28ec:	19 ae       	std	Y+57, r1	; 0x39
    28ee:	1a ae       	std	Y+58, r1	; 0x3a
    28f0:	1b ae       	std	Y+59, r1	; 0x3b
    u8 local_ValueKey;

    while (1)
    {
        local_ValueKey = GetPressedKey();
    28f2:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <GetPressedKey>
    28f6:	8b 83       	std	Y+3, r24	; 0x03
        if (local_ValueKey != Not_Pressed) {
    28f8:	8b 81       	ldd	r24, Y+3	; 0x03
    28fa:	8f 3f       	cpi	r24, 0xFF	; 255
    28fc:	d1 f3       	breq	.-12     	; 0x28f2 <main+0x5a>
            if (local_ValueKey >= '0' && local_ValueKey <= '9') {
    28fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2900:	80 33       	cpi	r24, 0x30	; 48
    2902:	a8 f0       	brcs	.+42     	; 0x292e <main+0x96>
    2904:	8b 81       	ldd	r24, Y+3	; 0x03
    2906:	8a 33       	cpi	r24, 0x3A	; 58
    2908:	90 f4       	brcc	.+36     	; 0x292e <main+0x96>

                infix[index++] = local_ValueKey;
    290a:	2c 81       	ldd	r18, Y+4	; 0x04
    290c:	3d 81       	ldd	r19, Y+5	; 0x05
    290e:	ce 01       	movw	r24, r28
    2910:	06 96       	adiw	r24, 0x06	; 6
    2912:	fc 01       	movw	r30, r24
    2914:	e2 0f       	add	r30, r18
    2916:	f3 1f       	adc	r31, r19
    2918:	8b 81       	ldd	r24, Y+3	; 0x03
    291a:	80 83       	st	Z, r24
    291c:	8c 81       	ldd	r24, Y+4	; 0x04
    291e:	9d 81       	ldd	r25, Y+5	; 0x05
    2920:	01 96       	adiw	r24, 0x01	; 1
    2922:	9d 83       	std	Y+5, r25	; 0x05
    2924:	8c 83       	std	Y+4, r24	; 0x04
                LCD_enuSendData(local_ValueKey);
    2926:	8b 81       	ldd	r24, Y+3	; 0x03
    2928:	0e 94 3c 11 	call	0x2278	; 0x2278 <LCD_enuSendData>
    292c:	e2 cf       	rjmp	.-60     	; 0x28f2 <main+0x5a>
            }
            else if (local_ValueKey == '+' || local_ValueKey == '-' ||
    292e:	8b 81       	ldd	r24, Y+3	; 0x03
    2930:	8b 32       	cpi	r24, 0x2B	; 43
    2932:	79 f0       	breq	.+30     	; 0x2952 <main+0xba>
    2934:	8b 81       	ldd	r24, Y+3	; 0x03
    2936:	8d 32       	cpi	r24, 0x2D	; 45
    2938:	61 f0       	breq	.+24     	; 0x2952 <main+0xba>
    293a:	8b 81       	ldd	r24, Y+3	; 0x03
    293c:	8a 32       	cpi	r24, 0x2A	; 42
    293e:	49 f0       	breq	.+18     	; 0x2952 <main+0xba>
    2940:	8b 81       	ldd	r24, Y+3	; 0x03
    2942:	8f 32       	cpi	r24, 0x2F	; 47
    2944:	31 f0       	breq	.+12     	; 0x2952 <main+0xba>
    2946:	8b 81       	ldd	r24, Y+3	; 0x03
    2948:	88 32       	cpi	r24, 0x28	; 40
    294a:	19 f0       	breq	.+6      	; 0x2952 <main+0xba>
    294c:	8b 81       	ldd	r24, Y+3	; 0x03
    294e:	89 32       	cpi	r24, 0x29	; 41
    2950:	91 f4       	brne	.+36     	; 0x2976 <main+0xde>
                     local_ValueKey == '*' || local_ValueKey == '/' ||
                     local_ValueKey == '(' || local_ValueKey == ')')
            {

                infix[index++] = local_ValueKey;
    2952:	2c 81       	ldd	r18, Y+4	; 0x04
    2954:	3d 81       	ldd	r19, Y+5	; 0x05
    2956:	ce 01       	movw	r24, r28
    2958:	06 96       	adiw	r24, 0x06	; 6
    295a:	fc 01       	movw	r30, r24
    295c:	e2 0f       	add	r30, r18
    295e:	f3 1f       	adc	r31, r19
    2960:	8b 81       	ldd	r24, Y+3	; 0x03
    2962:	80 83       	st	Z, r24
    2964:	8c 81       	ldd	r24, Y+4	; 0x04
    2966:	9d 81       	ldd	r25, Y+5	; 0x05
    2968:	01 96       	adiw	r24, 0x01	; 1
    296a:	9d 83       	std	Y+5, r25	; 0x05
    296c:	8c 83       	std	Y+4, r24	; 0x04
                LCD_enuSendData(local_ValueKey);
    296e:	8b 81       	ldd	r24, Y+3	; 0x03
    2970:	0e 94 3c 11 	call	0x2278	; 0x2278 <LCD_enuSendData>
    2974:	be cf       	rjmp	.-132    	; 0x28f2 <main+0x5a>
            }
            else if (local_ValueKey == '=')
    2976:	8b 81       	ldd	r24, Y+3	; 0x03
    2978:	8d 33       	cpi	r24, 0x3D	; 61
    297a:	09 f0       	breq	.+2      	; 0x297e <main+0xe6>
    297c:	82 c0       	rjmp	.+260    	; 0x2a82 <main+0x1ea>
            {

                LCD_enuSendData('=');
    297e:	8d e3       	ldi	r24, 0x3D	; 61
    2980:	0e 94 3c 11 	call	0x2278	; 0x2278 <LCD_enuSendData>
                infix[index] = '\0';
    2984:	2c 81       	ldd	r18, Y+4	; 0x04
    2986:	3d 81       	ldd	r19, Y+5	; 0x05
    2988:	ce 01       	movw	r24, r28
    298a:	06 96       	adiw	r24, 0x06	; 6
    298c:	fc 01       	movw	r30, r24
    298e:	e2 0f       	add	r30, r18
    2990:	f3 1f       	adc	r31, r19
    2992:	10 82       	st	Z, r1
                if (Calc_InfixToPostfix(infix, postfix) == DIO_OK)
    2994:	ce 01       	movw	r24, r28
    2996:	06 96       	adiw	r24, 0x06	; 6
    2998:	9e 01       	movw	r18, r28
    299a:	21 5e       	subi	r18, 0xE1	; 225
    299c:	3f 4f       	sbci	r19, 0xFF	; 255
    299e:	b9 01       	movw	r22, r18
    29a0:	0e 94 b5 06 	call	0xd6a	; 0xd6a <Calc_InfixToPostfix>
    29a4:	88 23       	and	r24, r24
    29a6:	09 f0       	breq	.+2      	; 0x29aa <main+0x112>
    29a8:	64 c0       	rjmp	.+200    	; 0x2a72 <main+0x1da>
                {
                    if (Calc_EvaluatePostfix(postfix, &result) == DIO_OK)
    29aa:	ce 01       	movw	r24, r28
    29ac:	4f 96       	adiw	r24, 0x1f	; 31
    29ae:	9e 01       	movw	r18, r28
    29b0:	28 5c       	subi	r18, 0xC8	; 200
    29b2:	3f 4f       	sbci	r19, 0xFF	; 255
    29b4:	b9 01       	movw	r22, r18
    29b6:	0e 94 6f 08 	call	0x10de	; 0x10de <Calc_EvaluatePostfix>
    29ba:	88 23       	and	r24, r24
    29bc:	09 f0       	breq	.+2      	; 0x29c0 <main+0x128>
    29be:	53 c0       	rjmp	.+166    	; 0x2a66 <main+0x1ce>
                    {
                        LCD_enuSendCommand(0x01);
    29c0:	81 e0       	ldi	r24, 0x01	; 1
    29c2:	0e 94 52 11 	call	0x22a4	; 0x22a4 <LCD_enuSendCommand>

                        char digits[10];
                        int i = 0;
    29c6:	1a 82       	std	Y+2, r1	; 0x02
    29c8:	19 82       	std	Y+1, r1	; 0x01
                        do {
                            digits[i++] = (result % 10) + '0';
    29ca:	09 81       	ldd	r16, Y+1	; 0x01
    29cc:	1a 81       	ldd	r17, Y+2	; 0x02
    29ce:	88 ad       	ldd	r24, Y+56	; 0x38
    29d0:	99 ad       	ldd	r25, Y+57	; 0x39
    29d2:	aa ad       	ldd	r26, Y+58	; 0x3a
    29d4:	bb ad       	ldd	r27, Y+59	; 0x3b
    29d6:	2a e0       	ldi	r18, 0x0A	; 10
    29d8:	30 e0       	ldi	r19, 0x00	; 0
    29da:	40 e0       	ldi	r20, 0x00	; 0
    29dc:	50 e0       	ldi	r21, 0x00	; 0
    29de:	bc 01       	movw	r22, r24
    29e0:	cd 01       	movw	r24, r26
    29e2:	0e 94 6a 15 	call	0x2ad4	; 0x2ad4 <__divmodsi4>
    29e6:	dc 01       	movw	r26, r24
    29e8:	cb 01       	movw	r24, r22
    29ea:	28 2f       	mov	r18, r24
    29ec:	20 5d       	subi	r18, 0xD0	; 208
    29ee:	ce 01       	movw	r24, r28
    29f0:	cc 96       	adiw	r24, 0x3c	; 60
    29f2:	fc 01       	movw	r30, r24
    29f4:	e0 0f       	add	r30, r16
    29f6:	f1 1f       	adc	r31, r17
    29f8:	20 83       	st	Z, r18
    29fa:	89 81       	ldd	r24, Y+1	; 0x01
    29fc:	9a 81       	ldd	r25, Y+2	; 0x02
    29fe:	01 96       	adiw	r24, 0x01	; 1
    2a00:	9a 83       	std	Y+2, r25	; 0x02
    2a02:	89 83       	std	Y+1, r24	; 0x01
                            result /= 10;
    2a04:	88 ad       	ldd	r24, Y+56	; 0x38
    2a06:	99 ad       	ldd	r25, Y+57	; 0x39
    2a08:	aa ad       	ldd	r26, Y+58	; 0x3a
    2a0a:	bb ad       	ldd	r27, Y+59	; 0x3b
    2a0c:	2a e0       	ldi	r18, 0x0A	; 10
    2a0e:	30 e0       	ldi	r19, 0x00	; 0
    2a10:	40 e0       	ldi	r20, 0x00	; 0
    2a12:	50 e0       	ldi	r21, 0x00	; 0
    2a14:	bc 01       	movw	r22, r24
    2a16:	cd 01       	movw	r24, r26
    2a18:	0e 94 6a 15 	call	0x2ad4	; 0x2ad4 <__divmodsi4>
    2a1c:	da 01       	movw	r26, r20
    2a1e:	c9 01       	movw	r24, r18
    2a20:	88 af       	std	Y+56, r24	; 0x38
    2a22:	99 af       	std	Y+57, r25	; 0x39
    2a24:	aa af       	std	Y+58, r26	; 0x3a
    2a26:	bb af       	std	Y+59, r27	; 0x3b
                        } while (result > 0);
    2a28:	88 ad       	ldd	r24, Y+56	; 0x38
    2a2a:	99 ad       	ldd	r25, Y+57	; 0x39
    2a2c:	aa ad       	ldd	r26, Y+58	; 0x3a
    2a2e:	bb ad       	ldd	r27, Y+59	; 0x3b
    2a30:	18 16       	cp	r1, r24
    2a32:	19 06       	cpc	r1, r25
    2a34:	1a 06       	cpc	r1, r26
    2a36:	1b 06       	cpc	r1, r27
    2a38:	44 f2       	brlt	.-112    	; 0x29ca <main+0x132>
    2a3a:	0f c0       	rjmp	.+30     	; 0x2a5a <main+0x1c2>

                        while (i > 0) {
                            LCD_enuSendData(digits[--i]);
    2a3c:	89 81       	ldd	r24, Y+1	; 0x01
    2a3e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a40:	01 97       	sbiw	r24, 0x01	; 1
    2a42:	9a 83       	std	Y+2, r25	; 0x02
    2a44:	89 83       	std	Y+1, r24	; 0x01
    2a46:	29 81       	ldd	r18, Y+1	; 0x01
    2a48:	3a 81       	ldd	r19, Y+2	; 0x02
    2a4a:	ce 01       	movw	r24, r28
    2a4c:	cc 96       	adiw	r24, 0x3c	; 60
    2a4e:	fc 01       	movw	r30, r24
    2a50:	e2 0f       	add	r30, r18
    2a52:	f3 1f       	adc	r31, r19
    2a54:	80 81       	ld	r24, Z
    2a56:	0e 94 3c 11 	call	0x2278	; 0x2278 <LCD_enuSendData>
                        do {
                            digits[i++] = (result % 10) + '0';
                            result /= 10;
                        } while (result > 0);

                        while (i > 0) {
    2a5a:	89 81       	ldd	r24, Y+1	; 0x01
    2a5c:	9a 81       	ldd	r25, Y+2	; 0x02
    2a5e:	18 16       	cp	r1, r24
    2a60:	19 06       	cpc	r1, r25
    2a62:	64 f3       	brlt	.-40     	; 0x2a3c <main+0x1a4>
    2a64:	0b c0       	rjmp	.+22     	; 0x2a7c <main+0x1e4>
                            LCD_enuSendData(digits[--i]);
                        }
                    } else {
                        LCD_enuSendCommand(0xC0);
    2a66:	80 ec       	ldi	r24, 0xC0	; 192
    2a68:	0e 94 52 11 	call	0x22a4	; 0x22a4 <LCD_enuSendCommand>
                        Calc_Error();
    2a6c:	0e 94 48 06 	call	0xc90	; 0xc90 <Calc_Error>
    2a70:	05 c0       	rjmp	.+10     	; 0x2a7c <main+0x1e4>
                    }

                }
                else
                {
                    LCD_enuSendCommand(0xC0);
    2a72:	80 ec       	ldi	r24, 0xC0	; 192
    2a74:	0e 94 52 11 	call	0x22a4	; 0x22a4 <LCD_enuSendCommand>
                    Calc_Error();
    2a78:	0e 94 48 06 	call	0xc90	; 0xc90 <Calc_Error>
                }

                index = 0;
    2a7c:	1d 82       	std	Y+5, r1	; 0x05
    2a7e:	1c 82       	std	Y+4, r1	; 0x04
    2a80:	38 cf       	rjmp	.-400    	; 0x28f2 <main+0x5a>
            }
            else if (local_ValueKey == 'c') {
    2a82:	8b 81       	ldd	r24, Y+3	; 0x03
    2a84:	83 36       	cpi	r24, 0x63	; 99
    2a86:	09 f0       	breq	.+2      	; 0x2a8a <main+0x1f2>
    2a88:	34 cf       	rjmp	.-408    	; 0x28f2 <main+0x5a>
                index = 0;
    2a8a:	1d 82       	std	Y+5, r1	; 0x05
    2a8c:	1c 82       	std	Y+4, r1	; 0x04
                LCD_enuSendCommand(0x01);
    2a8e:	81 e0       	ldi	r24, 0x01	; 1
    2a90:	0e 94 52 11 	call	0x22a4	; 0x22a4 <LCD_enuSendCommand>
    2a94:	2e cf       	rjmp	.-420    	; 0x28f2 <main+0x5a>

00002a96 <__mulsi3>:
    2a96:	62 9f       	mul	r22, r18
    2a98:	d0 01       	movw	r26, r0
    2a9a:	73 9f       	mul	r23, r19
    2a9c:	f0 01       	movw	r30, r0
    2a9e:	82 9f       	mul	r24, r18
    2aa0:	e0 0d       	add	r30, r0
    2aa2:	f1 1d       	adc	r31, r1
    2aa4:	64 9f       	mul	r22, r20
    2aa6:	e0 0d       	add	r30, r0
    2aa8:	f1 1d       	adc	r31, r1
    2aaa:	92 9f       	mul	r25, r18
    2aac:	f0 0d       	add	r31, r0
    2aae:	83 9f       	mul	r24, r19
    2ab0:	f0 0d       	add	r31, r0
    2ab2:	74 9f       	mul	r23, r20
    2ab4:	f0 0d       	add	r31, r0
    2ab6:	65 9f       	mul	r22, r21
    2ab8:	f0 0d       	add	r31, r0
    2aba:	99 27       	eor	r25, r25
    2abc:	72 9f       	mul	r23, r18
    2abe:	b0 0d       	add	r27, r0
    2ac0:	e1 1d       	adc	r30, r1
    2ac2:	f9 1f       	adc	r31, r25
    2ac4:	63 9f       	mul	r22, r19
    2ac6:	b0 0d       	add	r27, r0
    2ac8:	e1 1d       	adc	r30, r1
    2aca:	f9 1f       	adc	r31, r25
    2acc:	bd 01       	movw	r22, r26
    2ace:	cf 01       	movw	r24, r30
    2ad0:	11 24       	eor	r1, r1
    2ad2:	08 95       	ret

00002ad4 <__divmodsi4>:
    2ad4:	97 fb       	bst	r25, 7
    2ad6:	09 2e       	mov	r0, r25
    2ad8:	05 26       	eor	r0, r21
    2ada:	0e d0       	rcall	.+28     	; 0x2af8 <__divmodsi4_neg1>
    2adc:	57 fd       	sbrc	r21, 7
    2ade:	04 d0       	rcall	.+8      	; 0x2ae8 <__divmodsi4_neg2>
    2ae0:	14 d0       	rcall	.+40     	; 0x2b0a <__udivmodsi4>
    2ae2:	0a d0       	rcall	.+20     	; 0x2af8 <__divmodsi4_neg1>
    2ae4:	00 1c       	adc	r0, r0
    2ae6:	38 f4       	brcc	.+14     	; 0x2af6 <__divmodsi4_exit>

00002ae8 <__divmodsi4_neg2>:
    2ae8:	50 95       	com	r21
    2aea:	40 95       	com	r20
    2aec:	30 95       	com	r19
    2aee:	21 95       	neg	r18
    2af0:	3f 4f       	sbci	r19, 0xFF	; 255
    2af2:	4f 4f       	sbci	r20, 0xFF	; 255
    2af4:	5f 4f       	sbci	r21, 0xFF	; 255

00002af6 <__divmodsi4_exit>:
    2af6:	08 95       	ret

00002af8 <__divmodsi4_neg1>:
    2af8:	f6 f7       	brtc	.-4      	; 0x2af6 <__divmodsi4_exit>
    2afa:	90 95       	com	r25
    2afc:	80 95       	com	r24
    2afe:	70 95       	com	r23
    2b00:	61 95       	neg	r22
    2b02:	7f 4f       	sbci	r23, 0xFF	; 255
    2b04:	8f 4f       	sbci	r24, 0xFF	; 255
    2b06:	9f 4f       	sbci	r25, 0xFF	; 255
    2b08:	08 95       	ret

00002b0a <__udivmodsi4>:
    2b0a:	a1 e2       	ldi	r26, 0x21	; 33
    2b0c:	1a 2e       	mov	r1, r26
    2b0e:	aa 1b       	sub	r26, r26
    2b10:	bb 1b       	sub	r27, r27
    2b12:	fd 01       	movw	r30, r26
    2b14:	0d c0       	rjmp	.+26     	; 0x2b30 <__udivmodsi4_ep>

00002b16 <__udivmodsi4_loop>:
    2b16:	aa 1f       	adc	r26, r26
    2b18:	bb 1f       	adc	r27, r27
    2b1a:	ee 1f       	adc	r30, r30
    2b1c:	ff 1f       	adc	r31, r31
    2b1e:	a2 17       	cp	r26, r18
    2b20:	b3 07       	cpc	r27, r19
    2b22:	e4 07       	cpc	r30, r20
    2b24:	f5 07       	cpc	r31, r21
    2b26:	20 f0       	brcs	.+8      	; 0x2b30 <__udivmodsi4_ep>
    2b28:	a2 1b       	sub	r26, r18
    2b2a:	b3 0b       	sbc	r27, r19
    2b2c:	e4 0b       	sbc	r30, r20
    2b2e:	f5 0b       	sbc	r31, r21

00002b30 <__udivmodsi4_ep>:
    2b30:	66 1f       	adc	r22, r22
    2b32:	77 1f       	adc	r23, r23
    2b34:	88 1f       	adc	r24, r24
    2b36:	99 1f       	adc	r25, r25
    2b38:	1a 94       	dec	r1
    2b3a:	69 f7       	brne	.-38     	; 0x2b16 <__udivmodsi4_loop>
    2b3c:	60 95       	com	r22
    2b3e:	70 95       	com	r23
    2b40:	80 95       	com	r24
    2b42:	90 95       	com	r25
    2b44:	9b 01       	movw	r18, r22
    2b46:	ac 01       	movw	r20, r24
    2b48:	bd 01       	movw	r22, r26
    2b4a:	cf 01       	movw	r24, r30
    2b4c:	08 95       	ret

00002b4e <__prologue_saves__>:
    2b4e:	2f 92       	push	r2
    2b50:	3f 92       	push	r3
    2b52:	4f 92       	push	r4
    2b54:	5f 92       	push	r5
    2b56:	6f 92       	push	r6
    2b58:	7f 92       	push	r7
    2b5a:	8f 92       	push	r8
    2b5c:	9f 92       	push	r9
    2b5e:	af 92       	push	r10
    2b60:	bf 92       	push	r11
    2b62:	cf 92       	push	r12
    2b64:	df 92       	push	r13
    2b66:	ef 92       	push	r14
    2b68:	ff 92       	push	r15
    2b6a:	0f 93       	push	r16
    2b6c:	1f 93       	push	r17
    2b6e:	cf 93       	push	r28
    2b70:	df 93       	push	r29
    2b72:	cd b7       	in	r28, 0x3d	; 61
    2b74:	de b7       	in	r29, 0x3e	; 62
    2b76:	ca 1b       	sub	r28, r26
    2b78:	db 0b       	sbc	r29, r27
    2b7a:	0f b6       	in	r0, 0x3f	; 63
    2b7c:	f8 94       	cli
    2b7e:	de bf       	out	0x3e, r29	; 62
    2b80:	0f be       	out	0x3f, r0	; 63
    2b82:	cd bf       	out	0x3d, r28	; 61
    2b84:	09 94       	ijmp

00002b86 <__epilogue_restores__>:
    2b86:	2a 88       	ldd	r2, Y+18	; 0x12
    2b88:	39 88       	ldd	r3, Y+17	; 0x11
    2b8a:	48 88       	ldd	r4, Y+16	; 0x10
    2b8c:	5f 84       	ldd	r5, Y+15	; 0x0f
    2b8e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2b90:	7d 84       	ldd	r7, Y+13	; 0x0d
    2b92:	8c 84       	ldd	r8, Y+12	; 0x0c
    2b94:	9b 84       	ldd	r9, Y+11	; 0x0b
    2b96:	aa 84       	ldd	r10, Y+10	; 0x0a
    2b98:	b9 84       	ldd	r11, Y+9	; 0x09
    2b9a:	c8 84       	ldd	r12, Y+8	; 0x08
    2b9c:	df 80       	ldd	r13, Y+7	; 0x07
    2b9e:	ee 80       	ldd	r14, Y+6	; 0x06
    2ba0:	fd 80       	ldd	r15, Y+5	; 0x05
    2ba2:	0c 81       	ldd	r16, Y+4	; 0x04
    2ba4:	1b 81       	ldd	r17, Y+3	; 0x03
    2ba6:	aa 81       	ldd	r26, Y+2	; 0x02
    2ba8:	b9 81       	ldd	r27, Y+1	; 0x01
    2baa:	ce 0f       	add	r28, r30
    2bac:	d1 1d       	adc	r29, r1
    2bae:	0f b6       	in	r0, 0x3f	; 63
    2bb0:	f8 94       	cli
    2bb2:	de bf       	out	0x3e, r29	; 62
    2bb4:	0f be       	out	0x3f, r0	; 63
    2bb6:	cd bf       	out	0x3d, r28	; 61
    2bb8:	ed 01       	movw	r28, r26
    2bba:	08 95       	ret

00002bbc <printf>:
    2bbc:	a0 e0       	ldi	r26, 0x00	; 0
    2bbe:	b0 e0       	ldi	r27, 0x00	; 0
    2bc0:	e4 ee       	ldi	r30, 0xE4	; 228
    2bc2:	f5 e1       	ldi	r31, 0x15	; 21
    2bc4:	0c 94 b7 15 	jmp	0x2b6e	; 0x2b6e <__prologue_saves__+0x20>
    2bc8:	fe 01       	movw	r30, r28
    2bca:	35 96       	adiw	r30, 0x05	; 5
    2bcc:	61 91       	ld	r22, Z+
    2bce:	71 91       	ld	r23, Z+
    2bd0:	80 91 cc 00 	lds	r24, 0x00CC
    2bd4:	90 91 cd 00 	lds	r25, 0x00CD
    2bd8:	af 01       	movw	r20, r30
    2bda:	0e 94 28 16 	call	0x2c50	; 0x2c50 <vfprintf>
    2bde:	20 96       	adiw	r28, 0x00	; 0
    2be0:	e2 e0       	ldi	r30, 0x02	; 2
    2be2:	0c 94 d3 15 	jmp	0x2ba6	; 0x2ba6 <__epilogue_restores__+0x20>

00002be6 <puts>:
    2be6:	0f 93       	push	r16
    2be8:	1f 93       	push	r17
    2bea:	cf 93       	push	r28
    2bec:	df 93       	push	r29
    2bee:	8c 01       	movw	r16, r24
    2bf0:	e0 91 cc 00 	lds	r30, 0x00CC
    2bf4:	f0 91 cd 00 	lds	r31, 0x00CD
    2bf8:	83 81       	ldd	r24, Z+3	; 0x03
    2bfa:	81 ff       	sbrs	r24, 1
    2bfc:	21 c0       	rjmp	.+66     	; 0x2c40 <puts+0x5a>
    2bfe:	c0 e0       	ldi	r28, 0x00	; 0
    2c00:	d0 e0       	ldi	r29, 0x00	; 0
    2c02:	0d c0       	rjmp	.+26     	; 0x2c1e <puts+0x38>
    2c04:	e0 91 cc 00 	lds	r30, 0x00CC
    2c08:	f0 91 cd 00 	lds	r31, 0x00CD
    2c0c:	20 85       	ldd	r18, Z+8	; 0x08
    2c0e:	31 85       	ldd	r19, Z+9	; 0x09
    2c10:	bf 01       	movw	r22, r30
    2c12:	f9 01       	movw	r30, r18
    2c14:	09 95       	icall
    2c16:	89 2b       	or	r24, r25
    2c18:	11 f0       	breq	.+4      	; 0x2c1e <puts+0x38>
    2c1a:	cf ef       	ldi	r28, 0xFF	; 255
    2c1c:	df ef       	ldi	r29, 0xFF	; 255
    2c1e:	f8 01       	movw	r30, r16
    2c20:	81 91       	ld	r24, Z+
    2c22:	8f 01       	movw	r16, r30
    2c24:	88 23       	and	r24, r24
    2c26:	71 f7       	brne	.-36     	; 0x2c04 <puts+0x1e>
    2c28:	e0 91 cc 00 	lds	r30, 0x00CC
    2c2c:	f0 91 cd 00 	lds	r31, 0x00CD
    2c30:	20 85       	ldd	r18, Z+8	; 0x08
    2c32:	31 85       	ldd	r19, Z+9	; 0x09
    2c34:	8a e0       	ldi	r24, 0x0A	; 10
    2c36:	bf 01       	movw	r22, r30
    2c38:	f9 01       	movw	r30, r18
    2c3a:	09 95       	icall
    2c3c:	89 2b       	or	r24, r25
    2c3e:	11 f0       	breq	.+4      	; 0x2c44 <puts+0x5e>
    2c40:	cf ef       	ldi	r28, 0xFF	; 255
    2c42:	df ef       	ldi	r29, 0xFF	; 255
    2c44:	ce 01       	movw	r24, r28
    2c46:	df 91       	pop	r29
    2c48:	cf 91       	pop	r28
    2c4a:	1f 91       	pop	r17
    2c4c:	0f 91       	pop	r16
    2c4e:	08 95       	ret

00002c50 <vfprintf>:
    2c50:	ab e0       	ldi	r26, 0x0B	; 11
    2c52:	b0 e0       	ldi	r27, 0x00	; 0
    2c54:	ee e2       	ldi	r30, 0x2E	; 46
    2c56:	f6 e1       	ldi	r31, 0x16	; 22
    2c58:	0c 94 a7 15 	jmp	0x2b4e	; 0x2b4e <__prologue_saves__>
    2c5c:	3c 01       	movw	r6, r24
    2c5e:	2b 01       	movw	r4, r22
    2c60:	5a 01       	movw	r10, r20
    2c62:	fc 01       	movw	r30, r24
    2c64:	17 82       	std	Z+7, r1	; 0x07
    2c66:	16 82       	std	Z+6, r1	; 0x06
    2c68:	83 81       	ldd	r24, Z+3	; 0x03
    2c6a:	81 fd       	sbrc	r24, 1
    2c6c:	03 c0       	rjmp	.+6      	; 0x2c74 <vfprintf+0x24>
    2c6e:	6f ef       	ldi	r22, 0xFF	; 255
    2c70:	7f ef       	ldi	r23, 0xFF	; 255
    2c72:	c6 c1       	rjmp	.+908    	; 0x3000 <vfprintf+0x3b0>
    2c74:	9a e0       	ldi	r25, 0x0A	; 10
    2c76:	89 2e       	mov	r8, r25
    2c78:	1e 01       	movw	r2, r28
    2c7a:	08 94       	sec
    2c7c:	21 1c       	adc	r2, r1
    2c7e:	31 1c       	adc	r3, r1
    2c80:	f3 01       	movw	r30, r6
    2c82:	23 81       	ldd	r18, Z+3	; 0x03
    2c84:	f2 01       	movw	r30, r4
    2c86:	23 fd       	sbrc	r18, 3
    2c88:	85 91       	lpm	r24, Z+
    2c8a:	23 ff       	sbrs	r18, 3
    2c8c:	81 91       	ld	r24, Z+
    2c8e:	2f 01       	movw	r4, r30
    2c90:	88 23       	and	r24, r24
    2c92:	09 f4       	brne	.+2      	; 0x2c96 <vfprintf+0x46>
    2c94:	b2 c1       	rjmp	.+868    	; 0x2ffa <vfprintf+0x3aa>
    2c96:	85 32       	cpi	r24, 0x25	; 37
    2c98:	39 f4       	brne	.+14     	; 0x2ca8 <vfprintf+0x58>
    2c9a:	23 fd       	sbrc	r18, 3
    2c9c:	85 91       	lpm	r24, Z+
    2c9e:	23 ff       	sbrs	r18, 3
    2ca0:	81 91       	ld	r24, Z+
    2ca2:	2f 01       	movw	r4, r30
    2ca4:	85 32       	cpi	r24, 0x25	; 37
    2ca6:	29 f4       	brne	.+10     	; 0x2cb2 <vfprintf+0x62>
    2ca8:	90 e0       	ldi	r25, 0x00	; 0
    2caa:	b3 01       	movw	r22, r6
    2cac:	0e 94 1b 18 	call	0x3036	; 0x3036 <fputc>
    2cb0:	e7 cf       	rjmp	.-50     	; 0x2c80 <vfprintf+0x30>
    2cb2:	98 2f       	mov	r25, r24
    2cb4:	ff 24       	eor	r15, r15
    2cb6:	ee 24       	eor	r14, r14
    2cb8:	99 24       	eor	r9, r9
    2cba:	ff e1       	ldi	r31, 0x1F	; 31
    2cbc:	ff 15       	cp	r31, r15
    2cbe:	d0 f0       	brcs	.+52     	; 0x2cf4 <vfprintf+0xa4>
    2cc0:	9b 32       	cpi	r25, 0x2B	; 43
    2cc2:	69 f0       	breq	.+26     	; 0x2cde <vfprintf+0x8e>
    2cc4:	9c 32       	cpi	r25, 0x2C	; 44
    2cc6:	28 f4       	brcc	.+10     	; 0x2cd2 <vfprintf+0x82>
    2cc8:	90 32       	cpi	r25, 0x20	; 32
    2cca:	59 f0       	breq	.+22     	; 0x2ce2 <vfprintf+0x92>
    2ccc:	93 32       	cpi	r25, 0x23	; 35
    2cce:	91 f4       	brne	.+36     	; 0x2cf4 <vfprintf+0xa4>
    2cd0:	0e c0       	rjmp	.+28     	; 0x2cee <vfprintf+0x9e>
    2cd2:	9d 32       	cpi	r25, 0x2D	; 45
    2cd4:	49 f0       	breq	.+18     	; 0x2ce8 <vfprintf+0x98>
    2cd6:	90 33       	cpi	r25, 0x30	; 48
    2cd8:	69 f4       	brne	.+26     	; 0x2cf4 <vfprintf+0xa4>
    2cda:	41 e0       	ldi	r20, 0x01	; 1
    2cdc:	24 c0       	rjmp	.+72     	; 0x2d26 <vfprintf+0xd6>
    2cde:	52 e0       	ldi	r21, 0x02	; 2
    2ce0:	f5 2a       	or	r15, r21
    2ce2:	84 e0       	ldi	r24, 0x04	; 4
    2ce4:	f8 2a       	or	r15, r24
    2ce6:	28 c0       	rjmp	.+80     	; 0x2d38 <vfprintf+0xe8>
    2ce8:	98 e0       	ldi	r25, 0x08	; 8
    2cea:	f9 2a       	or	r15, r25
    2cec:	25 c0       	rjmp	.+74     	; 0x2d38 <vfprintf+0xe8>
    2cee:	e0 e1       	ldi	r30, 0x10	; 16
    2cf0:	fe 2a       	or	r15, r30
    2cf2:	22 c0       	rjmp	.+68     	; 0x2d38 <vfprintf+0xe8>
    2cf4:	f7 fc       	sbrc	r15, 7
    2cf6:	29 c0       	rjmp	.+82     	; 0x2d4a <vfprintf+0xfa>
    2cf8:	89 2f       	mov	r24, r25
    2cfa:	80 53       	subi	r24, 0x30	; 48
    2cfc:	8a 30       	cpi	r24, 0x0A	; 10
    2cfe:	70 f4       	brcc	.+28     	; 0x2d1c <vfprintf+0xcc>
    2d00:	f6 fe       	sbrs	r15, 6
    2d02:	05 c0       	rjmp	.+10     	; 0x2d0e <vfprintf+0xbe>
    2d04:	98 9c       	mul	r9, r8
    2d06:	90 2c       	mov	r9, r0
    2d08:	11 24       	eor	r1, r1
    2d0a:	98 0e       	add	r9, r24
    2d0c:	15 c0       	rjmp	.+42     	; 0x2d38 <vfprintf+0xe8>
    2d0e:	e8 9c       	mul	r14, r8
    2d10:	e0 2c       	mov	r14, r0
    2d12:	11 24       	eor	r1, r1
    2d14:	e8 0e       	add	r14, r24
    2d16:	f0 e2       	ldi	r31, 0x20	; 32
    2d18:	ff 2a       	or	r15, r31
    2d1a:	0e c0       	rjmp	.+28     	; 0x2d38 <vfprintf+0xe8>
    2d1c:	9e 32       	cpi	r25, 0x2E	; 46
    2d1e:	29 f4       	brne	.+10     	; 0x2d2a <vfprintf+0xda>
    2d20:	f6 fc       	sbrc	r15, 6
    2d22:	6b c1       	rjmp	.+726    	; 0x2ffa <vfprintf+0x3aa>
    2d24:	40 e4       	ldi	r20, 0x40	; 64
    2d26:	f4 2a       	or	r15, r20
    2d28:	07 c0       	rjmp	.+14     	; 0x2d38 <vfprintf+0xe8>
    2d2a:	9c 36       	cpi	r25, 0x6C	; 108
    2d2c:	19 f4       	brne	.+6      	; 0x2d34 <vfprintf+0xe4>
    2d2e:	50 e8       	ldi	r21, 0x80	; 128
    2d30:	f5 2a       	or	r15, r21
    2d32:	02 c0       	rjmp	.+4      	; 0x2d38 <vfprintf+0xe8>
    2d34:	98 36       	cpi	r25, 0x68	; 104
    2d36:	49 f4       	brne	.+18     	; 0x2d4a <vfprintf+0xfa>
    2d38:	f2 01       	movw	r30, r4
    2d3a:	23 fd       	sbrc	r18, 3
    2d3c:	95 91       	lpm	r25, Z+
    2d3e:	23 ff       	sbrs	r18, 3
    2d40:	91 91       	ld	r25, Z+
    2d42:	2f 01       	movw	r4, r30
    2d44:	99 23       	and	r25, r25
    2d46:	09 f0       	breq	.+2      	; 0x2d4a <vfprintf+0xfa>
    2d48:	b8 cf       	rjmp	.-144    	; 0x2cba <vfprintf+0x6a>
    2d4a:	89 2f       	mov	r24, r25
    2d4c:	85 54       	subi	r24, 0x45	; 69
    2d4e:	83 30       	cpi	r24, 0x03	; 3
    2d50:	18 f0       	brcs	.+6      	; 0x2d58 <vfprintf+0x108>
    2d52:	80 52       	subi	r24, 0x20	; 32
    2d54:	83 30       	cpi	r24, 0x03	; 3
    2d56:	38 f4       	brcc	.+14     	; 0x2d66 <vfprintf+0x116>
    2d58:	44 e0       	ldi	r20, 0x04	; 4
    2d5a:	50 e0       	ldi	r21, 0x00	; 0
    2d5c:	a4 0e       	add	r10, r20
    2d5e:	b5 1e       	adc	r11, r21
    2d60:	5f e3       	ldi	r21, 0x3F	; 63
    2d62:	59 83       	std	Y+1, r21	; 0x01
    2d64:	0f c0       	rjmp	.+30     	; 0x2d84 <vfprintf+0x134>
    2d66:	93 36       	cpi	r25, 0x63	; 99
    2d68:	31 f0       	breq	.+12     	; 0x2d76 <vfprintf+0x126>
    2d6a:	93 37       	cpi	r25, 0x73	; 115
    2d6c:	79 f0       	breq	.+30     	; 0x2d8c <vfprintf+0x13c>
    2d6e:	93 35       	cpi	r25, 0x53	; 83
    2d70:	09 f0       	breq	.+2      	; 0x2d74 <vfprintf+0x124>
    2d72:	56 c0       	rjmp	.+172    	; 0x2e20 <vfprintf+0x1d0>
    2d74:	20 c0       	rjmp	.+64     	; 0x2db6 <vfprintf+0x166>
    2d76:	f5 01       	movw	r30, r10
    2d78:	80 81       	ld	r24, Z
    2d7a:	89 83       	std	Y+1, r24	; 0x01
    2d7c:	42 e0       	ldi	r20, 0x02	; 2
    2d7e:	50 e0       	ldi	r21, 0x00	; 0
    2d80:	a4 0e       	add	r10, r20
    2d82:	b5 1e       	adc	r11, r21
    2d84:	61 01       	movw	r12, r2
    2d86:	01 e0       	ldi	r16, 0x01	; 1
    2d88:	10 e0       	ldi	r17, 0x00	; 0
    2d8a:	12 c0       	rjmp	.+36     	; 0x2db0 <vfprintf+0x160>
    2d8c:	f5 01       	movw	r30, r10
    2d8e:	c0 80       	ld	r12, Z
    2d90:	d1 80       	ldd	r13, Z+1	; 0x01
    2d92:	f6 fc       	sbrc	r15, 6
    2d94:	03 c0       	rjmp	.+6      	; 0x2d9c <vfprintf+0x14c>
    2d96:	6f ef       	ldi	r22, 0xFF	; 255
    2d98:	7f ef       	ldi	r23, 0xFF	; 255
    2d9a:	02 c0       	rjmp	.+4      	; 0x2da0 <vfprintf+0x150>
    2d9c:	69 2d       	mov	r22, r9
    2d9e:	70 e0       	ldi	r23, 0x00	; 0
    2da0:	42 e0       	ldi	r20, 0x02	; 2
    2da2:	50 e0       	ldi	r21, 0x00	; 0
    2da4:	a4 0e       	add	r10, r20
    2da6:	b5 1e       	adc	r11, r21
    2da8:	c6 01       	movw	r24, r12
    2daa:	0e 94 10 18 	call	0x3020	; 0x3020 <strnlen>
    2dae:	8c 01       	movw	r16, r24
    2db0:	5f e7       	ldi	r21, 0x7F	; 127
    2db2:	f5 22       	and	r15, r21
    2db4:	14 c0       	rjmp	.+40     	; 0x2dde <vfprintf+0x18e>
    2db6:	f5 01       	movw	r30, r10
    2db8:	c0 80       	ld	r12, Z
    2dba:	d1 80       	ldd	r13, Z+1	; 0x01
    2dbc:	f6 fc       	sbrc	r15, 6
    2dbe:	03 c0       	rjmp	.+6      	; 0x2dc6 <vfprintf+0x176>
    2dc0:	6f ef       	ldi	r22, 0xFF	; 255
    2dc2:	7f ef       	ldi	r23, 0xFF	; 255
    2dc4:	02 c0       	rjmp	.+4      	; 0x2dca <vfprintf+0x17a>
    2dc6:	69 2d       	mov	r22, r9
    2dc8:	70 e0       	ldi	r23, 0x00	; 0
    2dca:	42 e0       	ldi	r20, 0x02	; 2
    2dcc:	50 e0       	ldi	r21, 0x00	; 0
    2dce:	a4 0e       	add	r10, r20
    2dd0:	b5 1e       	adc	r11, r21
    2dd2:	c6 01       	movw	r24, r12
    2dd4:	0e 94 05 18 	call	0x300a	; 0x300a <strnlen_P>
    2dd8:	8c 01       	movw	r16, r24
    2dda:	50 e8       	ldi	r21, 0x80	; 128
    2ddc:	f5 2a       	or	r15, r21
    2dde:	f3 fe       	sbrs	r15, 3
    2de0:	07 c0       	rjmp	.+14     	; 0x2df0 <vfprintf+0x1a0>
    2de2:	1a c0       	rjmp	.+52     	; 0x2e18 <vfprintf+0x1c8>
    2de4:	80 e2       	ldi	r24, 0x20	; 32
    2de6:	90 e0       	ldi	r25, 0x00	; 0
    2de8:	b3 01       	movw	r22, r6
    2dea:	0e 94 1b 18 	call	0x3036	; 0x3036 <fputc>
    2dee:	ea 94       	dec	r14
    2df0:	8e 2d       	mov	r24, r14
    2df2:	90 e0       	ldi	r25, 0x00	; 0
    2df4:	08 17       	cp	r16, r24
    2df6:	19 07       	cpc	r17, r25
    2df8:	a8 f3       	brcs	.-22     	; 0x2de4 <vfprintf+0x194>
    2dfa:	0e c0       	rjmp	.+28     	; 0x2e18 <vfprintf+0x1c8>
    2dfc:	f6 01       	movw	r30, r12
    2dfe:	f7 fc       	sbrc	r15, 7
    2e00:	85 91       	lpm	r24, Z+
    2e02:	f7 fe       	sbrs	r15, 7
    2e04:	81 91       	ld	r24, Z+
    2e06:	6f 01       	movw	r12, r30
    2e08:	90 e0       	ldi	r25, 0x00	; 0
    2e0a:	b3 01       	movw	r22, r6
    2e0c:	0e 94 1b 18 	call	0x3036	; 0x3036 <fputc>
    2e10:	e1 10       	cpse	r14, r1
    2e12:	ea 94       	dec	r14
    2e14:	01 50       	subi	r16, 0x01	; 1
    2e16:	10 40       	sbci	r17, 0x00	; 0
    2e18:	01 15       	cp	r16, r1
    2e1a:	11 05       	cpc	r17, r1
    2e1c:	79 f7       	brne	.-34     	; 0x2dfc <vfprintf+0x1ac>
    2e1e:	ea c0       	rjmp	.+468    	; 0x2ff4 <vfprintf+0x3a4>
    2e20:	94 36       	cpi	r25, 0x64	; 100
    2e22:	11 f0       	breq	.+4      	; 0x2e28 <vfprintf+0x1d8>
    2e24:	99 36       	cpi	r25, 0x69	; 105
    2e26:	69 f5       	brne	.+90     	; 0x2e82 <vfprintf+0x232>
    2e28:	f7 fe       	sbrs	r15, 7
    2e2a:	08 c0       	rjmp	.+16     	; 0x2e3c <vfprintf+0x1ec>
    2e2c:	f5 01       	movw	r30, r10
    2e2e:	20 81       	ld	r18, Z
    2e30:	31 81       	ldd	r19, Z+1	; 0x01
    2e32:	42 81       	ldd	r20, Z+2	; 0x02
    2e34:	53 81       	ldd	r21, Z+3	; 0x03
    2e36:	84 e0       	ldi	r24, 0x04	; 4
    2e38:	90 e0       	ldi	r25, 0x00	; 0
    2e3a:	0a c0       	rjmp	.+20     	; 0x2e50 <vfprintf+0x200>
    2e3c:	f5 01       	movw	r30, r10
    2e3e:	80 81       	ld	r24, Z
    2e40:	91 81       	ldd	r25, Z+1	; 0x01
    2e42:	9c 01       	movw	r18, r24
    2e44:	44 27       	eor	r20, r20
    2e46:	37 fd       	sbrc	r19, 7
    2e48:	40 95       	com	r20
    2e4a:	54 2f       	mov	r21, r20
    2e4c:	82 e0       	ldi	r24, 0x02	; 2
    2e4e:	90 e0       	ldi	r25, 0x00	; 0
    2e50:	a8 0e       	add	r10, r24
    2e52:	b9 1e       	adc	r11, r25
    2e54:	9f e6       	ldi	r25, 0x6F	; 111
    2e56:	f9 22       	and	r15, r25
    2e58:	57 ff       	sbrs	r21, 7
    2e5a:	09 c0       	rjmp	.+18     	; 0x2e6e <vfprintf+0x21e>
    2e5c:	50 95       	com	r21
    2e5e:	40 95       	com	r20
    2e60:	30 95       	com	r19
    2e62:	21 95       	neg	r18
    2e64:	3f 4f       	sbci	r19, 0xFF	; 255
    2e66:	4f 4f       	sbci	r20, 0xFF	; 255
    2e68:	5f 4f       	sbci	r21, 0xFF	; 255
    2e6a:	e0 e8       	ldi	r30, 0x80	; 128
    2e6c:	fe 2a       	or	r15, r30
    2e6e:	ca 01       	movw	r24, r20
    2e70:	b9 01       	movw	r22, r18
    2e72:	a1 01       	movw	r20, r2
    2e74:	2a e0       	ldi	r18, 0x0A	; 10
    2e76:	30 e0       	ldi	r19, 0x00	; 0
    2e78:	0e 94 47 18 	call	0x308e	; 0x308e <__ultoa_invert>
    2e7c:	d8 2e       	mov	r13, r24
    2e7e:	d2 18       	sub	r13, r2
    2e80:	40 c0       	rjmp	.+128    	; 0x2f02 <vfprintf+0x2b2>
    2e82:	95 37       	cpi	r25, 0x75	; 117
    2e84:	29 f4       	brne	.+10     	; 0x2e90 <vfprintf+0x240>
    2e86:	1f 2d       	mov	r17, r15
    2e88:	1f 7e       	andi	r17, 0xEF	; 239
    2e8a:	2a e0       	ldi	r18, 0x0A	; 10
    2e8c:	30 e0       	ldi	r19, 0x00	; 0
    2e8e:	1d c0       	rjmp	.+58     	; 0x2eca <vfprintf+0x27a>
    2e90:	1f 2d       	mov	r17, r15
    2e92:	19 7f       	andi	r17, 0xF9	; 249
    2e94:	9f 36       	cpi	r25, 0x6F	; 111
    2e96:	61 f0       	breq	.+24     	; 0x2eb0 <vfprintf+0x260>
    2e98:	90 37       	cpi	r25, 0x70	; 112
    2e9a:	20 f4       	brcc	.+8      	; 0x2ea4 <vfprintf+0x254>
    2e9c:	98 35       	cpi	r25, 0x58	; 88
    2e9e:	09 f0       	breq	.+2      	; 0x2ea2 <vfprintf+0x252>
    2ea0:	ac c0       	rjmp	.+344    	; 0x2ffa <vfprintf+0x3aa>
    2ea2:	0f c0       	rjmp	.+30     	; 0x2ec2 <vfprintf+0x272>
    2ea4:	90 37       	cpi	r25, 0x70	; 112
    2ea6:	39 f0       	breq	.+14     	; 0x2eb6 <vfprintf+0x266>
    2ea8:	98 37       	cpi	r25, 0x78	; 120
    2eaa:	09 f0       	breq	.+2      	; 0x2eae <vfprintf+0x25e>
    2eac:	a6 c0       	rjmp	.+332    	; 0x2ffa <vfprintf+0x3aa>
    2eae:	04 c0       	rjmp	.+8      	; 0x2eb8 <vfprintf+0x268>
    2eb0:	28 e0       	ldi	r18, 0x08	; 8
    2eb2:	30 e0       	ldi	r19, 0x00	; 0
    2eb4:	0a c0       	rjmp	.+20     	; 0x2eca <vfprintf+0x27a>
    2eb6:	10 61       	ori	r17, 0x10	; 16
    2eb8:	14 fd       	sbrc	r17, 4
    2eba:	14 60       	ori	r17, 0x04	; 4
    2ebc:	20 e1       	ldi	r18, 0x10	; 16
    2ebe:	30 e0       	ldi	r19, 0x00	; 0
    2ec0:	04 c0       	rjmp	.+8      	; 0x2eca <vfprintf+0x27a>
    2ec2:	14 fd       	sbrc	r17, 4
    2ec4:	16 60       	ori	r17, 0x06	; 6
    2ec6:	20 e1       	ldi	r18, 0x10	; 16
    2ec8:	32 e0       	ldi	r19, 0x02	; 2
    2eca:	17 ff       	sbrs	r17, 7
    2ecc:	08 c0       	rjmp	.+16     	; 0x2ede <vfprintf+0x28e>
    2ece:	f5 01       	movw	r30, r10
    2ed0:	60 81       	ld	r22, Z
    2ed2:	71 81       	ldd	r23, Z+1	; 0x01
    2ed4:	82 81       	ldd	r24, Z+2	; 0x02
    2ed6:	93 81       	ldd	r25, Z+3	; 0x03
    2ed8:	44 e0       	ldi	r20, 0x04	; 4
    2eda:	50 e0       	ldi	r21, 0x00	; 0
    2edc:	08 c0       	rjmp	.+16     	; 0x2eee <vfprintf+0x29e>
    2ede:	f5 01       	movw	r30, r10
    2ee0:	80 81       	ld	r24, Z
    2ee2:	91 81       	ldd	r25, Z+1	; 0x01
    2ee4:	bc 01       	movw	r22, r24
    2ee6:	80 e0       	ldi	r24, 0x00	; 0
    2ee8:	90 e0       	ldi	r25, 0x00	; 0
    2eea:	42 e0       	ldi	r20, 0x02	; 2
    2eec:	50 e0       	ldi	r21, 0x00	; 0
    2eee:	a4 0e       	add	r10, r20
    2ef0:	b5 1e       	adc	r11, r21
    2ef2:	a1 01       	movw	r20, r2
    2ef4:	0e 94 47 18 	call	0x308e	; 0x308e <__ultoa_invert>
    2ef8:	d8 2e       	mov	r13, r24
    2efa:	d2 18       	sub	r13, r2
    2efc:	8f e7       	ldi	r24, 0x7F	; 127
    2efe:	f8 2e       	mov	r15, r24
    2f00:	f1 22       	and	r15, r17
    2f02:	f6 fe       	sbrs	r15, 6
    2f04:	0b c0       	rjmp	.+22     	; 0x2f1c <vfprintf+0x2cc>
    2f06:	5e ef       	ldi	r21, 0xFE	; 254
    2f08:	f5 22       	and	r15, r21
    2f0a:	d9 14       	cp	r13, r9
    2f0c:	38 f4       	brcc	.+14     	; 0x2f1c <vfprintf+0x2cc>
    2f0e:	f4 fe       	sbrs	r15, 4
    2f10:	07 c0       	rjmp	.+14     	; 0x2f20 <vfprintf+0x2d0>
    2f12:	f2 fc       	sbrc	r15, 2
    2f14:	05 c0       	rjmp	.+10     	; 0x2f20 <vfprintf+0x2d0>
    2f16:	8f ee       	ldi	r24, 0xEF	; 239
    2f18:	f8 22       	and	r15, r24
    2f1a:	02 c0       	rjmp	.+4      	; 0x2f20 <vfprintf+0x2d0>
    2f1c:	1d 2d       	mov	r17, r13
    2f1e:	01 c0       	rjmp	.+2      	; 0x2f22 <vfprintf+0x2d2>
    2f20:	19 2d       	mov	r17, r9
    2f22:	f4 fe       	sbrs	r15, 4
    2f24:	0d c0       	rjmp	.+26     	; 0x2f40 <vfprintf+0x2f0>
    2f26:	fe 01       	movw	r30, r28
    2f28:	ed 0d       	add	r30, r13
    2f2a:	f1 1d       	adc	r31, r1
    2f2c:	80 81       	ld	r24, Z
    2f2e:	80 33       	cpi	r24, 0x30	; 48
    2f30:	19 f4       	brne	.+6      	; 0x2f38 <vfprintf+0x2e8>
    2f32:	99 ee       	ldi	r25, 0xE9	; 233
    2f34:	f9 22       	and	r15, r25
    2f36:	08 c0       	rjmp	.+16     	; 0x2f48 <vfprintf+0x2f8>
    2f38:	1f 5f       	subi	r17, 0xFF	; 255
    2f3a:	f2 fe       	sbrs	r15, 2
    2f3c:	05 c0       	rjmp	.+10     	; 0x2f48 <vfprintf+0x2f8>
    2f3e:	03 c0       	rjmp	.+6      	; 0x2f46 <vfprintf+0x2f6>
    2f40:	8f 2d       	mov	r24, r15
    2f42:	86 78       	andi	r24, 0x86	; 134
    2f44:	09 f0       	breq	.+2      	; 0x2f48 <vfprintf+0x2f8>
    2f46:	1f 5f       	subi	r17, 0xFF	; 255
    2f48:	0f 2d       	mov	r16, r15
    2f4a:	f3 fc       	sbrc	r15, 3
    2f4c:	14 c0       	rjmp	.+40     	; 0x2f76 <vfprintf+0x326>
    2f4e:	f0 fe       	sbrs	r15, 0
    2f50:	0f c0       	rjmp	.+30     	; 0x2f70 <vfprintf+0x320>
    2f52:	1e 15       	cp	r17, r14
    2f54:	10 f0       	brcs	.+4      	; 0x2f5a <vfprintf+0x30a>
    2f56:	9d 2c       	mov	r9, r13
    2f58:	0b c0       	rjmp	.+22     	; 0x2f70 <vfprintf+0x320>
    2f5a:	9d 2c       	mov	r9, r13
    2f5c:	9e 0c       	add	r9, r14
    2f5e:	91 1a       	sub	r9, r17
    2f60:	1e 2d       	mov	r17, r14
    2f62:	06 c0       	rjmp	.+12     	; 0x2f70 <vfprintf+0x320>
    2f64:	80 e2       	ldi	r24, 0x20	; 32
    2f66:	90 e0       	ldi	r25, 0x00	; 0
    2f68:	b3 01       	movw	r22, r6
    2f6a:	0e 94 1b 18 	call	0x3036	; 0x3036 <fputc>
    2f6e:	1f 5f       	subi	r17, 0xFF	; 255
    2f70:	1e 15       	cp	r17, r14
    2f72:	c0 f3       	brcs	.-16     	; 0x2f64 <vfprintf+0x314>
    2f74:	04 c0       	rjmp	.+8      	; 0x2f7e <vfprintf+0x32e>
    2f76:	1e 15       	cp	r17, r14
    2f78:	10 f4       	brcc	.+4      	; 0x2f7e <vfprintf+0x32e>
    2f7a:	e1 1a       	sub	r14, r17
    2f7c:	01 c0       	rjmp	.+2      	; 0x2f80 <vfprintf+0x330>
    2f7e:	ee 24       	eor	r14, r14
    2f80:	04 ff       	sbrs	r16, 4
    2f82:	0f c0       	rjmp	.+30     	; 0x2fa2 <vfprintf+0x352>
    2f84:	80 e3       	ldi	r24, 0x30	; 48
    2f86:	90 e0       	ldi	r25, 0x00	; 0
    2f88:	b3 01       	movw	r22, r6
    2f8a:	0e 94 1b 18 	call	0x3036	; 0x3036 <fputc>
    2f8e:	02 ff       	sbrs	r16, 2
    2f90:	1d c0       	rjmp	.+58     	; 0x2fcc <vfprintf+0x37c>
    2f92:	01 fd       	sbrc	r16, 1
    2f94:	03 c0       	rjmp	.+6      	; 0x2f9c <vfprintf+0x34c>
    2f96:	88 e7       	ldi	r24, 0x78	; 120
    2f98:	90 e0       	ldi	r25, 0x00	; 0
    2f9a:	0e c0       	rjmp	.+28     	; 0x2fb8 <vfprintf+0x368>
    2f9c:	88 e5       	ldi	r24, 0x58	; 88
    2f9e:	90 e0       	ldi	r25, 0x00	; 0
    2fa0:	0b c0       	rjmp	.+22     	; 0x2fb8 <vfprintf+0x368>
    2fa2:	80 2f       	mov	r24, r16
    2fa4:	86 78       	andi	r24, 0x86	; 134
    2fa6:	91 f0       	breq	.+36     	; 0x2fcc <vfprintf+0x37c>
    2fa8:	01 ff       	sbrs	r16, 1
    2faa:	02 c0       	rjmp	.+4      	; 0x2fb0 <vfprintf+0x360>
    2fac:	8b e2       	ldi	r24, 0x2B	; 43
    2fae:	01 c0       	rjmp	.+2      	; 0x2fb2 <vfprintf+0x362>
    2fb0:	80 e2       	ldi	r24, 0x20	; 32
    2fb2:	f7 fc       	sbrc	r15, 7
    2fb4:	8d e2       	ldi	r24, 0x2D	; 45
    2fb6:	90 e0       	ldi	r25, 0x00	; 0
    2fb8:	b3 01       	movw	r22, r6
    2fba:	0e 94 1b 18 	call	0x3036	; 0x3036 <fputc>
    2fbe:	06 c0       	rjmp	.+12     	; 0x2fcc <vfprintf+0x37c>
    2fc0:	80 e3       	ldi	r24, 0x30	; 48
    2fc2:	90 e0       	ldi	r25, 0x00	; 0
    2fc4:	b3 01       	movw	r22, r6
    2fc6:	0e 94 1b 18 	call	0x3036	; 0x3036 <fputc>
    2fca:	9a 94       	dec	r9
    2fcc:	d9 14       	cp	r13, r9
    2fce:	c0 f3       	brcs	.-16     	; 0x2fc0 <vfprintf+0x370>
    2fd0:	da 94       	dec	r13
    2fd2:	f1 01       	movw	r30, r2
    2fd4:	ed 0d       	add	r30, r13
    2fd6:	f1 1d       	adc	r31, r1
    2fd8:	80 81       	ld	r24, Z
    2fda:	90 e0       	ldi	r25, 0x00	; 0
    2fdc:	b3 01       	movw	r22, r6
    2fde:	0e 94 1b 18 	call	0x3036	; 0x3036 <fputc>
    2fe2:	dd 20       	and	r13, r13
    2fe4:	a9 f7       	brne	.-22     	; 0x2fd0 <vfprintf+0x380>
    2fe6:	06 c0       	rjmp	.+12     	; 0x2ff4 <vfprintf+0x3a4>
    2fe8:	80 e2       	ldi	r24, 0x20	; 32
    2fea:	90 e0       	ldi	r25, 0x00	; 0
    2fec:	b3 01       	movw	r22, r6
    2fee:	0e 94 1b 18 	call	0x3036	; 0x3036 <fputc>
    2ff2:	ea 94       	dec	r14
    2ff4:	ee 20       	and	r14, r14
    2ff6:	c1 f7       	brne	.-16     	; 0x2fe8 <vfprintf+0x398>
    2ff8:	43 ce       	rjmp	.-890    	; 0x2c80 <vfprintf+0x30>
    2ffa:	f3 01       	movw	r30, r6
    2ffc:	66 81       	ldd	r22, Z+6	; 0x06
    2ffe:	77 81       	ldd	r23, Z+7	; 0x07
    3000:	cb 01       	movw	r24, r22
    3002:	2b 96       	adiw	r28, 0x0b	; 11
    3004:	e2 e1       	ldi	r30, 0x12	; 18
    3006:	0c 94 c3 15 	jmp	0x2b86	; 0x2b86 <__epilogue_restores__>

0000300a <strnlen_P>:
    300a:	fc 01       	movw	r30, r24
    300c:	05 90       	lpm	r0, Z+
    300e:	61 50       	subi	r22, 0x01	; 1
    3010:	70 40       	sbci	r23, 0x00	; 0
    3012:	01 10       	cpse	r0, r1
    3014:	d8 f7       	brcc	.-10     	; 0x300c <strnlen_P+0x2>
    3016:	80 95       	com	r24
    3018:	90 95       	com	r25
    301a:	8e 0f       	add	r24, r30
    301c:	9f 1f       	adc	r25, r31
    301e:	08 95       	ret

00003020 <strnlen>:
    3020:	fc 01       	movw	r30, r24
    3022:	61 50       	subi	r22, 0x01	; 1
    3024:	70 40       	sbci	r23, 0x00	; 0
    3026:	01 90       	ld	r0, Z+
    3028:	01 10       	cpse	r0, r1
    302a:	d8 f7       	brcc	.-10     	; 0x3022 <strnlen+0x2>
    302c:	80 95       	com	r24
    302e:	90 95       	com	r25
    3030:	8e 0f       	add	r24, r30
    3032:	9f 1f       	adc	r25, r31
    3034:	08 95       	ret

00003036 <fputc>:
    3036:	0f 93       	push	r16
    3038:	1f 93       	push	r17
    303a:	cf 93       	push	r28
    303c:	df 93       	push	r29
    303e:	8c 01       	movw	r16, r24
    3040:	eb 01       	movw	r28, r22
    3042:	8b 81       	ldd	r24, Y+3	; 0x03
    3044:	81 ff       	sbrs	r24, 1
    3046:	1b c0       	rjmp	.+54     	; 0x307e <fputc+0x48>
    3048:	82 ff       	sbrs	r24, 2
    304a:	0d c0       	rjmp	.+26     	; 0x3066 <fputc+0x30>
    304c:	2e 81       	ldd	r18, Y+6	; 0x06
    304e:	3f 81       	ldd	r19, Y+7	; 0x07
    3050:	8c 81       	ldd	r24, Y+4	; 0x04
    3052:	9d 81       	ldd	r25, Y+5	; 0x05
    3054:	28 17       	cp	r18, r24
    3056:	39 07       	cpc	r19, r25
    3058:	64 f4       	brge	.+24     	; 0x3072 <fputc+0x3c>
    305a:	e8 81       	ld	r30, Y
    305c:	f9 81       	ldd	r31, Y+1	; 0x01
    305e:	01 93       	st	Z+, r16
    3060:	f9 83       	std	Y+1, r31	; 0x01
    3062:	e8 83       	st	Y, r30
    3064:	06 c0       	rjmp	.+12     	; 0x3072 <fputc+0x3c>
    3066:	e8 85       	ldd	r30, Y+8	; 0x08
    3068:	f9 85       	ldd	r31, Y+9	; 0x09
    306a:	80 2f       	mov	r24, r16
    306c:	09 95       	icall
    306e:	89 2b       	or	r24, r25
    3070:	31 f4       	brne	.+12     	; 0x307e <fputc+0x48>
    3072:	8e 81       	ldd	r24, Y+6	; 0x06
    3074:	9f 81       	ldd	r25, Y+7	; 0x07
    3076:	01 96       	adiw	r24, 0x01	; 1
    3078:	9f 83       	std	Y+7, r25	; 0x07
    307a:	8e 83       	std	Y+6, r24	; 0x06
    307c:	02 c0       	rjmp	.+4      	; 0x3082 <fputc+0x4c>
    307e:	0f ef       	ldi	r16, 0xFF	; 255
    3080:	1f ef       	ldi	r17, 0xFF	; 255
    3082:	c8 01       	movw	r24, r16
    3084:	df 91       	pop	r29
    3086:	cf 91       	pop	r28
    3088:	1f 91       	pop	r17
    308a:	0f 91       	pop	r16
    308c:	08 95       	ret

0000308e <__ultoa_invert>:
    308e:	fa 01       	movw	r30, r20
    3090:	aa 27       	eor	r26, r26
    3092:	28 30       	cpi	r18, 0x08	; 8
    3094:	51 f1       	breq	.+84     	; 0x30ea <__ultoa_invert+0x5c>
    3096:	20 31       	cpi	r18, 0x10	; 16
    3098:	81 f1       	breq	.+96     	; 0x30fa <__ultoa_invert+0x6c>
    309a:	e8 94       	clt
    309c:	6f 93       	push	r22
    309e:	6e 7f       	andi	r22, 0xFE	; 254
    30a0:	6e 5f       	subi	r22, 0xFE	; 254
    30a2:	7f 4f       	sbci	r23, 0xFF	; 255
    30a4:	8f 4f       	sbci	r24, 0xFF	; 255
    30a6:	9f 4f       	sbci	r25, 0xFF	; 255
    30a8:	af 4f       	sbci	r26, 0xFF	; 255
    30aa:	b1 e0       	ldi	r27, 0x01	; 1
    30ac:	3e d0       	rcall	.+124    	; 0x312a <__ultoa_invert+0x9c>
    30ae:	b4 e0       	ldi	r27, 0x04	; 4
    30b0:	3c d0       	rcall	.+120    	; 0x312a <__ultoa_invert+0x9c>
    30b2:	67 0f       	add	r22, r23
    30b4:	78 1f       	adc	r23, r24
    30b6:	89 1f       	adc	r24, r25
    30b8:	9a 1f       	adc	r25, r26
    30ba:	a1 1d       	adc	r26, r1
    30bc:	68 0f       	add	r22, r24
    30be:	79 1f       	adc	r23, r25
    30c0:	8a 1f       	adc	r24, r26
    30c2:	91 1d       	adc	r25, r1
    30c4:	a1 1d       	adc	r26, r1
    30c6:	6a 0f       	add	r22, r26
    30c8:	71 1d       	adc	r23, r1
    30ca:	81 1d       	adc	r24, r1
    30cc:	91 1d       	adc	r25, r1
    30ce:	a1 1d       	adc	r26, r1
    30d0:	20 d0       	rcall	.+64     	; 0x3112 <__ultoa_invert+0x84>
    30d2:	09 f4       	brne	.+2      	; 0x30d6 <__ultoa_invert+0x48>
    30d4:	68 94       	set
    30d6:	3f 91       	pop	r19
    30d8:	2a e0       	ldi	r18, 0x0A	; 10
    30da:	26 9f       	mul	r18, r22
    30dc:	11 24       	eor	r1, r1
    30de:	30 19       	sub	r19, r0
    30e0:	30 5d       	subi	r19, 0xD0	; 208
    30e2:	31 93       	st	Z+, r19
    30e4:	de f6       	brtc	.-74     	; 0x309c <__ultoa_invert+0xe>
    30e6:	cf 01       	movw	r24, r30
    30e8:	08 95       	ret
    30ea:	46 2f       	mov	r20, r22
    30ec:	47 70       	andi	r20, 0x07	; 7
    30ee:	40 5d       	subi	r20, 0xD0	; 208
    30f0:	41 93       	st	Z+, r20
    30f2:	b3 e0       	ldi	r27, 0x03	; 3
    30f4:	0f d0       	rcall	.+30     	; 0x3114 <__ultoa_invert+0x86>
    30f6:	c9 f7       	brne	.-14     	; 0x30ea <__ultoa_invert+0x5c>
    30f8:	f6 cf       	rjmp	.-20     	; 0x30e6 <__ultoa_invert+0x58>
    30fa:	46 2f       	mov	r20, r22
    30fc:	4f 70       	andi	r20, 0x0F	; 15
    30fe:	40 5d       	subi	r20, 0xD0	; 208
    3100:	4a 33       	cpi	r20, 0x3A	; 58
    3102:	18 f0       	brcs	.+6      	; 0x310a <__ultoa_invert+0x7c>
    3104:	49 5d       	subi	r20, 0xD9	; 217
    3106:	31 fd       	sbrc	r19, 1
    3108:	40 52       	subi	r20, 0x20	; 32
    310a:	41 93       	st	Z+, r20
    310c:	02 d0       	rcall	.+4      	; 0x3112 <__ultoa_invert+0x84>
    310e:	a9 f7       	brne	.-22     	; 0x30fa <__ultoa_invert+0x6c>
    3110:	ea cf       	rjmp	.-44     	; 0x30e6 <__ultoa_invert+0x58>
    3112:	b4 e0       	ldi	r27, 0x04	; 4
    3114:	a6 95       	lsr	r26
    3116:	97 95       	ror	r25
    3118:	87 95       	ror	r24
    311a:	77 95       	ror	r23
    311c:	67 95       	ror	r22
    311e:	ba 95       	dec	r27
    3120:	c9 f7       	brne	.-14     	; 0x3114 <__ultoa_invert+0x86>
    3122:	00 97       	sbiw	r24, 0x00	; 0
    3124:	61 05       	cpc	r22, r1
    3126:	71 05       	cpc	r23, r1
    3128:	08 95       	ret
    312a:	9b 01       	movw	r18, r22
    312c:	ac 01       	movw	r20, r24
    312e:	0a 2e       	mov	r0, r26
    3130:	06 94       	lsr	r0
    3132:	57 95       	ror	r21
    3134:	47 95       	ror	r20
    3136:	37 95       	ror	r19
    3138:	27 95       	ror	r18
    313a:	ba 95       	dec	r27
    313c:	c9 f7       	brne	.-14     	; 0x3130 <__ultoa_invert+0xa2>
    313e:	62 0f       	add	r22, r18
    3140:	73 1f       	adc	r23, r19
    3142:	84 1f       	adc	r24, r20
    3144:	95 1f       	adc	r25, r21
    3146:	a0 1d       	adc	r26, r0
    3148:	08 95       	ret

0000314a <_exit>:
    314a:	f8 94       	cli

0000314c <__stop_program>:
    314c:	ff cf       	rjmp	.-2      	; 0x314c <__stop_program>
